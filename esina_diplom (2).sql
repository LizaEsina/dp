-- phpMyAdmin SQL Dump
-- version 5.2.2
-- https://www.phpmyadmin.net/
--
-- Хост: mysql_db
-- Время создания: Май 14 2025 г., 12:38
-- Версия сервера: 8.0.41
-- Версия PHP: 8.2.28

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- База данных: `esina_diplom`
--

-- --------------------------------------------------------

--
-- Структура таблицы `achievements`
--

CREATE TABLE `achievements` (
  `id` int NOT NULL,
  `name` varchar(255) NOT NULL,
  `description` text NOT NULL,
  `icon` varchar(255) NOT NULL,
  `condition` varchar(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

--
-- Дамп данных таблицы `achievements`
--

INSERT INTO `achievements` (`id`, `name`, `description`, `icon`, `condition`) VALUES
(3, 'Первый шаг', 'Пройдите первый урок', 'first.png', 'complete_first_lesson'),
(4, 'Перфекционист', 'Решите урок с идеальным результатом', 'perfect.png', 'perfect_score'),
(5, 'SQL Мастер', 'Пройдите 5 SQL-уроков', 'sql-master.png', 'complete_5_sqli_lessons'),
(6, 'Упорство', 'Пройдите 3 любых урока', 'persistence.png', 'complete_3_lessons'),
(7, 'XSS-Охотник', 'Пройдите 3 XSS-урока', 'xss.png', 'complete_3_xss_lessons'),
(8, 'CSRF-Щит', 'Пройдите 2 CSRF-урока', 'csrf.png', 'complete_2_csrf_lessons');

-- --------------------------------------------------------

--
-- Структура таблицы `assignments`
--

CREATE TABLE `assignments` (
  `id` int NOT NULL,
  `lesson_id` int NOT NULL,
  `type` enum('code','quiz','vulnerability_fix','attack_simulation') NOT NULL,
  `difficulty_level` enum('low','medium','hard') NOT NULL,
  `config` json NOT NULL,
  `solution_code` text,
  `validation_rules` json DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

--
-- Дамп данных таблицы `assignments`
--

INSERT INTO `assignments` (`id`, `lesson_id`, `type`, `difficulty_level`, `config`, `solution_code`, `validation_rules`) VALUES
(1, 1, 'code', 'low', '{\"hints\": [\"Используйте подготовленные выражения\", \"Замените конкатенацию строк на параметризованный запрос\"], \"template\": \"SELECT * FROM users WHERE username = \'\'{{input}}\'\'\", \"description\": \"Исправьте уязвимость SQL-инъекции в простом запросе\", \"attack_example\": \"admin\'\' OR \'\'1\'\'=\'\'1\"}', ' <?php\r\n$allowlist = [\'admin\', \'user\', \'guest\'];\r\n$username = $_GET[\'username\'];\r\n\r\nif (in_array($username, $allowlist)) {\r\n    $stmt = $pdo->prepare(\"SELECT * FROM users WHERE username = ?\");\r\n    $stmt->execute([$username]);\r\n    $result = $stmt->fetchAll();\r\n}\r\n?>', '{\"protection_type\": \"prepared_statements\", \"required_patterns\": [\"/->prepare\\\\s*\\\\(/i\"], \"forbidden_patterns\": [\"\\\\$_GET\\\\[\\\\\'\'username\\\\\'\'\\\\]\\\\s*\\\\.\"], \"vulnerability_checks\": [\"SQLi\"]}'),
(2, 2, 'code', 'medium', '{\"hints\": [\"Используйте параметр для вызова процедуры\", \"Не вставляйте переменную напрямую в SQL-строку\"], \"template\": \"CALL getUserByName({{input}})\", \"description\": \"Убедитесь, что пользовательский ввод не может нарушить структуру вызова процедуры\", \"mustContain\": [\"prepare\", \"CALL\"], \"error_message\": \"Запрос должен быть вызовом процедуры \'getUserByName\', а не обычным SELECT запросом.\", \"attack_example\": \"admin\\\\\' OR 1=1\", \"protection_type\": \"procedure_call\", \"required_patterns\": [\"prepare\", \"\\\\?\", \"CALL\\\\s+getUserByName\\\\s*\\\\(\\\\s*\\\\?\"], \"forbidden_patterns\": [\"CONCAT\", \"SELECT.*FROM.*WHERE.*\\\\?\", \"DROP|DELETE|UPDATE\"], \"vulnerability_checks\": [\"injection_check\", \"parameterized_check\"]}', '<?php\r\n$username = $_GET[\'username\'];\r\n$stmt = $pdo->prepare(\"CALL getUserByName(:username)\"); \r\n$stmt->bindParam(\':username\', $username, PDO::PARAM_STR);\r\n$stmt->execute();\r\n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\r\nprint_r($result);\r\n?>\r\n', '{\"protection_type\": \"prepared_statements\", \"required_patterns\": [\"prepare\", \"\\\\?\"], \"forbidden_patterns\": [\"\\\\$\\\\_GET\\\\[\\\\\\\"name\\\\\\\"\\\\]\\\\s*\\\\.\"], \"vulnerability_checks\": [\"SQLi\"]}'),
(3, 8, 'code', 'medium', '{\"template\": \"example.sql\", \"description\": \"Пример задания\"}', 'SELECT * FROM users WHERE id = 1', '{\"mustContain\": [\"SELECT\"]}'),
(4, 6, 'code', 'low', '\"123\"', '123', '\"12фффффф3\"'),
(5, 10, 'attack_simulation', 'medium', '{\"hint\": \"Простые <script>alert()</script> фильтруются. Используйте альтернативные XSS-векторы (например, через тег <img>).\", \"template\": \"greeting.php?name=Значение_пользователя\", \"xss_type\": \"Reflected XSS\", \"description\": \"Параметр `name` подставляется в HTML без фильтрации, но фильтруются теги `<script>`. Найдите способ выполнить XSS несмотря на это.\", \"vulnerable_url\": \"greeting.php?name=\"}', NULL, '{\"should_trigger_alert\": true, \"expected_substring_in_url\": \"<img src=x onerror=alert(1)>\"}'),
(6, 11, 'attack_simulation', 'hard', '{\"hint\": \"Тег <script> запрещён, но вы можете использовать другие теги с обработчиками событий, например <svg> или <img>.\", \"template\": \"comment_form.php\", \"xss_type\": \"Stored XSS\", \"description\": \"Форма комментариев сохраняет текст без фильтрации, но блокирует `<script>`. Найдите обход, при котором при перезагрузке сработает alert.\", \"storage_file\": \"comments.txt\"}', NULL, '{\"must_persist\": true, \"expected_stored_value\": \"<svg onload=alert(1)>\", \"should_trigger_alert_on_reload\": true}'),
(7, 12, 'attack_simulation', 'medium', '{\"hint\": \"Параметр msg вставляется через innerHTML. Скрипты фильтруются, но можно использовать закодированный payload.\", \"template\": \"dom_xss.html?msg=\", \"xss_type\": \"DOM-based XSS\", \"test_input\": \"<img src=x onerror=alert(1)>\", \"description\": \"Страница вставляет параметр `msg` в DOM через innerHTML. Попробуйте внедрить XSS через обработчик событий или закодированный скрипт.\", \"mustContain\": [\"textContent\"], \"vulnerable_js\": \"document.getElementById(\\\"message\\\").innerHTML = params.get(\\\"msg\\\");\", \"forbiddenPatterns\": [\"innerHTML\", \"document.write\", \"eval\"], \"should_trigger_alert\": false}', NULL, '{\"should_trigger_alert\": true, \"expected_substring_in_url\": \"<script>alert(\\\"XSS\\\")</script>\"}'),
(8, 3, 'vulnerability_fix', 'hard', '{\"template\": \"Использование белого списка допустимых значений предотвращает SQL-инъекции, связанные с идентификаторами.<br><br>Уязвимый пример:<br>SELECT * FROM users ORDER BY $column<br>Если $column = \\\"username; DROP TABLE users;\\\" — произойдет SQL-инъекция.\", \"mustContain\": [\"$allowedColumns\", \"in_array\", \"ORDER BY\"], \"required_patterns\": [\"ORDER BY\", \"/in_array\\\\s*\\\\(/i\"], \"forbidden_patterns\": [\"\\\\$[_a-zA-Z][a-zA-Z0-9_]*\\\\s*\\\\.\"]}', '$allowedColumns = [\'username\', \'email\', \'created_at\'];\r\n$column = $_GET[\'sort\'] ?? \'username\';\r\n\r\nif (!in_array($column, $allowedColumns)) {\r\n    $column = \'username\';\r\n}\r\n\r\n$stmt = $pdo->prepare(\"SELECT * FROM users ORDER BY $column\");', '{\"mustContain\": [\"SELECT\", \"ORDER BY\"], \"protection_type\": \"whitelist\", \"vulnerability_checks\": [\"SQLi\"]}'),
(9, 9, 'code', 'medium', '{\"hint\": \"Простые <script>alert()</script> фильтруются. Используйте альтернативные XSS-векторы (например, через тег <img>).\", \"template\": \"greeting.php?name=Значение_пользователя\", \"description\": \"Параметр `name` подставляется в HTML без фильтрации, но фильтруются теги `<script>`. Найдите способ выполнить XSS несмотря на это.\", \"vulnerable_url\": \"greeting.php?name=\"}', 'вапроио', '{\"hint\": \"Простые <script>alert()</script> фильтруются. Используйте альтернативные XSS-векторы (например, через тег <img>).\", \"template\": \"greeting.php?name=Значение_пользователя\", \"description\": \"Параметр `name` подставляется в HTML без фильтрации, но фильтруются теги `<script>`. Найдите способ выполнить XSS несмотря на это.\", \"vulnerable_url\": \"greeting.php?name=\"}'),
(10, 13, 'code', 'medium', '{\"hint\": \"Используйте htmlspecialchars() для экранирования входных данных перед выводом в HTML.\", \"type\": \"secure_coding\", \"template\": \"greeting.php?name=Значение_пользователя\", \"xss_type\": \"Reflected XSS\", \"description\": \"Ваша задача — предотвратить выполнение XSS-атаки через параметр `name`, экранировав его значение перед вставкой в HTML.\", \"context_checks\": [\"html_escaping\"], \"vulnerable_url\": \"greeting.php?name=\", \"required_functions\": [\"htmlspecialchars\"]}', 'htmlspecialchars($name)', '{\"should_trigger_alert\": false}'),
(11, 14, 'code', 'hard', '{\"hint\": \"Используйте htmlspecialchars() при сохранении данных в базу данных и перед их отображением.\", \"type\": \"secure_coding\", \"template\": \"comment_form.php\", \"xss_type\": \"Stored XSS\", \"description\": \"Ваша задача — предотвратить выполнение XSS-атаки при сохранении комментариев. Нужно экранировать входные данные перед их сохранением и отображением.\", \"storage_file\": \"comments.txt\", \"context_checks\": [\"html_escaping\"], \"required_functions\": [\"htmlspecialchars\"]}', 'htmlspecialchars($comment)', '{\"must_persist\": true, \"should_trigger_alert_on_reload\": false}'),
(12, 15, 'vulnerability_fix', 'medium', '{\"hint\": \"Не используйте innerHTML. Вставляйте данные как текст, а не как HTML.\", \"template\": \"dom_xss_fix.html\", \"xss_type\": \"DOM-based XSS\", \"description\": \"Вставка параметра `msg` в DOM происходит с использованием innerHTML, что делает возможной DOM-based XSS-атаку. Исправьте код так, чтобы вредоносный ввод не приводил к выполнению скрипта.\"}', 'const params = new URLSearchParams(window.location.search);\r\ndocument.getElementById(\"output\").textContent = params.get(\"msg\");', '{\"mustContain\": [\"textContent\"], \"forbiddenPatterns\": [\"innerHTML\", \"document.write\", \"eval\"], \"should_trigger_alert\": false}'),
(15, 16, 'vulnerability_fix', 'low', '{\"hint\": \"Сгенерируйте CSRF-токен в сессии и добавьте его в скрытое поле формы. При получении POST-запроса сравните полученный токен с сохранённым.\", \"template\": \"transfer_form.php\", \"csrf_type\": \"Basic CSRF Protection\", \"description\": \"В форме перевода средств отсутствует защита от CSRF-атак. Добавьте в неё CSRF-токен и реализуйте проверку его на стороне сервера.\"}', '<?php\r\nsession_start();\r\nif (!isset($_SESSION[\'csrf_token\'])) {\r\n  $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\r\n}\r\nif ($_SERVER[\'REQUEST_METHOD\'] === \'POST\') {\r\n  if (!hash_equals($_SESSION[\'csrf_token\'], $_POST[\'csrf_token\'])) {\r\n    die(\'Неверный CSRF токен\');\r\n  }\r\n  $amount = $_POST[\'amount\'];\r\n  $to = $_POST[\'to\'];\r\n  transferMoney($to, $amount);\r\n  echo \'Перевод выполнен.\';\r\n}\r\n?>\r\n<form method=\"POST\" action=\"\">\r\n  <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\'csrf_token\'] ?>\">\r\n  <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\r\n  <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\r\n  <button type=\"submit\">Перевести</button>\r\n</form>', '{\"csrf\": true, \"mustContain\": [\"input type=\\\"hidden\\\" name=\\\"csrf_token\\\"\"]}'),
(19, 18, 'vulnerability_fix', 'medium', '{\"csrf\": true, \"hint\": \"Добавьте проверку CSRF-токена, заголовка Referer и установите SameSite cookie.\", \"template\": \"csrf_advanced_fix.php\", \"description\": \"Исправьте уязвимость: добавьте защиту через CSRF-токен, проверку Referer и настройку SameSite.\"}', '<?php\r\nsession_start();\r\n\r\n// Установка cookie с атрибутом SameSite\r\nheader(\"Set-Cookie: session_id=\" . session_id() . \"; SameSite=Strict; HttpOnly; Path=/\");\r\n\r\nif (!isset($_SESSION[\'csrf_token\'])) {\r\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\r\n}\r\n\r\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\r\n    // Проверка Referer с использованием parse_url\r\n    if (!isset($_SERVER[\"HTTP_REFERER\"])) {\r\n        die(\"Отсутствует заголовок Referer.\");\r\n    }\r\n    $referer_host = parse_url($_SERVER[\"HTTP_REFERER\"], PHP_URL_HOST);\r\n    if ($referer_host !== \'yourdomain.com\') {  // Замените \'yourdomain.com\' на ваш домен\r\n        die(\"Неверный источник запроса.\");\r\n    }\r\n\r\n    // Проверка CSRF-токена с использованием hash_equals\r\n    if (!isset($_POST[\"csrf_token\"]) || !hash_equals($_SESSION[\"csrf_token\"], $_POST[\"csrf_token\"])) {\r\n        die(\"Недействительный CSRF токен.\");\r\n    }\r\n\r\n    $amount = $_POST[\"amount\"];\r\n    $to = $_POST[\"to\"];\r\n    transferMoney($to, $amount);\r\n    echo \"Перевод выполнен.\";\r\n}\r\n?>\r\n<form method=\"POST\" action=\"\">\r\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\'csrf_token\'] ?>\">\r\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\r\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\r\n    <button type=\"submit\">Перевести</button>\r\n</form>', '{\"csrf\": true, \"check_referer\": true, \"check_samesite\": true}'),
(20, 7, 'code', 'medium', '{\"template\": \"example.sql\", \"description\": \"Пример задания\"}', 'SELECT * FROM users WHERE id = 1', '{\"mustContain\": [\"SELECT\"]}');

-- --------------------------------------------------------

--
-- Структура таблицы `lessons`
--

CREATE TABLE `lessons` (
  `id` int NOT NULL,
  `title` varchar(255) NOT NULL,
  `slug` varchar(255) NOT NULL,
  `description` text NOT NULL,
  `difficulty` enum('low','medium','hard') NOT NULL,
  `category` enum('sql','xss','csrf','idol','broken_auth') NOT NULL,
  `theory_content` text NOT NULL,
  `vulnerable_code` text NOT NULL,
  `secure_code` text NOT NULL,
  `points` int NOT NULL DEFAULT '100',
  `is_premium` tinyint(1) NOT NULL DEFAULT '0',
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `is_visible` tinyint(1) NOT NULL DEFAULT '1'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

--
-- Дамп данных таблицы `lessons`
--

INSERT INTO `lessons` (`id`, `title`, `slug`, `description`, `difficulty`, `category`, `theory_content`, `vulnerable_code`, `secure_code`, `points`, `is_premium`, `created_at`, `is_visible`) VALUES
(1, 'SQL Injection - Базовая уязвимость', 'sql-injection-basic', 'Изучение базовой SQL-инъекции на примере уязвимого поиска.', 'low', 'sql', 'SQL Injection - Основы\r\n<br><br>\r\nSQL-инъекция — это техника внедрения вредоносного кода в SQL-запросы, которые выполняются приложением. \r\nОна позволяет злоумышленнику получить несанкционированный доступ к данным или манипулировать ими.\r\n<br><br>\r\nТипы SQL-инъекций:\r\n<br>\r\n-Внедрение в строки: Злоумышленник добавляет специальные символы (например, кавычки) к входным данным, чтобы изменить структуру SQL-запроса.\r\n<br>\r\n-Внедрение в числа: Злоумышленник использует числовые значения для изменения логики запроса.\r\n<br>\r\n-Внедрение на основе логических операторов: Злоумышленник использует логические операторы (AND, OR, NOT) для обхода условий авторизации или получения дополнительных данных.\r\n<br>\r\nПример:\r\n<br><br>\r\nУязвимый код: `SELECT * FROM users WHERE username = \\\'$username\\\'`\r\n<br>\r\nЕсли злоумышленник введет `\' OR \'1\'=\'1`, запрос станет: `SELECT * FROM users WHERE username = \'\' OR \'1\'=\'1\'`\r\n<br>\r\nЭто условие всегда истинно, и злоумышленник получит доступ ко всем записям в таблице users.\r\n<br><br>\r\n  Защита от SQL-инъекций:\r\n<br>\r\n-Использование параметризованных запросов: Это самый эффективный способ предотвращения SQL-инъекций.\r\n<br>\r\n-Валидация входных данных: Проверка типов и форматов входных данных может помочь предотвратить некоторые типы инъекций.\r\n<br>\r\n-Экранирование специальных символов: Экранирование специальных символов, таких как кавычки, может помочь предотвратить внедрение в строки.\r\n\r\n', '<?php\r\n$username = $_POST[\'username\'];\r\n$password = $_POST[\'password\'];\r\n\r\n$query = \"SELECT * FROM users WHERE username=\'$username\' AND password=\'$password\'\";\r\n$result = mysqli_query($connection, $query);\r\n\r\nif (mysqli_num_rows($result) > 0) {\r\n    echo \"Успешный вход!\";\r\n} else {\r\n    echo \"Неверное имя пользователя или пароль.\";\r\n}\r\n?>\r\n', '<?php\r\n$username = $_POST[\'username\'];\r\n$password = $_POST[\'password\'];\r\n\r\n// Использование подготовленных выражений\r\n$stmt = $connection->prepare(\"SELECT * FROM users WHERE username=? AND password=?\");\r\n$stmt->bind_param(\"ss\", $username, $password); // \"ss\" обозначает, что оба параметра - строки\r\n$stmt->execute();\r\n$result = $stmt->get_result();\r\n\r\nif ($result->num_rows > 0) {\r\n    echo \"Успешный вход!\";\r\n} else {\r\n    echo \"Неверное имя пользователя или пароль.\";\r\n}\r\n\r\n$stmt->close();\r\n?>', 50, 0, '2025-04-08 09:24:55', 1),
(2, 'Хранимые процедуры и безопасность', 'stored-procedures-security', 'Преимущества использования хранимых процедур для защиты от SQL-инъекций.', 'medium', 'sql', 'Хранимые процедуры позволяют изолировать SQL-логику от пользовательского ввода. Это значительно снижает риск SQL-инъекций.\r\n<br><br>\r\nПреимущества:\r\n- Инкапсуляция логики запроса\r\n<br>\r\n- Безопасность ввода (переменные внутри процедуры)\r\n<br>\r\n- Централизация контроля доступа\r\n<br><br>\r\nПример уязвимости:\r\n<br>\r\nCALL getUserByName(\'admin\' OR 1=1);\r\n<br>\r\nРекомендации:\r\n- Используйте только параметры внутри процедур\r\n<br>\r\n- Не конкатенируйте SQL-строки в теле процедуры\r\n<br>\r\n- Ограничьте права доступа к выполнению процедур\r\n<br><br>\r\nУязвимость этого кода заключается в SQL-инъекции. Конкретно, через параметр $_GET[\'name\'] злоумышленник может вставить произвольный SQL-код, который будет выполнен на сервере.Это происходит из-за того, что значение параметра напрямую вставляется в SQL-запрос без предварительной обработки и экранирования.', '<?php\r\n$name = $_GET[\'name\'];\r\n$sql = \"CALL getUserByName(\'$name\')\";\r\n$result = mysqli_query($conn, $sql);\r\n?>', '<?php\r\n$name = $_GET[\'name\'];\r\n$stmt = $conn->prepare(\"CALL getUserByName(?)\");\r\n$stmt->bind_param(\"s\", $name);\r\n$stmt->execute();\r\n$result = $stmt->get_result();\r\n?>', 75, 0, '2025-04-21 09:47:24', 1),
(3, 'Белый список для SQL параметров', 'sql-whitelist-columns', 'Использование белого списка допустимых значений предотвращает SQL-инъекции, связанные с идентификаторами.', 'hard', 'sql', 'Если нужно передавать в запросе имя колонки или таблицы, нельзя использовать параметризацию. Поэтому важно проверять значение по белому списку.\r\n<br><br>\r\nБелый список (allowlist) — один из самых надежных способов защиты от SQL-инъекций, связанных с динамическими идентификаторами (именами таблиц, колонок и т. д.). Его эффективность основана на следующих принципах:\r\n<br>\r\n1. Жесткое ограничение допустимых значений\r\n<br>\r\nВ белом списке явно перечисляются единственно разрешенные варианты (например, [\"id\", \"username\", \"created_at\"]).\r\n<br>\r\nЕсли значение не совпадает ни с одним элементом списка, оно отбрасывается, и SQL-запрос не выполняется.\r\n<br>\r\n2. Невозможность подмены логики SQL\r\nДаже если злоумышленник передаст \"id; DROP TABLE users --\", это значение не попадет в запрос, так как его нет в белом списке.\r\n<br><br>\r\nИспользование белого списка — не единственный способ защиты идентификаторов в SQL. Альтернативный подход — строгая проверка структуры переданного значения через регулярные выражения.<br>Но это менее безопасно, чем белый список, т.к. разрешает любые имена колонок, соответствующие шаблону.<br><br>\r\nУязвимый пример:\r\n<br>\r\nSELECT * FROM users ORDER BY $column\r\n<br>\r\nЕсли $column = \"username; DROP TABLE users;\" — произойдет SQL-инъекция.\r\n\r\n', '<?php\r\n$column = $_GET[\'sort\'];\r\n$query = \"SELECT * FROM users ORDER BY $column\";\r\n$result = mysqli_query($conn, $query);\r\n?>', '<?php\r\n$allowed = [\"username\", \"created_at\"];\r\n$column = $_GET[\'sort\'];\r\nif (in_array($column, $allowed)) {\r\n    $query = \"SELECT * FROM users ORDER BY $column\";\r\n    $result = mysqli_query($conn, $query);\r\n} else {\r\n    echo \"Недопустимое значение\";\r\n}\r\n?>', 100, 0, '2025-04-21 09:49:34', 1),
(6, 'Новый урок1234556', '123', '123', 'medium', 'sql', '12367890', '123', '123', 123, 0, '2025-04-21 12:55:46', 0),
(7, 'Новый урок', 'new-lesson', 'Описание урока', 'medium', 'sql', 'Содержание урока...', 'ффффффф', 'hh', 150, 0, '2025-04-21 12:58:01', 0),
(8, '123', '123', '123', 'low', 'sql', '123', '123', '123', 123, 0, '2025-04-21 14:00:47', 0),
(9, 'Новый урок хсс', '123', '123', 'medium', 'xss', '123', '123', '123', 100, 0, '2025-04-21 19:52:51', 0),
(10, 'Reflected XSS', 'reflected-xss', 'В этом уроке вы узнаете, как работает Reflected XSS — уязвимость, при которой вредоносный код внедряется в URL и исполняется при переходе по ссылке.', 'medium', 'xss', '\r\nReflected XSS (Cross-Site Scripting) — это один из самых распространённых типов атак в веб-приложениях, который позволяет злоумышленнику выполнять произвольный код на стороне клиента через внедрение вредоносных скриптов в веб-страницу. <br>Данный тип XSS-уязвимостей обычно возникает, когда веб-приложение включает данные, переданные пользователем (например, через URL, HTTP-заголовки или формы), без их надлежащей обработки.<br><br>\r\nПримеры использования в Attacks:\r\n<br>\r\n- Кража cookies (например, сессионных идентификаторов).\r\n- Подмена содержимого страницы.\r\n- Фишинг-атаки и распространение вредоносного ПО.\r\n<br><br>\r\nСпособы защиты от Reflected XSS <br>\r\n1. Экранирование данных: Все входные данные, передаваемые в браузер, должны быть экранированы. Это означает, что специальные символы (такие как <, >, &, \" и другие) должны преобразовываться в безопасные сущности (например, < в &lt;).\r\n<br>\r\n2. Правильная валидация входящих данных: Необходимо проверять данные, поступающие от пользователя, на корректность и соответствие ожидаемому формату. Используйте белые списки (whitelists) для разрешённых значений.\r\n<br>\r\n3. HTTP заголовки безопасности:\r\n   - Content Security Policy (CSP): Позволяет указать, какие ресурсы могут быть загружены и выполнены на странице. Это значительно снижает риск выполнения несанкционированного кода.\r\n   - X-XSS-Protection: Включает встроенные механизмы защиты от XSS в браузерах.\r\n<br>\r\n4. Избегать использования неэкранированных данных в HTML: Помните, что данные не должны вставляться напрямую в HTML, JavaScript, CSS или URL без надлежащей обработки.\r\n<br>\r\n5. Использование фреймов и iframe: Если ваше приложение использует фреймы, прозрачная настройка их свойств и заголовков может помочь снизить риски.\r\n<br>\r\n6. Обновление библиотек и платформ: Регулярно обновляйте используемые вами библиотеки и платформы для устранения известных уязвимостей.\r\n<br>\r\n7. Безопасное управление сессиями: Защита от кражи сессий через использование безопасных куки (например, с атрибутом HttpOnly), чтобы не позволить JavaScript получать доступ к сессионным идентификаторам.\r\n<br><br>\r\nReflected XSS — это серьёзная уязвимость, которая может поставлять значительные угрозы для пользователей и веб-приложений. Понимание принципов её работы и внедрение надёжных мер защиты поможет минимизировать риски и обеспечить безопасность ваших приложений.\r\n<br><br>  Почему код уязвимый:<br>\r\n1. Неэкранированный вывод: В коде переменная $name передаётся напрямую в вывод HTML без какой-либо обработки или экранирования. Если пользователь введёт вредоносный скрипт как часть параметра name в URL, этот скрипт будет выполнен в контексте браузера.\r\n<br>\r\n2. Необходимость фильтрации и экранирования: Для защиты от подобных атак необходимо экранировать специальные символы, чтобы они не обработались как HTML или JavaScript. Обычно это делается с использованием функций, которые безопасно обрабатывают пользователи введенные данные. Например, можно использовать htmlspecialchars().\r\n', '<!-- Пример уязвимого кода -->\n<?php\n$name = $_GET[\'name\'] ?? \'Гость\';\necho \"Привет, $name!\";\n?>', '<!-- Безопасный вариант -->\r\n<?php\r\n$name = htmlspecialchars($_GET[\'name\'] ?? \'Гость\', ENT_QUOTES, \'UTF-8\');\r\necho \"Привет, $name!\";\r\n?>\r\n<img src=\"x\" onerror=\"alert(1)\">\r\n', 100, 0, '2025-04-22 17:40:27', 1),
(11, 'Stored XSS', 'stored-xss', 'Изучите Stored XSS — одну из самых опасных форм XSS, при которой вредоносный код сохраняется в базе данных и автоматически исполняется при просмотре страницы другими пользователями.', 'hard', 'xss', 'Stored XSS (или Persistent XSS) — это тип атаки, при котором вредоносный код сохраняется на сервере (например, в базе данных) и затем отображается пользователям, которые обращаются к этому ресурсу. Это более опасный тип XSS по сравнению с Reflected XSS, так как злоумышленник может без особых усилий воздействовать на множество пользователей, которые впоследствии посетят скомпрометированную страницу.\r\n<br><br>\r\nПринцип работы Stored XSS\r\n<br>\r\n1. Внедрение кода: Злоумышленник вводит вредоносный JavaScript-код в форму ввода данных (например, в комментариях, профилях пользователей, полях для ввода) на веб-сайте. Этот код отправляется на сервер и сохраняется в базе данных.\r\n<br>\r\n2. Отображение кода: Когда другой пользователь (или тот же, после перезагрузки страницы) обращается к странице, информация извлекается из базы данных и выводится на экран без фильтрации или экранирования. Скрипт выполняется в контексте браузера пользователя.\r\n<br>\r\n3. Возможные последствия: Вредоносный код может выполнять различные действия, такие как кража cookies, управление аккаунтами, перенаправление на фишинговые сайты и другое.\r\n<br><br>\r\nСпособы защиты от Stored XSS:\r\n<br>\r\n1. Экранирование пользовательских данных:\r\n   - Обязательно экранируйте специальные символы при выводе данных в HTML, используя функции, такие как htmlspecialchars() в PHP или соответствующие функции в других языках. Это предотвращает интерпретацию кода как HTML/JavaScript.\r\n<br>\r\n2. Санитизация данных:\r\n   - Для пользовательского ввода используйте библиотеки, которые могут помочь в очистке и фильтрации данных. Например, для удаления потенциально опасных тегов можно использовать HTML Purifier.\r\n<br>\r\n3. Content Security Policy (CSP):\r\n   - Используйте заголовок Content Security Policy для ограничения типов контента, которые могут загружаться и выполняться на вашем сайте. CSP позволяет указать, откуда можно выполнять скрипты, что значительно уменьшает риск XSS.\r\n<br>\r\n4. Правильная валидация вводимых данных:\r\n   - Валидация данных при их получении помогает убедиться, что пользователь вводит только ожидаемые типы данных и форматы.\r\n<br>\r\n5. Изоляция контента:\r\n   - Разделяйте доверенный контент и пользовательские данные. Например, если возможно, загружайте пользовательский контент в отдельные контексты, такие как iframe с ограничениями.\r\n<br><br>\r\nStored XSS представляет собой серьёзную угрозу для безопасности веб-приложений, поскольку позволяет злоумышленникам внедрять вредоносный код, который может затрагивать множество пользователей. Эффективные стратегии защиты включают правильное экранирование и валидацию пользовательских данных, а также использование современных механизмов безопасности, таких как CSP. Регулярное обновление знаний разработчиков о методах защиты от XSS также имеет ключевое значение для обеспечения безопасности приложений.\r\n<br><br>\r\nПочему код уязвимый:<br>\r\n\r\n1. Неэкранированный вывод: Код напрямую выводит данные, полученные от пользователя, в HTML. Конкретно, строка echo \"<р>$c</р>\"; вставляет содержимое переменной $c, которая может содержать любые данные, без какой-либо обработки или экранирования. Это может позволить злоумышленнику внедрять вредоносный JavaScript-код.\r\n<br>\r\n2. Сохранение пользовательских данных: Код сохраняет комментарии, введенные пользователем, в файл comments.txt. Если злоумышленник отправит JavaScript-код через форму в качестве комментария, этот код будет сохранен в файл и впоследствии выведен на страницу, что приведет к его выполнению в браузере любого пользователя, который откроет страницу с комментариями.\r\n<br>\r\n\r\n', '<!-- Пример уязвимого кода -->\n<?php\nif ($_POST[\'comment\']) {\n  file_put_contents(\"comments.txt\", $_POST[\'comment\'] . PHP_EOL, FILE_APPEND);\n}\n$comments = file(\"comments.txt\");\nforeach ($comments as $c) {\n  echo \"<p>$c</p>\";\n}\n?>', '<!-- Безопасный вариант -->\n<?php\nif ($_POST[\'comment\']) {\n  file_put_contents(\"comments.txt\", htmlspecialchars($_POST[\'comment\'], ENT_QUOTES, \'UTF-8\') . PHP_EOL, FILE_APPEND);\n}\n$comments = file(\"comments.txt\");\nforeach ($comments as $c) {\n  echo \"<p>$c</p>\";\n}\n?>', 150, 0, '2025-04-22 17:48:32', 1),
(12, 'DOM-based XSS', 'dom-xss', 'Узнайте, как DOM-based XSS работает полностью на стороне клиента, позволяя обойти серверные фильтры и исполняться в браузере пользователя.', 'medium', 'xss', 'DOM-based XSS — это вид уязвимости, где JavaScript-код на стороне клиента использует данные, не безопасно изолированные от пользователя, и таким образом создаёт уязвимость, позволяющую злоумышленнику выполнять произвольный JavaScript-код в контексте доверенного веб-сайта. В отличие от других типов XSS, таких как Reflected XSS и Stored XSS, где атака происходит на стороне сервера, DOM-based XSS происходит исключительно на стороне клиента.\r\n<br><br>\r\nПринцип работы DOM-based XSS \r\n<br><br>\r\n1. Сбор данных: Веб-страница или веб-приложение использует данные, предоставленные пользователем, которые могут быть извлечены из URL, параметров или других источников. Злоумышленник может подменить эти данные.\r\n<br>\r\n2. Манипуляция DOM: JavaScript на странице может изменять структуру документа (DOM) в зависимости от этих данных. Если данные не экранируются и не очищаются, злоумышленник может внедрить вредоносный код.\r\n<br>\r\n3. Выполнение кода: Браузер выполняет тот JavaScript-код, который был внедрён злоумышленником, что может привести к утечке данных, перенаправлению пользователя, кражи сессий и другим потенциальным атакам.\r\n<br><br>\r\nСпособы защиты от DOM-based XSS\r\n<br>\r\n1. Избегать передачи данных от пользователя в функцию, изменяющую DOM, без фильтрации:\r\n   Отказаться от использования полных строк для вставки данных в DOM. Используйте безопасные методы, такие как textContent вместо innerHTML.\r\n<br>\r\n2. Настройки Content Security Policy (CSP):\r\n   CSP может помочь уменьшить вероятность выполнения злонамеренного кода. Убедитесь, что у вас есть строгие настройки CSP; для JavaScript, загруженного из ненадёжных источников, используйте директиву script-src.\r\n<br>\r\n3. Валидация и фильтрация пользовательского ввода:\r\n   Всегда проверяйте и обрабатывайте данные, поступающие от пользователя. Это может быть, например, удаление или экранирование потенциально опасных символов.\r\n<br>\r\n4. Ограничение доступа к данным:\r\n   Убедитесь, что данные, которые передаются в скрипты, изолированы и обладают необходимыми ограничениями. Используйте белые списки (whitelists) для допустимых значений.\r\n<br>\r\n5. Использование безопасных методов работы с DOM:\r\n   Такие методы, как .appendChild() или createElement, позволяют безопасно добавлять элементы в DOM без риска выполнения потенциального вредоносного кода.\r\n<br><br>\r\nDOM-based XSS может быть сложнее обнаружить и предотвратить, так как атака происходит на стороне клиента и часто зависит от JavaScript, который манипулирует DOM. Для предотвращения этой уязвимости необходимо следовать принципам безопасного программирования, избегать прямой вставки недостоверных данных в DOM и применять такие инструменты, как Content Security Policy, для ограничения потенциальных путей выполнения вредоносного кода.\r\n<br><br>\r\nПочему код в примере уязвим:<br>\r\n1. Неэкранированный вывод: В коде используется свойство innerHTML, чтобы вставить содержимое переменной msg, извлечённой из параметров URL. Поскольку значение, получаемое из запроса пользователем (например, через GET-параметры), не проверяется и не фильтруется, существует возможность внедрения HTML и JavaScript кода. \r\n<br>\r\n2. Уязвимость к выполнению произвольного JavaScript-кода: При выполнении document.getElementById(\"message\").innerHTML = params.get(\"msg\");, браузер начнет обрабатывать метатег <script> как JavaScript кода и выполнит его. Это может привести к выполнению вредоносных сценариев.\r\n<br>\r\n', '<!-- Пример уязвимого кода -->\n<p id=\"message\"></p>\n<script>\n  const params = new URLSearchParams(window.location.search);\n  document.getElementById(\"message\").innerHTML = params.get(\"msg\");\n</script>', '<!-- Безопасный вариант -->\n<p id=\"message\"></p>\n<script>\n  const params = new URLSearchParams(window.location.search);\n  const msg = document.createTextNode(params.get(\"msg\") || \"\");\n  document.getElementById(\"message\").appendChild(msg);\n</script>', 120, 0, '2025-04-22 17:55:02', 1),
(13, 'Защита от Reflected XSS', 'protect-reflected-xss', 'Этот урок научит вас защищаться от атак типа Reflected XSS, экранируя данные перед их вставкой в HTML. Вы узнаете, как предотвращать выполнение вредоносного кода через параметры в URL.', 'medium', 'xss', 'Что такое Reflected XSS?<br><br>\r\nReflected XSS (отражённый XSS) — это тип уязвимости, при котором вредоносный код внедряется через параметры URL и немедленно \"отражается\" обратно в ответ сервера. Такой код обычно не сохраняется на сервере, а лишь используется в текущем запросе.<br><br>\r\n\r\nПример уязвимого URL:<br>\r\nhttps://example.com/greeting.php?name=&lt;script&gt;alert(1)&lt;/script&gt;<br><br>\r\n\r\nЕсли сервер вставляет значение name в HTML без экранирования, злоумышленник может внедрить JavaScript-код, который выполнится у жертвы.<br><br>\r\n\r\nКак работает атака?<br><br>\r\nВ уязвимом PHP-коде:<br>\r\n<pre><code>&lt;?php\r\n$name = $_GET[\"name\"];\r\necho \"&lt;h1&gt;Welcome, $name!&lt;/h1&gt;\";\r\n?&gt;</code></pre><br>\r\n\r\nЕсли пользователь передаст в URL значение name=&lt;script&gt;alert(1)&lt;/script&gt;, то сервер вернёт:<br>\r\n<pre><code>&lt;h1&gt;Welcome, &lt;script&gt;alert(1)&lt;/script&gt;&lt;/h1&gt;</code></pre><br>\r\n\r\nВ результате сработает alert(1), то есть произойдёт XSS-атака.<br><br>\r\n\r\nЧем это опасно?<br>\r\n- Кража cookies или токенов авторизации<br>\r\n- Перенаправление пользователя на вредоносный сайт<br>\r\n- Отображение поддельных форм входа<br>\r\n- Манипуляция DOM-элементами<br>\r\n- Выполнение произвольных скриптов<br><br>\r\n\r\nКак защититься?<br><br>\r\nЧтобы защититься от отражённого XSS, нужно экранировать входные данные перед вставкой в HTML. В PHP для этого используется функция <code>htmlspecialchars()</code>.<br><br>\r\n\r\nБезопасный вариант:<br>\r\n<pre><code>&lt;?php\r\n$name = htmlspecialchars($_GET[\"name\"], ENT_QUOTES, \"UTF-8\");\r\necho \"&lt;h1&gt;Welcome, $name!&lt;/h1&gt;\";\r\n?&gt;</code></pre><br>\r\n\r\nФункция htmlspecialchars() заменяет специальные символы:<br>\r\n- < → &amp;lt;<br>\r\n- > → &amp;gt;<br>\r\n- \" → &amp;quot;<br>\r\n- \' → &amp;#039;<br>\r\n- &amp; → &amp;amp;<br><br>\r\n\r\nТаким образом, даже если в name будет &lt;script&gt;alert(1)&lt;/script&gt;, он будет отображён как текст, а не как исполняемый код.<br><br>\r\n\r\nРекомендации:<br>\r\n- Никогда не вставляйте пользовательский ввод напрямую в HTML.<br>\r\n- Используйте htmlspecialchars() по умолчанию.<br>\r\n- Для вставки в JavaScript и атрибуты HTML используйте дополнительные методы фильтрации.<br>\r\n- Используйте шаблонизаторы, которые автоматически экранируют данные.<br><br>\r\n\r\nПрактика:<br>\r\nВ следующем задании вам нужно исправить уязвимый код, используя htmlspecialchars() для безопасного вывода имени.', '```\r\n<?php\r\n$name = $_GET[\"name\"];\r\necho \"<h1>Welcome, $name!</h1>\";\r\n```', '```\r\n<?php\r\n$name = htmlspecialchars($_GET[\"name\"], ENT_QUOTES, \"UTF-8\");\r\necho \"<h1>Welcome, $name!</h1>\";\r\n```', 100, 0, '2025-04-29 11:05:46', 1),
(14, 'Защита от Stored XSS', 'protect-stored-xss', 'В этом уроке вы научитесь защищать приложения от атак Stored XSS, которые происходят, когда пользовательский ввод сохраняется в базе данных без фильтрации и отображается без экранирования.', 'hard', 'xss', 'Что такое Stored XSS?<br><br>\r\nStored XSS (постоянный XSS) — это тип XSS-атаки, при котором вредоносный код сохраняется на сервере, например, в базе данных, текстовом файле или другом хранилище. Этот код затем отображается другим пользователям без должной фильтрации или экранирования.<br><br>\r\n\r\nКак работает Stored XSS?<br><br>\r\n1. Злоумышленник отправляет вредоносный скрипт через форму, например, комментарий:<br>\r\n<code>&lt;script&gt;alert(1)&lt;/script&gt;</code><br>\r\n2. Сервер сохраняет этот комментарий в файл или базу данных.<br>\r\n3. Когда другой пользователь загружает страницу, содержащую комментарии, вредоносный скрипт отображается и исполняется в его браузере.<br><br>\r\n\r\nУязвимый пример:<br>\r\n<pre><code>&lt;?php\r\n$comment = $_POST[\"comment\"];\r\nfile_put_contents(\"comments.txt\", $comment . \"\n\", FILE_APPEND);\r\n?&gt;</code></pre><br>\r\n\r\nЭтот код сохраняет пользовательский ввод как есть — без фильтрации или экранирования. Если пользователь введёт &lt;script&gt;alert(1)&lt;/script&gt;, скрипт сохранится и будет выполнен у других пользователей при просмотре комментариев.<br><br>\r\n\r\nЧем это опасно?<br>\r\n- Мгновенное заражение всех пользователей, просматривающих сохранённые данные<br>\r\n- Кража куки и сессий<br>\r\n- Выполнение произвольного JavaScript-кода у пользователей<br>\r\n- Сложность обнаружения, особенно при долгосрочном хранении<br><br>\r\n\r\nКак защититься?<br><br>\r\nДля защиты от Stored XSS нужно экранировать пользовательские данные перед их сохранением или как минимум перед отображением. В PHP это можно сделать с помощью <code>htmlspecialchars()</code>:<br><br>\r\n\r\nБезопасный вариант:<br>\r\n<pre><code>&lt;?php\r\n$comment = htmlspecialchars($_POST[\"comment\"], ENT_QUOTES, \"UTF-8\");\r\nfile_put_contents(\"comments.txt\", $comment . \"\n\", FILE_APPEND);\r\n?&gt;</code></pre><br>\r\n\r\nТаким образом, даже если пользователь введёт &lt;script&gt;alert(1)&lt;/script&gt;, в файл будет записан безопасный текст, и скрипт не выполнится при отображении.<br><br>\r\n\r\nДополнительные меры защиты:<br>\r\n- Валидировать и фильтровать данные до сохранения<br>\r\n- Экранировать перед выводом в HTML, JavaScript, атрибуты и URL<br>\r\n- Использовать Content Security Policy (CSP), чтобы ограничить выполнение скриптов<br>\r\n- Использовать шаблонизаторы, которые по умолчанию экранируют вывод<br><br>\r\n\r\nРекомендации:<br>\r\n- Никогда не доверяйте пользовательскому вводу<br>\r\n- Не вставляйте данные напрямую в HTML без обработки<br>\r\n- Обеспечьте безопасность как на этапе хранения, так и на этапе отображения<br><br>\r\n\r\nВ этом уроке вы узнаете, как экранировать данные с помощью <code>htmlspecialchars()</code>, чтобы предотвратить выполнение вредоносных скриптов, сохранённых в файлах или базе данных.', '```\r\n<?php\r\n$comment = $_POST[\"comment\"];\r\nfile_put_contents(\"comments.txt\", $comment . \"\n\", FILE_APPEND);\r\n```', '```\r\n<?php\r\n$comment = htmlspecialchars($_POST[\"comment\"], ENT_QUOTES, \"UTF-8\");\r\nfile_put_contents(\"comments.txt\", $comment . \"\n\", FILE_APPEND);\r\n```', 100, 0, '2025-04-29 11:06:43', 1),
(15, 'Защита от DOM-based XSS', 'protect-dom-xss', 'В этом уроке вы узнаете, как обезопасить клиентский JavaScript-код от DOM-based XSS — атак, при которых злоумышленник внедряет вредоносный код в DOM через URL-параметры и другие источники.', 'medium', 'xss', 'Что такое DOM-based XSS?<br><br>\r\nDOM-based XSS — это уязвимость, при которой вредоносный JavaScript-код внедряется в структуру страницы (DOM) через небезопасную обработку данных на клиенте. Такие атаки не видны на сервере, потому что вредоносные данные не проходят через него — они обрабатываются напрямую браузером.<br><br>\r\n\r\nПример DOM-based XSS:<br>\r\n<pre><code>&lt;script&gt;\r\nconst params = new URLSearchParams(window.location.search);\r\ndocument.getElementById(\"output\").innerHTML = params.get(\"msg\");\r\n&lt;/script&gt;</code></pre><br>\r\n\r\nЕсли пользователь перейдёт по ссылке:<br>\r\n<code>example.com/page.html?msg=&lt;img src=x onerror=alert(1)&gt;</code><br>\r\nто скрипт вставит содержимое `msg` в DOM через `innerHTML`, и произойдёт XSS-атака.<br><br>\r\n\r\nКак защититься?<br>\r\n1. **Не использовать innerHTML** — по возможности заменяйте на `textContent` или безопасные DOM-методы.<br>\r\n2. **Экранировать или фильтровать данные**, если вставка в HTML неизбежна.<br>\r\n3. **Использовать шаблонизаторы или DOMPurify** — если нужно разрешить часть HTML, очищайте его от вредоносных скриптов.<br><br>\r\n\r\nБезопасный вариант:<br>\r\n<pre><code>&lt;script&gt;\r\nconst params = new URLSearchParams(window.location.search);\r\ndocument.getElementById(\"output\").textContent = params.get(\"msg\");\r\n&lt;/script&gt;</code></pre><br>\r\n\r\nВ этом примере данные вставляются как текст, а не HTML. Это предотвращает интерпретацию HTML- и JavaScript-кода.<br><br>\r\n\r\nДополнительные рекомендации:<br>\r\n- Проверяйте и валидируйте все данные из `window.location`, `document.URL`, `document.referrer`, и других источников<br>\r\n- Избегайте `document.write()`, `eval()`, `innerHTML`, `outerHTML`, `insertAdjacentHTML` без строгой фильтрации<br>\r\n- Используйте Content Security Policy (CSP), чтобы ограничить выполнение скриптов<br><br>\r\n\r\nЗапомните: DOM-based XSS может быть неочевидным, но столь же опасным, как и Reflected или Stored XSS.\r\n', '```\r\n&lt;script&gt;\r\nconst params = new URLSearchParams(window.location.search);\r\ndocument.getElementById(\"output\").innerHTML = params.get(\"msg\");\r\n&lt;/script&gt;\r\n```', '```\r\n&lt;script&gt;\r\nconst params = new URLSearchParams(window.location.search);\r\ndocument.getElementById(\"output\").textContent = params.get(\"msg\");\r\n&lt;/script&gt;\r\n```', 100, 0, '2025-04-29 11:15:40', 1),
(16, 'CSRF — Основы', 'csrf-basic', 'Изучение механизма атаки CSRF и способов её предотвращения.', 'low', 'csrf', '<h2>CSRF (Cross-Site Request Forgery)</h2>\r\n<p><strong>CSRF</strong> — это тип атаки, при котором злоумышленник заставляет браузер жертвы выполнить нежелательные действия на доверенном сайте, на котором жертва уже авторизована.</p>\r\n\r\n<h3>🔍 Пример атаки:</h3>\r\n<p>Пользователь авторизован в онлайн-банке и посещает вредоносный сайт. На нём размещён код:</p>\r\n<pre><code>&lt;img src=\"https://bank.com/transfer?to=attacker&amp;amount=1000\"&gt;</code></pre>\r\n<p>Так как сессия пользователя активна, браузер отправляет запрос с авторизационными куками — и перевод выполняется.</p>\r\n\r\n<h3>⚠️ Условия для успешной атаки:</h3>\r\n<ul>\r\n  <li>Активная сессия на целевом сайте</li>\r\n  <li>Сервер не проверяет источник запроса</li>\r\n  <li>Злоумышленник знает структуру запроса</li>\r\n</ul>\r\n\r\n<h3>🛡️ Методы защиты от CSRF:</h3>\r\n<ol>\r\n  <li><strong>CSRF-токены</strong> — уникальные, непредсказуемые значения, передаваемые в теле запроса или заголовке</li>\r\n  <li><strong>Проверка Origin/Referer</strong> — сервер проверяет, откуда пришёл запрос</li>\r\n  <li><strong>SameSite cookies</strong> — настройка cookie, ограничивающая их отправку:\r\n    <ul>\r\n      <li><code>SameSite=Strict</code> — максимально жёсткая политика</li>\r\n      <li><code>SameSite=Lax</code> — защита для большинства форм</li>\r\n      <li><code>SameSite=None; Secure</code> — для междоменных запросов (только по HTTPS)</li>\r\n    </ul>\r\n  </li>\r\n</ol>\r\n\r\n<h3>🧪 Пример защищённой формы:</h3>\r\n<pre><code>&lt;form method=\"POST\" action=\"/transfer\"&gt;\r\n  &lt;input type=\"hidden\" name=\"csrf_token\" value=\"e4b1c39...\"&gt;\r\n  &lt;input type=\"text\" name=\"to\" placeholder=\"Кому перевести\"&gt;\r\n  &lt;input type=\"number\" name=\"amount\" placeholder=\"Сумма\"&gt;\r\n  &lt;button type=\"submit\"&gt;Отправить&lt;/button&gt;\r\n&lt;/form&gt;</code></pre>\r\n\r\n<h3>🧠 Полезно знать:</h3>\r\n<ul>\r\n  <li>Особенно опасно для банков, госуслуг, админок</li>\r\n  <li>JavaScript не может отправить запрос с чужого домена без CORS</li>\r\n  <li>GET-запросы не должны изменять данные — только получать</li>\r\n</ul>', '<?php\r\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\r\n  $amount = $_POST[\"amount\"];\r\n  $to = $_POST[\"to\"];\r\n  transferMoney($to, $amount);\r\n  echo \"Перевод выполнен.\";\r\n}\r\n?>\r\n<form method=\"POST\" action=\"\">\r\n  <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\r\n  <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\r\n  <button type=\"submit\">Перевести</button>\r\n</form>', '<?php\r\nsession_start();\r\nif (!isset($_SESSION[\"csrf_token\"])) {\r\n  $_SESSION[\"csrf_token\"] = bin2hex(random_bytes(32));\r\n}\r\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\r\n  if (!hash_equals($_SESSION[\"csrf_token\"], $_POST[\"csrf_token\"])) {\r\n    die(\"Неверный CSRF токен\");\r\n  }\r\n  $amount = $_POST[\"amount\"];\r\n  $to = $_POST[\"to\"];\r\n  transferMoney($to, $amount);\r\n  echo \"Перевод выполнен.\";\r\n}\r\n?>\r\n<form method=\"POST\" action=\"\">\r\n  <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\"csrf_token\"] ?>\">\r\n  <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\r\n  <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\r\n  <button type=\"submit\">Перевести</button>\r\n</form>', 50, 0, '2025-05-05 08:29:34', 1),
(18, 'CSRF — Продвинутый уровень', 'csrf-advanced', 'Углублённое изучение защиты от CSRF с использованием токенов, заголовков и SameSite.', 'medium', 'csrf', '<h2>Продвинутая защита от CSRF (Cross-Site Request Forgery)</h2>\r\n<p><strong>CSRF</strong> — это атака, при которой злоумышленник заставляет браузер жертвы выполнить действия на доверенном сайте, используя активную сессию пользователя без его ведома.</p>\r\n\r\n<p>В этом уроке мы рассмотрим <strong>продвинутые механизмы защиты</strong> от CSRF:</p>\r\n\r\n<ol>\r\n  <li>\r\n    <strong>CSRF-токены</strong><br>\r\n    Токены должны быть <u>уникальными и непредсказуемыми</u> для каждой формы:\r\n    <ul>\r\n      <li>При отображении формы сервер генерирует токен и сохраняет его в сессии</li>\r\n      <li>Токен встраивается в HTML-код в скрытом поле</li>\r\n      <li>При отправке формы сервер сравнивает полученный токен с тем, что хранится в сессии</li>\r\n    </ul>\r\n    <pre><code>&lt;input type=\"hidden\" name=\"csrf_token\" value=\"random12345\"&gt;</code></pre>\r\n  </li>\r\n\r\n  <li>\r\n    <strong>SameSite cookies</strong><br>\r\n    Механизм защиты на уровне браузера:\r\n    <ul>\r\n      <li><code>SameSite=Strict</code> — куки отправляются только при навигации внутри сайта</li>\r\n      <li><code>SameSite=Lax</code> — разрешает безопасные запросы (например, GET с ссылкой)</li>\r\n      <li><code>SameSite=None; Secure</code> — для межсайтовых запросов, требуется HTTPS</li>\r\n    </ul>\r\n    <pre><code>Set-Cookie: session_id=abc123; SameSite=Strict</code></pre>\r\n  </li>\r\n\r\n  <li>\r\n    <strong>Проверка заголовков Origin и Referer</strong><br>\r\n    Сервер может анализировать источник запроса:\r\n    <ul>\r\n      <li>Если <code>Origin</code> не совпадает с доменом — запрос отклоняется</li>\r\n      <li>Заголовок <code>Referer</code> может использоваться как дополнительная проверка</li>\r\n    </ul>\r\n    <pre><code>if ($_SERVER[\\\'HTTP_ORIGIN\\\'] !== \\\'https://yourdomain.com\\\') {\r\n    die(\"CSRF verification failed.\");\r\n}</code></pre>\r\n  </li>\r\n\r\n  <li>\r\n    <strong>AJAX и REST API</strong><br>\r\n    При использовании JavaScript и REST-запросов:\r\n    <ul>\r\n      <li>CSRF-токен должен передаваться через заголовок, например <code>X-CSRF-Token</code></li>\r\n      <li>Сервер проверяет его так же, как скрытое поле формы</li>\r\n    </ul>\r\n    <pre><code>axios.post(\\\'/api/submit\\\', data, {\r\n  headers: {\r\n    \\\'X-CSRF-Token\\\': csrfToken\r\n  }\r\n});</code></pre>\r\n  </li>\r\n</ol>\r\n\r\n<h3>🧠 Рекомендации:</h3>\r\n<ul>\r\n  <li>Всегда применяйте несколько уровней защиты</li>\r\n  <li>Не доверяйте только куки — они автоматически отправляются браузером</li>\r\n  <li>GET-запросы не должны менять состояние сервера</li>\r\n</ul>', '<?php\r\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\r\n    $amount = $_POST[\"amount\"];\r\n    $to = $_POST[\"to\"];\r\n    transferMoney($to, $amount);\r\n    echo \"Перевод выполнен.\";\r\n}\r\n?>\r\n<form method=\"POST\" action=\"\">\r\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\r\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\r\n    <button type=\"submit\">Перевести</button>\r\n</form>', '<?php\r\nsession_start();\r\n\r\nif (!isset($_SESSION[\"csrf_token\"])) {\r\n    $_SESSION[\"csrf_token\"] = bin2hex(random_bytes(32));\r\n}\r\n\r\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\r\n    if (!hash_equals($_SESSION[\"csrf_token\"], $_POST[\"csrf_token\"])) {\r\n        die(\"Недействительный CSRF-токен\");\r\n    }\r\n\r\n    if (strpos($_SERVER[\"HTTP_REFERER\"], \"yourdomain.com\") === false) {\r\n        die(\"Неверный Referer\");\r\n    }\r\n\r\n    $amount = $_POST[\"amount\"];\r\n    $to = $_POST[\"to\"];\r\n    transferMoney($to, $amount);\r\n    echo \"Перевод выполнен.\";\r\n}\r\n?>\r\n<form method=\"POST\" action=\"\">\r\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\"csrf_token\"] ?>\">\r\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\r\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\r\n    <button type=\"submit\">Перевести</button>\r\n</form>', 80, 0, '2025-05-05 09:30:58', 1),
(19, 'Новый урок1231', 'new-lesson', 'Описание урока', 'medium', 'sql', 'Содержание урока...', 'ффффффф', 'hh', 150, 0, '2025-05-13 10:12:50', 0);

-- --------------------------------------------------------

--
-- Структура таблицы `lesson_attempts`
--

CREATE TABLE `lesson_attempts` (
  `id` int NOT NULL,
  `user_id` int NOT NULL,
  `lesson_id` int NOT NULL,
  `code` text NOT NULL,
  `is_correct` tinyint(1) NOT NULL DEFAULT '0',
  `score` int NOT NULL DEFAULT '0',
  `details` text,
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

--
-- Дамп данных таблицы `lesson_attempts`
--

INSERT INTO `lesson_attempts` (`id`, `user_id`, `lesson_id`, `code`, `is_correct`, `score`, `details`, `created_at`) VALUES
(2, 2, 1, 'SELECT * FROM users WHERE id = ?', 0, 50, NULL, '2025-04-08 11:17:08'),
(4, 2, 1, 'SELECT * FROM users WHERE id = ?', 0, 15, '{\"score\":15,\"is_correct\":false,\"feedback\":\"\\u0420\\u0435\\u0448\\u0435\\u043d\\u0438\\u0435 \\u0447\\u0430\\u0441\\u0442\\u0438\\u0447\\u043d\\u043e \\u0432\\u0435\\u0440\\u043d\\u043e\\u0435, \\u043d\\u043e \\u0442\\u0440\\u0435\\u0431\\u0443\\u0435\\u0442 \\u0434\\u043e\\u0440\\u0430\\u0431\\u043e\\u0442\\u043a\\u0438.\\n\\u0421\\u043e\\u0432\\u0435\\u0442: \\u0418\\u0441\\u043f\\u043e\\u043b\\u044c\\u0437\\u0443\\u0439\\u0442\\u0435 \\u043f\\u043e\\u0434\\u0433\\u043e\\u0442\\u043e\\u0432\\u043b\\u0435\\u043d\\u043d\\u044b\\u0435 \\u0432\\u044b\\u0440\\u0430\\u0436\\u0435\\u043d\\u0438\\u044f (PDO \\u0438\\u043b\\u0438 mysqli_stmt)\",\"errors\":[],\"warnings\":[]}', '2025-04-08 14:23:19'),
(8, 2, 1, 'SELECT secure_code FROM lessons WHERE id = 1;', 0, 12, '{\"score\":12,\"is_correct\":false,\"feedback\":\"\\u0420\\u0435\\u0448\\u0435\\u043d\\u0438\\u0435 \\u0447\\u0430\\u0441\\u0442\\u0438\\u0447\\u043d\\u043e \\u0432\\u0435\\u0440\\u043d\\u043e\\u0435, \\u043d\\u043e \\u0442\\u0440\\u0435\\u0431\\u0443\\u0435\\u0442 \\u0434\\u043e\\u0440\\u0430\\u0431\\u043e\\u0442\\u043a\\u0438.\\n\\u0421\\u043e\\u0432\\u0435\\u0442: \\u0418\\u0441\\u043f\\u043e\\u043b\\u044c\\u0437\\u0443\\u0439\\u0442\\u0435 \\u043f\\u043e\\u0434\\u0433\\u043e\\u0442\\u043e\\u0432\\u043b\\u0435\\u043d\\u043d\\u044b\\u0435 \\u0432\\u044b\\u0440\\u0430\\u0436\\u0435\\u043d\\u0438\\u044f (PDO \\u0438\\u043b\\u0438 mysqli_stmt)\",\"errors\":[],\"warnings\":[]}', '2025-04-08 16:58:02'),
(9, 2, 1, 'SELECT secure_code FROM lessons WHERE id = 1;', 1, 100, '{\"score\":100,\"is_correct\":true,\"feedback\":\"\\u041e\\u0442\\u043b\\u0438\\u0447\\u043d\\u043e! \\u0420\\u0435\\u0448\\u0435\\u043d\\u0438\\u0435 \\u043f\\u043e\\u043b\\u043d\\u043e\\u0441\\u0442\\u044c\\u044e \\u0441\\u043e\\u043e\\u0442\\u0432\\u0435\\u0442\\u0441\\u0442\\u0432\\u0443\\u0435\\u0442 \\u0431\\u0435\\u0437\\u043e\\u043f\\u0430\\u0441\\u043d\\u043e\\u043c\\u0443 \\u043a\\u043e\\u0434\\u0443.\",\"errors\":[],\"warnings\":[]}', '2025-04-08 16:59:10'),
(10, 2, 1, 'SELECT secure_code FROM lessons WHERE id = 1;', 1, 100, '{\"score\":100,\"is_correct\":true,\"feedback\":\"\\u041e\\u0442\\u043b\\u0438\\u0447\\u043d\\u043e! \\u0420\\u0435\\u0448\\u0435\\u043d\\u0438\\u0435 \\u043f\\u043e\\u043b\\u043d\\u043e\\u0441\\u0442\\u044c\\u044e \\u0441\\u043e\\u043e\\u0442\\u0432\\u0435\\u0442\\u0441\\u0442\\u0432\\u0443\\u0435\\u0442 \\u0431\\u0435\\u0437\\u043e\\u043f\\u0430\\u0441\\u043d\\u043e\\u043c\\u0443 \\u043a\\u043e\\u0434\\u0443.\",\"errors\":[],\"warnings\":[]}', '2025-04-09 19:01:14');

-- --------------------------------------------------------

--
-- Структура таблицы `lesson_hints`
--

CREATE TABLE `lesson_hints` (
  `id` int NOT NULL,
  `lesson_id` int NOT NULL,
  `text` text NOT NULL,
  `order_index` int NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

--
-- Дамп данных таблицы `lesson_hints`
--

INSERT INTO `lesson_hints` (`id`, `lesson_id`, `text`, `order_index`) VALUES
(1, 1, 'Используйте подготовленные выражения вместо конкатенации строк', 1);

-- --------------------------------------------------------

--
-- Структура таблицы `lesson_questions`
--

CREATE TABLE `lesson_questions` (
  `id` int NOT NULL,
  `lesson_id` int NOT NULL,
  `question` text NOT NULL,
  `correct_answer` text NOT NULL,
  `options` json NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

--
-- Дамп данных таблицы `lesson_questions`
--

INSERT INTO `lesson_questions` (`id`, `lesson_id`, `question`, `correct_answer`, `options`) VALUES
(1, 1, 'Что такое SQL инъекция?', 'Неправильный SQL запрос', '[\"Правильный SQL запрос\", \"Неправильный SQL запрос\", \"SQL процедура\"]'),
(2, 1, 'Как можно защититься от SQL инъекций?', 'Использование подготовленных выражений', '[\"Использование переменных\", \"Использование подготовленных выражений\", \"Установка пароля\"]'),
(3, 1, 'Что такое подмена запросов в SQL инъекциях?', 'Подмена запросов', '[\"Подмена запросов\", \"Обработка ошибок\", \"Использование индексов\"]'),
(4, 2, 'Какую роль играют хранимые процедуры в безопасности?', 'Предотвращают SQL инъекции', '[\"Ускоряют выполнение запросов\", \"Предотвращают SQL инъекции\", \"Упрощают написание запросов\"]'),
(5, 2, 'Какие преимущества хранимых процедур?', 'Они безопаснее для защиты от инъекций', '[\"Они позволяют использовать динамические SQL\", \"Они безопаснее для защиты от инъекций\", \"Они не имеют преимуществ\"]'),
(6, 3, 'Что такое белый список в контексте SQL параметров?', 'Список допустимых значений для параметров', '[\"Список всех SQL команд\", \"Список допустимых значений для параметров\", \"Список заблокированных команд\"]'),
(7, 3, 'Как белый список помогает предотвратить инъекции?', 'Ограничивает доступ к недопустимым данным', '[\"Позволяет быстро выполнять запросы\", \"Ограничивает доступ к недопустимым данным\", \"Ускоряет выполнение запросов\"]'),
(8, 10, 'Что такое Reflected XSS?', 'Вредоносный код исполняется при переходе по ссылке', '[\"Вредоносный код сохраняется в базе данных\", \"Вредоносный код исполняется при переходе по ссылке\", \"Вредоносный код внедряется через заголовки\"]'),
(9, 10, 'Как можно предотвратить Reflected XSS?', 'Экранирование данных перед вставкой в HTML', '[\"Использование cookies\", \"Экранирование данных перед вставкой в HTML\", \"Запрещение использования JavaScript\"]'),
(10, 11, 'Что такое Stored XSS?', 'Вредоносный код сохраняется в базе данных', '[\"Вредоносный код сохраняется в базе данных\", \"Вредоносный код исполняется при переходе по ссылке\", \"Вредоносный код внедряется через заголовки\"]'),
(11, 11, 'Как защититься от Stored XSS?', 'Фильтрация ввода перед сохранением в базе данных', '[\"Использование cookies\", \"Фильтрация ввода перед сохранением в базе данных\", \"Использование HTTPS\"]'),
(12, 12, 'Что такое DOM-based XSS?', 'Вредоносный код исполняется на стороне клиента', '[\"Вредоносный код исполняется на сервере\", \"Вредоносный код исполняется на стороне клиента\", \"Вредоносный код сохраняется в базе данных\"]'),
(13, 12, 'Как предотвратить DOM-based XSS?', 'Использование безопасных методов манипуляции DOM', '[\"Использование безопасных методов манипуляции DOM\", \"Использование cookies\", \"Запрещение использования JavaScript\"]'),
(14, 13, 'Как предотвратить Reflected XSS?', 'Экранирование данных перед вставкой в HTML', '[\"Запрещение использования cookies\", \"Экранирование данных перед вставкой в HTML\", \"Использование запретов на заголовки\"]'),
(15, 13, 'Как предотвратить выполнение вредоносного кода в URL?', 'Использование параметров с проверкой данных', '[\"Использование параметров с проверкой данных\", \"Использование cookies\", \"Запрещение использования JavaScript\"]'),
(16, 14, 'Что важно при защите от Stored XSS?', 'Фильтрация ввода данных', '[\"Фильтрация ввода данных\", \"Игнорирование ошибок\", \"Запрещение всех запросов\"]'),
(17, 14, 'Как предотвратить Stored XSS?', 'Экранирование данных перед их выводом', '[\"Фильтрация URL\", \"Экранирование данных перед их выводом\", \"Использование запретов на JavaScript\"]'),
(18, 15, 'Как предотвратить DOM-based XSS?', 'Использование безопасных методов манипуляции DOM', '[\"Использование безопасных методов манипуляции DOM\", \"Запрещение JavaScript в HTML\", \"Использование cookies\"]'),
(19, 15, 'Что важно при защите от DOM-based XSS?', 'Проверка данных, поступающих через URL-параметры', '[\"Запрещение использования cookies\", \"Проверка данных, поступающих через URL-параметры\", \"Фильтрация HTML-кода\"]'),
(20, 16, 'Что такое CSRF?', 'Атака, при которой злоумышленник заставляет жертву выполнить нежелательный запрос от её имени', '[\"Атака, при которой вредоносный код внедряется в HTML\", \"Атака, при которой злоумышленник заставляет жертву выполнить нежелательный запрос от её имени\", \"Атака, использующая слабый пароль\"]'),
(21, 16, 'Какая из следующих мер защищает от CSRF?', 'CSRF-токены', '[\"Хэширование пароля\", \"CSRF-токены\", \"Скрытие URL\"]'),
(22, 16, 'Какой заголовок можно использовать для дополнительной защиты от CSRF?', 'Origin или Referer', '[\"Content-Type\", \"Origin или Referer\", \"Accept-Encoding\"]'),
(23, 16, 'Как работает SameSite cookie?', 'Ограничивает передачу cookie только с запросами с того же сайта', '[\"Шифрует cookie\", \"Удаляет cookie после загрузки страницы\", \"Ограничивает передачу cookie только с запросами с того же сайта\"]'),
(24, 18, 'Что такое CSRF?', 'Атака, при которой злоумышленник заставляет браузер жертвы выполнить действия на доверенном сайте', '[\"Атака, при которой злоумышленник выполняет SQL-инъекцию\", \"Атака, при которой злоумышленник заставляет браузер жертвы выполнить действия на доверенном сайте\", \"Атака, при которой злоумышленник захватывает сессии пользователей\"]'),
(25, 18, 'Какие токены используются для защиты от CSRF?', 'CSRF-токены, которые уникальны и непредсказуемы', '[\"Сессионные токены\", \"CSRF-токены, которые уникальны и непредсказуемы\", \"OAuth токены\"]'),
(26, 18, 'Какой заголовок можно использовать для проверки подлинности запроса при защите от CSRF?', 'Referer или Origin', '[\"Content-Type\", \"Referer или Origin\", \"X-Frame-Options\"]'),
(27, 18, 'Какую политику следует использовать для SameSite cookies для максимальной защиты от CSRF?', 'SameSite=Strict или Lax', '[\"SameSite=None\", \"SameSite=Strict или Lax\", \"SameSite=None; Secure\"]'),
(28, 18, 'Что следует проверять в заголовках при использовании AJAX для защиты от CSRF?', 'Проверку CSRF-токена в заголовке X-CSRF-Token', '[\"Проверку Content-Type\", \"Проверку CSRF-токена в заголовке X-CSRF-Token\", \"Проверку Referer\"]'),
(29, 18, 'Какой метод защиты предотвращает атаки CSRF на сайте с помощью скрытых токенов?', 'Передача CSRF-токена в скрытом поле формы', '[\"Передача CSRF-токена в скрытом поле формы\", \"Использование HTTPS\", \"Ограничение времени сессии\"]'),
(30, 18, 'Какую функцию выполняет проверка заголовка Referer при защите от CSRF?', 'Проверяет, что запрос был отправлен с доверенного источника', '[\"Проверяет, что запрос был отправлен с доверенного источника\", \"Проверяет, что запрос был отправлен с HTTPS\", \"Проверяет, что запрос был отправлен с правильным токеном\"]');

-- --------------------------------------------------------

--
-- Структура таблицы `templates`
--

CREATE TABLE `templates` (
  `name` varchar(255) NOT NULL,
  `content` text NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

--
-- Дамп данных таблицы `templates`
--

INSERT INTO `templates` (`name`, `content`) VALUES
('comment_form.php', '<?php\r\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\r\n    $comment = $_POST[\"comment\"];\r\n    file_put_contents(\"comments.txt\", $comment . \"\\n\", FILE_APPEND);\r\n}\r\n?>\r\n<form method=\"post\">\r\n    <textarea name=\"comment\"></textarea>\r\n    <button type=\"submit\">Submit</button>\r\n</form>'),
('csrf_advanced_fix.php', '<?php\r\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\r\n  $amount = $_POST[\"amount\"];\r\n  $to = $_POST[\"to\"];\r\n  transferMoney($to, $amount);\r\n  echo \"Перевод выполнен.\";\r\n}\r\n?>\r\n<form method=\"POST\" action=\"\">\r\n  <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\r\n  <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\r\n  <button type=\"submit\">Перевести</button>\r\n</form>'),
('csrf-advanced', '<?php\r\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\r\n    $amount = $_POST[\"amount\"];\r\n    $to = $_POST[\"to\"];\r\n    transferMoney($to, $amount);\r\n    echo \"Перевод выполнен.\";\r\n}\r\n?>\r\n<form method=\"POST\" action=\"\">\r\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\r\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\r\n    <button type=\"submit\">Перевести</button>\r\n</form>'),
('dom_xss_fix.html', '<!DOCTYPE html>\r\n<html>\r\n<head>\r\n  <title>DOM XSS Example</title>\r\n</head>\r\n<body>\r\n  <p id=\"output\"></p>\r\n  <script>\r\n    const params = new URLSearchParams(window.location.search);\r\n    document.getElementById(\"output\").innerHTML = params.get(\"msg\");\r\n  </script>\r\n</body>\r\n</html>'),
('dom_xss.html', '<!DOCTYPE html>\n<html>\n<head>\n  <title>DOM XSS Example</title>\n</head>\n<body>\n  <div id=\"message\"></div>\n  <script>\n    const params = new URLSearchParams(window.location.search);\n    document.getElementById(\"message\").innerHTML = params.get(\"msg\");\n  </script>\n</body>\n</html>'),
('getUserByName_call.php', '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(:username)\");\n$stmt->bindParam(\':username\', $username, PDO::PARAM_STR);\n$stmt->execute();\n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>'),
('greeting.php', '<?php\n$name = $_GET[\"name\"];\necho \"<h1>Welcome, $name!</h1>\";\n?>'),
('transfer_form.php', '<?php\r\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\r\n    $amount = $_POST[\"amount\"];\r\n    $to = $_POST[\"to\"];\r\n    transferMoney($to, $amount);\r\n    echo \"Перевод выполнен.\";\r\n}\r\n?>\r\n<form method=\"POST\" action=\"\">\r\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\r\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\r\n    <button type=\"submit\">Перевести</button>\r\n</form>');

-- --------------------------------------------------------

--
-- Структура таблицы `user`
--

CREATE TABLE `user` (
  `id` int NOT NULL,
  `login` varchar(255) NOT NULL,
  `password` varchar(255) NOT NULL,
  `experience` int NOT NULL DEFAULT '0',
  `level` int NOT NULL DEFAULT '1',
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `role` enum('admin','user') NOT NULL DEFAULT 'user'
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

--
-- Дамп данных таблицы `user`
--

INSERT INTO `user` (`id`, `login`, `password`, `experience`, `level`, `created_at`, `updated_at`, `role`) VALUES
(2, 'lizza', '$2y$10$bkfHw6tYvavb6LCCSiF.pOUpnUixa4w98jUrcjCTvagW96Uck9RuC', 33826, 18, '2025-04-08 08:54:51', '2025-04-08 08:54:51', 'admin'),
(3, 'admin', '$2y$10$8TcUl6/SFqBflN8UllWwpuzxq61BWows8dWZgveFdKQUws09Od4mi', 200, 2, '2025-04-08 09:04:05', '2025-04-08 09:04:05', 'user'),
(4, 'arina', '$2y$10$Z3/6hy0Okc.iGI9cb2XUn.W8NcV9PpvQCgsQRKweFXqIcuZhBAYOe', 100, 2, '2025-04-23 11:52:30', '2025-04-23 11:52:30', 'user'),
(5, 'akaneva', '$2y$10$u14/K8z/MhUuXxNZSrOVVu1M73FmHR6X.6gcoROsr0u8aUWEP6gFy', 1620, 5, '2025-04-23 12:32:52', '2025-04-23 12:32:52', 'user'),
(6, '123', '$2y$10$OF5v0IWuZwKOb1O3LM0LSOUPGhIQgbGngZ4xkVLPIC/BWnQfpcf1e', 0, 1, '2025-05-06 11:20:14', '2025-05-06 11:20:14', 'user'),
(7, 'admin', '$2y$10$brvjLrf/nObFqblQ5MFfXOklMuw/TZjdz57OYnNfIQAfL5H14ENCC', 0, 1, '2025-05-07 09:35:31', '2025-05-07 09:35:31', 'user'),
(8, 'lizza12345', '$2y$10$05qrssoCWPU9AiSHabXf6Omh9OCxGStBIQWOVDDGI1YHmgXQdCHI6', 100, 2, '2025-05-13 09:43:08', '2025-05-13 09:43:08', 'user'),
(9, 'Qwerty1234', '$2y$12$GX8vn4.gkGFA/H1XPCeLMu5BGcBHP.TWmmqEk2BsiiHkjEAfiM0nq', 200, 2, '2025-05-13 09:45:55', '2025-05-13 09:45:55', 'user');

-- --------------------------------------------------------

--
-- Структура таблицы `user_achievements`
--

CREATE TABLE `user_achievements` (
  `id` int NOT NULL,
  `user_id` int NOT NULL,
  `achievement_id` int NOT NULL,
  `earned_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

--
-- Дамп данных таблицы `user_achievements`
--

INSERT INTO `user_achievements` (`id`, `user_id`, `achievement_id`, `earned_at`) VALUES
(2, 2, 4, '2025-04-08 16:59:10'),
(3, 2, 6, '2025-04-08 16:59:29'),
(4, 2, 3, '2025-04-13 18:52:06'),
(5, 2, 5, '2025-04-13 18:52:06'),
(7, 3, 3, '2025-04-21 09:42:05'),
(8, 3, 4, '2025-04-21 09:42:05'),
(10, 3, 6, '2025-04-21 09:51:48'),
(12, 4, 3, '2025-04-23 11:53:12'),
(13, 4, 4, '2025-04-23 11:53:12'),
(14, 5, 3, '2025-04-23 12:33:31'),
(15, 5, 4, '2025-04-23 12:33:31'),
(16, 5, 6, '2025-04-23 12:35:12'),
(17, 5, 5, '2025-04-25 10:48:09'),
(18, 2, 7, '2025-05-05 10:49:39'),
(19, 2, 8, '2025-05-05 10:49:39'),
(20, 9, 3, '2025-05-13 09:46:26'),
(21, 9, 4, '2025-05-13 09:46:26'),
(22, 8, 3, '2025-05-13 10:58:18'),
(23, 8, 4, '2025-05-13 10:58:18');

-- --------------------------------------------------------

--
-- Структура таблицы `user_assignments`
--

CREATE TABLE `user_assignments` (
  `user_id` int NOT NULL,
  `assignment_id` int NOT NULL,
  `is_completed` tinyint(1) DEFAULT '0',
  `attempts` int DEFAULT '0',
  `best_score` int DEFAULT '0',
  `last_attempt` timestamp NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

--
-- Дамп данных таблицы `user_assignments`
--

INSERT INTO `user_assignments` (`user_id`, `assignment_id`, `is_completed`, `attempts`, `best_score`, `last_attempt`) VALUES
(2, 1, 1, 148, 50, '2025-05-07 09:58:17'),
(2, 2, 1, 177, 90, '2025-05-13 12:10:33'),
(2, 5, 1, 37, 80, '2025-05-06 08:23:40'),
(2, 6, 1, 23, 100, '2025-05-06 08:20:02'),
(2, 7, 1, 19, 60, '2025-05-06 08:23:54'),
(2, 8, 1, 75, 75, '2025-05-13 12:03:01'),
(2, 10, 1, 10, 30, '2025-05-06 08:24:04'),
(2, 11, 1, 9, 30, '2025-05-06 08:24:28'),
(2, 12, 1, 12, 80, '2025-05-06 08:43:25'),
(2, 15, 1, 41, 90, '2025-05-13 12:02:22'),
(2, 19, 1, 30, 65, '2025-05-12 10:48:58'),
(3, 1, 1, 1, 100, '2025-04-21 09:42:25'),
(3, 2, 1, 1, 100, '2025-04-21 10:10:59'),
(4, 1, 1, 1, 100, '2025-04-23 11:53:24'),
(5, 1, 1, 8, 50, '2025-04-29 13:46:57'),
(5, 2, 1, 11, 100, '2025-04-25 11:03:01'),
(5, 5, 1, 1, 100, '2025-04-23 12:39:16'),
(5, 8, 1, 3, 50, '2025-04-25 10:59:28'),
(5, 9, 1, 1, 100, '2025-04-23 12:37:15'),
(8, 1, 1, 1, 100, '2025-05-13 10:58:34'),
(9, 1, 1, 1, 100, '2025-05-13 09:46:50');

-- --------------------------------------------------------

--
-- Структура таблицы `user_attempts`
--

CREATE TABLE `user_attempts` (
  `id` int NOT NULL,
  `user_id` int NOT NULL,
  `assignment_id` int NOT NULL,
  `attempt_code` text,
  `is_success` tinyint(1) DEFAULT NULL,
  `score` int DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT CURRENT_TIMESTAMP,
  `code` text NOT NULL,
  `details` json DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

--
-- Дамп данных таблицы `user_attempts`
--

INSERT INTO `user_attempts` (`id`, `user_id`, `assignment_id`, `attempt_code`, `is_success`, `score`, `created_at`, `code`, `details`) VALUES
(3, 2, 1, 'SELECT secure_code FROM lessons WHERE id = 1;', 0, 0, '2025-04-11 20:19:35', 'SELECT secure_code FROM lessons WHERE id = 1;', '{\"errors\": [\"Отсутствует обязательный паттерн: prepare\\\\(\", \"Отсутствует обязательный паттерн: \\\\?\"], \"feedback\": \"\", \"warnings\": []}'),
(4, 2, 1, '<?php\n$stmt = $pdo->prepare(\"SELECT * FROM users WHERE username = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-11 20:20:24', '<?php\n$stmt = $pdo->prepare(\"SELECT * FROM users WHERE username = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(5, 2, 1, 'SELECT secure_code FROM lessons WHERE id = 1;', 0, 0, '2025-04-13 16:22:51', 'SELECT secure_code FROM lessons WHERE id = 1;', '{\"errors\": [\"Отсутствует обязательный паттерн: prepare\\\\(\", \"Отсутствует обязательный паттерн: \\\\?\"], \"feedback\": \"\", \"warnings\": []}'),
(6, 2, 1, 'admin\'\' OR \'\'1\'\'=\'\'1', 0, 0, '2025-04-13 18:31:40', 'admin\'\' OR \'\'1\'\'=\'\'1', '{\"errors\": [\"Отсутствует обязательный паттерн: prepare\\\\(\", \"Отсутствует обязательный паттерн: \\\\?\"], \"feedback\": \"\", \"warnings\": []}'),
(7, 2, 1, '<?php\\n$stmt = $pdo->prepare(\\\"SELECT * FROM users WHERE username = ?\\\");\\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-13 18:32:11', '<?php\\n$stmt = $pdo->prepare(\\\"SELECT * FROM users WHERE username = ?\\\");\\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(8, 2, 1, '\\n$stmt = $pdo->prepare(\\\"SELECT * FROM users WHERE username = ?\\\");\\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-13 18:34:20', '\\n$stmt = $pdo->prepare(\\\"SELECT * FROM users WHERE username = ?\\\");\\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(9, 2, 1, '\\n$stmt = $pdo->prepare(\\\"SELECT * FROM users WHERE username = ?\\\");\\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-13 18:34:40', '\\n$stmt = $pdo->prepare(\\\"SELECT * FROM users WHERE username = ?\\\");\\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(10, 2, 1, '\\n$stmt = $pdo->prepare(\\\"SELECT * FROM user WHERE username = ?\\\");$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-13 18:35:37', '\\n$stmt = $pdo->prepare(\\\"SELECT * FROM user WHERE username = ?\\\");$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(11, 2, 1, '\\n$stmt = $pdo->prepare(\"SELECT * FROM user WHERE username = ?\");$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-13 18:35:58', '\\n$stmt = $pdo->prepare(\"SELECT * FROM user WHERE username = ?\");$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(12, 2, 1, 'admin\'\' OR \'\'1\'\'=\'\'1', 0, 0, '2025-04-13 18:36:47', 'admin\'\' OR \'\'1\'\'=\'\'1', '{\"errors\": [\"Отсутствует обязательный паттерн: prepare\\\\(\", \"Отсутствует обязательный паттерн: \\\\?\"], \"feedback\": \"\", \"warnings\": []}'),
(13, 2, 1, '\\n$stmt = $pdo->prepare(\"SELECT * FROM people WHERE username = ?\");$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-13 18:37:33', '\\n$stmt = $pdo->prepare(\"SELECT * FROM people WHERE username = ?\");$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(14, 2, 1, '\\n$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-13 18:37:41', '\\n$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(15, 2, 1, '$1 = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$1->execute([$_GET[\'username\']]);', 1, 100, '2025-04-13 18:49:46', '$1 = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$1->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(16, 2, 1, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-13 18:51:09', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(17, 2, 1, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n', 1, 100, '2025-04-14 05:50:46', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(18, 2, 1, 'SELECT * FROM people WHERE login = ?\n', 0, 0, '2025-04-14 05:51:00', 'SELECT * FROM people WHERE login = ?\n', '{\"errors\": [\"Отсутствует обязательный паттерн: prepare\\\\(\"], \"feedback\": \"\", \"warnings\": []}'),
(19, 2, 1, 'stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']', 1, 100, '2025-04-14 09:59:03', 'stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(20, 2, 1, 'SELECT * FROM people WHERE login = ?', 0, 0, '2025-04-14 09:59:23', 'SELECT * FROM people WHERE login = ?', '{\"errors\": [\"Отсутствует обязательный паттерн: prepare\\\\(\"], \"feedback\": \"\", \"warnings\": []}'),
(21, 2, 1, 'Пример атаки: admin\'\' OR \'\'1\'\'=\'\'1\n\n', 0, 0, '2025-04-16 20:42:46', 'Пример атаки: admin\'\' OR \'\'1\'\'=\'\'1\n\n', '{\"errors\": [\"Отсутствует обязательный паттерн: prepare\\\\(\", \"Отсутствует обязательный паттерн: \\\\?\"], \"feedback\": \"\", \"warnings\": []}'),
(22, 2, 1, 'Пример атаки: admin\'\' OR \'\'1\'\'=\'\'1\n\n', 0, 0, '2025-04-16 20:42:57', 'Пример атаки: admin\'\' OR \'\'1\'\'=\'\'1\n\n', '{\"errors\": [\"Отсутствует обязательный паттерн: prepare\\\\(\", \"Отсутствует обязательный паттерн: \\\\?\"], \"feedback\": \"\", \"warnings\": []}'),
(23, 2, 1, 'Пример атаки: admin\'\' OR \'\'1\'\'=\'\'1\n\n', 0, 0, '2025-04-16 20:42:57', 'Пример атаки: admin\'\' OR \'\'1\'\'=\'\'1\n\n', '{\"errors\": [\"Отсутствует обязательный паттерн: prepare\\\\(\", \"Отсутствует обязательный паттерн: \\\\?\"], \"feedback\": \"\", \"warnings\": []}'),
(24, 2, 1, '$xyi = $pdo->prepare(\"SELECT * FROM 123 WHERE 123 = ?\");\n$xyi->execute([$_GET[\'123\']]);', 1, 100, '2025-04-16 20:46:58', '$xyi = $pdo->prepare(\"SELECT * FROM 123 WHERE 123 = ?\");\n$xyi->execute([$_GET[\'123\']]);', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(25, 2, 1, '', 0, 0, '2025-04-16 20:47:46', '', '{\"errors\": [\"Отсутствует обязательный паттерн: prepare\\\\(\", \"Отсутствует обязательный паттерн: \\\\?\"], \"feedback\": \"\", \"warnings\": []}'),
(26, 2, 1, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'admin\'\' OR \'\'1\'\'=\'\'1\']]);', 1, 100, '2025-04-16 20:50:04', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'admin\'\' OR \'\'1\'\'=\'\'1\']]);', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(27, 2, 1, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[admin\'\' OR \'\'1\'\'=\'\'1]]);', 1, 100, '2025-04-16 20:50:17', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[admin\'\' OR \'\'1\'\'=\'\'1]]);', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(28, 2, 1, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[admin\'\' OR \'\'1\'\'=\'\'1]]);', 1, 100, '2025-04-16 20:50:18', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[admin\'\' OR \'\'1\'\'=\'\'1]]);', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(29, 2, 1, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[admin\'\' OR \'\'1\'\'=\'\'1]]);', 1, 100, '2025-04-16 20:50:19', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[admin\'\' OR \'\'1\'\'=\'\'1]]);', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(30, 2, 1, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[admin\'\' OR \'\'1\'\'=\'\'1]]);', 1, 100, '2025-04-16 20:50:19', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[admin\'\' OR \'\'1\'\'=\'\'1]]);', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(31, 2, 1, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[admin\'\' OR \'\'1\'\'=\'\'1]]);', 1, 100, '2025-04-16 20:50:19', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[admin\'\' OR \'\'1\'\'=\'\'1]]);', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(32, 2, 1, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[admin\'\' OR \'\'1\'\'=\'\'1]]);', 1, 100, '2025-04-16 20:50:19', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[admin\'\' OR \'\'1\'\'=\'\'1]]);', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(33, 2, 1, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[admin\'\' OR \'\'1\'\'=\'\'1]]);', 1, 100, '2025-04-16 20:50:20', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[admin\'\' OR \'\'1\'\'=\'\'1]]);', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(34, 2, 1, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[admin\'\' OR \'\'1\'\'=\'\'1]]);', 1, 100, '2025-04-16 20:50:20', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[admin\'\' OR \'\'1\'\'=\'\'1]]);', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(35, 2, 1, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[admin\'\' OR \'\'1\'\'=\'\'1]]);', 1, 100, '2025-04-16 20:50:20', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[admin\'\' OR \'\'1\'\'=\'\'1]]);', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(36, 2, 1, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[admin\'\' OR \'\'1\'\'=\'\'1]]);', 1, 100, '2025-04-16 20:50:20', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[admin\'\' OR \'\'1\'\'=\'\'1]]);', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(37, 2, 1, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[admin\'\' OR \'\'1\'\'=\'\'1]]);', 1, 100, '2025-04-16 20:50:20', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[admin\'\' OR \'\'1\'\'=\'\'1]]);', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(38, 2, 1, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[admin\'\' OR \'\'1\'\'=\'\'1]]);', 1, 100, '2025-04-16 20:50:21', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[admin\'\' OR \'\'1\'\'=\'\'1]]);', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(39, 2, 1, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([GET[admin\'\' OR \'\'1\'\'=\'\'1]]);', 1, 100, '2025-04-16 20:50:46', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([GET[admin\'\' OR \'\'1\'\'=\'\'1]]);', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(40, 2, 1, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute(GET=admin\'\' OR \'\'1\'\'=\'\'1);', 1, 100, '2025-04-16 20:50:58', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute(GET=admin\'\' OR \'\'1\'\'=\'\'1);', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(41, 2, 1, '\n$stmt->execute(GET=admin\'\' OR \'\'1\'\'=\'\'1);', 0, 0, '2025-04-16 20:51:02', '\n$stmt->execute(GET=admin\'\' OR \'\'1\'\'=\'\'1);', '{\"errors\": [\"Отсутствует обязательный паттерн: prepare\\\\(\", \"Отсутствует обязательный паттерн: \\\\?\"], \"feedback\": \"\", \"warnings\": []}'),
(42, 2, 1, '1234', 0, 0, '2025-04-21 08:41:16', '1234', '{\"errors\": [\"Отсутствует обязательный паттерн: prepare\\\\(\", \"Отсутствует обязательный паттерн: \\\\?\"], \"feedback\": \"\", \"warnings\": []}'),
(43, 2, 1, '1234', 0, 0, '2025-04-21 08:41:17', '1234', '{\"errors\": [\"Отсутствует обязательный паттерн: prepare\\\\(\", \"Отсутствует обязательный паттерн: \\\\?\"], \"feedback\": \"\", \"warnings\": []}'),
(44, 2, 1, '1234', 0, 0, '2025-04-21 08:41:18', '1234', '{\"errors\": [\"Отсутствует обязательный паттерн: prepare\\\\(\", \"Отсутствует обязательный паттерн: \\\\?\"], \"feedback\": \"\", \"warnings\": []}'),
(45, 2, 1, '1234', 0, 0, '2025-04-21 08:41:20', '1234', '{\"errors\": [\"Отсутствует обязательный паттерн: prepare\\\\(\", \"Отсутствует обязательный паттерн: \\\\?\"], \"feedback\": \"\", \"warnings\": []}'),
(46, 2, 1, '1234', 0, 0, '2025-04-21 08:41:21', '1234', '{\"errors\": [\"Отсутствует обязательный паттерн: prepare\\\\(\", \"Отсутствует обязательный паттерн: \\\\?\"], \"feedback\": \"\", \"warnings\": []}'),
(47, 2, 1, '132', 0, 0, '2025-04-21 08:42:31', '132', '{\"errors\": [\"Отсутствует обязательный паттерн: prepare\\\\(\", \"Отсутствует обязательный паттерн: \\\\?\"], \"feedback\": \"\", \"warnings\": []}'),
(48, 2, 1, '132', 0, 0, '2025-04-21 08:42:32', '132', '{\"errors\": [\"Отсутствует обязательный паттерн: prepare\\\\(\", \"Отсутствует обязательный паттерн: \\\\?\"], \"feedback\": \"\", \"warnings\": []}'),
(49, 2, 1, '165', 0, 0, '2025-04-21 08:42:36', '165', '{\"errors\": [\"Отсутствует обязательный паттерн: prepare\\\\(\", \"Отсутствует обязательный паттерн: \\\\?\"], \"feedback\": \"\", \"warnings\": []}'),
(50, 2, 1, '123', 0, 0, '2025-04-21 08:42:50', '123', '{\"errors\": [\"Отсутствует обязательный паттерн: prepare\\\\(\", \"Отсутствует обязательный паттерн: \\\\?\"], \"feedback\": \"\", \"warnings\": []}'),
(51, 2, 1, '123', 0, 0, '2025-04-21 08:42:53', '123', '{\"errors\": [\"Отсутствует обязательный паттерн: prepare\\\\(\", \"Отсутствует обязательный паттерн: \\\\?\"], \"feedback\": \"\", \"warnings\": []}'),
(52, 2, 1, '123', 0, 0, '2025-04-21 08:42:54', '123', '{\"errors\": [\"Отсутствует обязательный паттерн: prepare\\\\(\", \"Отсутствует обязательный паттерн: \\\\?\"], \"feedback\": \"\", \"warnings\": []}'),
(53, 2, 1, '123', 0, 0, '2025-04-21 08:46:39', '123', '{\"errors\": [\"Отсутствует обязательный паттерн: prepare\\\\(\", \"Отсутствует обязательный паттерн: \\\\?\"], \"feedback\": \"\", \"warnings\": []}'),
(54, 2, 1, '123', 0, 0, '2025-04-21 08:46:40', '123', '{\"errors\": [\"Отсутствует обязательный паттерн: prepare\\\\(\", \"Отсутствует обязательный паттерн: \\\\?\"], \"feedback\": \"\", \"warnings\": []}'),
(55, 2, 1, '123', 0, 0, '2025-04-21 08:46:41', '123', '{\"errors\": [\"Отсутствует обязательный паттерн: prepare\\\\(\", \"Отсутствует обязательный паттерн: \\\\?\"], \"feedback\": \"\", \"warnings\": []}'),
(56, 2, 1, '123', 0, 0, '2025-04-21 08:47:15', '123', '{\"errors\": [\"Отсутствует обязательный паттерн: prepare\\\\(\", \"Отсутствует обязательный паттерн: \\\\?\"], \"feedback\": \"\", \"warnings\": []}'),
(57, 2, 1, '123', 0, 0, '2025-04-21 08:47:18', '123', '{\"errors\": [\"Отсутствует обязательный паттерн: prepare\\\\(\", \"Отсутствует обязательный паттерн: \\\\?\"], \"feedback\": \"\", \"warnings\": []}'),
(58, 2, 1, '123', 0, 0, '2025-04-21 08:47:19', '123', '{\"errors\": [\"Отсутствует обязательный паттерн: prepare\\\\(\", \"Отсутствует обязательный паттерн: \\\\?\"], \"feedback\": \"\", \"warnings\": []}'),
(59, 2, 1, '123', 0, 0, '2025-04-21 08:48:49', '123', '{\"errors\": [\"Отсутствует обязательный паттерн: prepare\\\\(\", \"Отсутствует обязательный паттерн: \\\\?\"], \"feedback\": \"\", \"warnings\": []}'),
(60, 2, 1, '123', 0, 0, '2025-04-21 08:48:51', '123', '{\"errors\": [\"Отсутствует обязательный паттерн: prepare\\\\(\", \"Отсутствует обязательный паттерн: \\\\?\"], \"feedback\": \"\", \"warnings\": []}'),
(61, 2, 1, '123', 0, 0, '2025-04-21 08:48:53', '123', '{\"errors\": [\"Отсутствует обязательный паттерн: prepare\\\\(\", \"Отсутствует обязательный паттерн: \\\\?\"], \"feedback\": \"\", \"warnings\": []}'),
(62, 2, 1, '123', 0, 0, '2025-04-21 08:49:53', '123', '{\"errors\": [\"Отсутствует обязательный паттерн: prepare\\\\(\", \"Отсутствует обязательный паттерн: \\\\?\"], \"feedback\": \"\", \"warnings\": []}'),
(63, 2, 1, '123', 0, 0, '2025-04-21 08:49:56', '123', '{\"errors\": [\"Отсутствует обязательный паттерн: prepare\\\\(\", \"Отсутствует обязательный паттерн: \\\\?\"], \"feedback\": \"\", \"warnings\": []}'),
(64, 2, 1, '123', 0, 0, '2025-04-21 08:49:56', '123', '{\"errors\": [\"Отсутствует обязательный паттерн: prepare\\\\(\", \"Отсутствует обязательный паттерн: \\\\?\"], \"feedback\": \"\", \"warnings\": []}'),
(65, 2, 1, '123', 0, 0, '2025-04-21 08:50:54', '123', '{\"errors\": [\"Отсутствует обязательный паттерн: prepare\\\\(\", \"Отсутствует обязательный паттерн: \\\\?\"], \"feedback\": \"\", \"warnings\": []}'),
(66, 2, 1, '123', 0, 0, '2025-04-21 08:50:54', '123', '{\"errors\": [\"Отсутствует обязательный паттерн: prepare\\\\(\", \"Отсутствует обязательный паттерн: \\\\?\"], \"feedback\": \"\", \"warnings\": []}'),
(67, 2, 1, '123', 0, 0, '2025-04-21 08:50:55', '123', '{\"errors\": [\"Отсутствует обязательный паттерн: prepare\\\\(\", \"Отсутствует обязательный паттерн: \\\\?\"], \"feedback\": \"\", \"warnings\": []}'),
(68, 2, 1, '    $stmt = $pdo->prepare(\"SELECT * FROM users WHERE username = ?\");\n    $stmt->execute([$_GET[\\\"username\\\"]]);', 1, 100, '2025-04-21 09:28:33', '    $stmt = $pdo->prepare(\"SELECT * FROM users WHERE username = ?\");\n    $stmt->execute([$_GET[\\\"username\\\"]]);', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(69, 2, 1, '    $stmt = $pdo->prepare(\"SELECT * FROM users WHERE username = ?\");\n    $stmt->execute([$_GET[\\\"username\\\"]]);', 1, 100, '2025-04-21 09:29:42', '    $stmt = $pdo->prepare(\"SELECT * FROM users WHERE username = ?\");\n    $stmt->execute([$_GET[\\\"username\\\"]]);', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(70, 2, 1, '    $stmt = $pdo->prepare(\"SELECT * FROM users WHERE username = ?\");\n    $stmt->execute([$_GET[\\\"username\\\"]]);', 1, 100, '2025-04-21 09:29:59', '    $stmt = $pdo->prepare(\"SELECT * FROM users WHERE username = ?\");\n    $stmt->execute([$_GET[\\\"username\\\"]]);', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(71, 2, 1, '     $stmt = $pdo->prepare(\"SELECT * FROM users WHERE username = ?\");\n    $stmt->execute([$_GET[\\\"username\\\"]]);', 1, 100, '2025-04-21 09:33:18', '     $stmt = $pdo->prepare(\"SELECT * FROM users WHERE username = ?\");\n    $stmt->execute([$_GET[\\\"username\\\"]]);', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(72, 3, 1, '    $stmt = $pdo->prepare(\"SELECT * FROM users WHERE username = ?\");\n    $stmt->execute([$_GET[\\\"username\\\"]]);', 1, 100, '2025-04-21 09:33:57', '    $stmt = $pdo->prepare(\"SELECT * FROM users WHERE username = ?\");\n    $stmt->execute([$_GET[\\\"username\\\"]]);', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(73, 3, 1, '   $stmt = $pdo->prepare(\"SELECT * FROM users WHERE username = ?\");\n    $stmt->execute([$_GET[\\\"username\\\"]]);', 1, 100, '2025-04-21 09:42:25', '   $stmt = $pdo->prepare(\"SELECT * FROM users WHERE username = ?\");\n    $stmt->execute([$_GET[\\\"username\\\"]]);', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(74, 3, 2, '$name = $_GET[\"name\"];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\");\n$stmt->execute([$name]);\n', 1, 100, '2025-04-21 10:10:59', '$name = $_GET[\"name\"];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\");\n$stmt->execute([$name]);\n', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(75, 2, 1, '', 0, 0, '2025-04-22 18:08:48', '', '{\"errors\": [\"Отсутствует обязательный паттерн: prepare\\\\(\", \"Отсутствует обязательный паттерн: \\\\?\"], \"feedback\": \"\", \"warnings\": []}'),
(76, 2, 1, '', 0, 0, '2025-04-22 18:08:50', '', '{\"errors\": [\"Отсутствует обязательный паттерн: prepare\\\\(\", \"Отсутствует обязательный паттерн: \\\\?\"], \"feedback\": \"\", \"warnings\": []}'),
(77, 2, 1, '', 0, 0, '2025-04-22 18:08:50', '', '{\"errors\": [\"Отсутствует обязательный паттерн: prepare\\\\(\", \"Отсутствует обязательный паттерн: \\\\?\"], \"feedback\": \"\", \"warnings\": []}'),
(78, 2, 5, '<script.*?>alert\\(([\"\'])?XSS\\1\\)<\\/script>', 1, 100, '2025-04-22 19:06:35', '<script.*?>alert\\(([\"\'])?XSS\\1\\)<\\/script>', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(79, 2, 5, '<script>alert(\"XSS\")</script>', 1, 100, '2025-04-22 19:31:11', '<script>alert(\"XSS\")</script>', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(80, 2, 6, '<script>alert(\"XSS\")</script>', 1, 100, '2025-04-22 19:34:53', '<script>alert(\"XSS\")</script>', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(81, 2, 7, '<script>alert(\"XSS\")</script>', 1, 100, '2025-04-22 19:35:14', '<script>alert(\"XSS\")</script>', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(82, 2, 5, '<script>alert()</script>', 1, 100, '2025-04-23 08:44:39', '<script>alert()</script>', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(83, 2, 5, '<script>alert()</script> ', 1, 100, '2025-04-23 08:46:02', '<script>alert()</script> ', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(84, 2, 5, '<script>alert(123)</script>', 1, 100, '2025-04-23 08:48:23', '<script>alert(123)</script>', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(85, 2, 1, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 0, 0, '2025-04-23 09:02:46', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [\"Обнаружена SQL-инъекция\"], \"feedback\": \"\", \"warnings\": []}'),
(86, 2, 1, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 0, 0, '2025-04-23 09:05:09', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [\"Обнаружена SQL-инъекция\"], \"feedback\": \"\", \"warnings\": []}'),
(87, 2, 1, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 0, 0, '2025-04-23 09:07:24', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [\"Обнаружена SQL-инъекция\"], \"feedback\": \"\", \"warnings\": []}'),
(88, 2, 1, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-23 09:09:41', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(89, 2, 2, '$name = $_GET[\'name\'];\n$sql = \"CALL getUserByName(\'$name\')\";\n$stmt = $pdo->query($sql);', 0, 0, '2025-04-23 09:10:36', '$name = $_GET[\'name\'];\n$sql = \"CALL getUserByName(\'$name\')\";\n$stmt = $pdo->query($sql);', '{\"errors\": [\"Отсутствует обязательный паттерн: prepare\", \"Отсутствует обязательный паттерн: \\\\?\"], \"feedback\": \"\", \"warnings\": []}'),
(90, 2, 2, '$name = $_GET[\'name\'];\n$sql = \"CALL getUserByName(\'$name\')\";\n$stmt = $pdo->query($sql);\n', 0, 0, '2025-04-23 09:14:38', '$name = $_GET[\'name\'];\n$sql = \"CALL getUserByName(\'$name\')\";\n$stmt = $pdo->query($sql);\n', '{\"errors\": [\"Отсутствует обязательный паттерн: prepare\", \"Отсутствует обязательный паттерн: \\\\?\"], \"feedback\": \"Добавьте в код обязательную конструкцию: `prepare`. Добавьте в код обязательную конструкцию: `\\\\?`.\", \"warnings\": []}'),
(91, 2, 2, '$name = $_GET[\'name\'];\n$sql = \"CALL getUserByName(\'$name\')\";\n$stmt = $pdo->query($sql);\n', 0, 50, '2025-04-23 09:16:36', '$name = $_GET[\'name\'];\n$sql = \"CALL getUserByName(\'$name\')\";\n$stmt = $pdo->query($sql);\n', '{\"errors\": [\"Отсутствует обязательный паттерн: prepare\", \"Отсутствует обязательный паттерн: \\\\?\"], \"feedback\": [\"Добавьте в код конструкцию: `prepare`.\", \"Добавьте в код конструкцию: `?`.\"], \"warnings\": []}'),
(92, 2, 5, ' <script>alert(123)</script>', 1, 100, '2025-04-23 09:17:53', ' <script>alert(123)</script>', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(93, 2, 2, '$name = $_GET[\'name\'];\n$sql = \"CALL getUserByName(\'$name\')\";\n$stmt = $pdo->query($sql);\n', 0, 50, '2025-04-23 09:19:35', '$name = $_GET[\'name\'];\n$sql = \"CALL getUserByName(\'$name\')\";\n$stmt = $pdo->query($sql);\n', '{\"errors\": [\"Отсутствует обязательный паттерн: prepare\", \"Отсутствует обязательный паттерн: \\\\?\"], \"feedback\": [\"Добавьте в код конструкцию: `prepare()` для предотвращения SQL-инъекций.\", \"Добавьте в код обязательный параметр: `?` для безопасной передачи данных.\"], \"warnings\": []}'),
(94, 2, 5, '<script>alert(123)</script>', 1, 100, '2025-04-23 09:20:06', '<script>alert(123)</script>', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(95, 2, 6, '<svg onload=alert(1)>', 1, 100, '2025-04-23 09:26:39', '<svg onload=alert(1)>', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(96, 2, 8, '<?php\n$column = $_GET[\'sort\'];\n\n// Проверяем, что $column содержит только буквы и цифры\nif (preg_match(\'/^[a-zA-Z0-9_]+$/\', $column)) {\n    $query = \"SELECT * FROM users ORDER BY $column\";\n    $result = mysqli_query($conn, $query);\n} else {\n    echo \"Недопустимое значение\";\n}\n?>\n', 1, 100, '2025-04-23 09:40:42', '<?php\n$column = $_GET[\'sort\'];\n\n// Проверяем, что $column содержит только буквы и цифры\nif (preg_match(\'/^[a-zA-Z0-9_]+$/\', $column)) {\n    $query = \"SELECT * FROM users ORDER BY $column\";\n    $result = mysqli_query($conn, $query);\n} else {\n    echo \"Недопустимое значение\";\n}\n?>\n', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(97, 2, 8, '<?php\n$column = $_GET[\'sort\'];\n\n// Проверяем, что $column содержит только буквы и цифры\nif (preg_match(\'/^[a-zA-Z0-9_]+$/\', $column)) {\n    $query = \"SELECT * FROM users ORDER BY $column\";\n    $result = mysqli_query($conn, $query);\n} else {\n    echo \"Недопустимое значение\";\n}\n?>\n', 1, 100, '2025-04-23 09:43:09', '<?php\n$column = $_GET[\'sort\'];\n\n// Проверяем, что $column содержит только буквы и цифры\nif (preg_match(\'/^[a-zA-Z0-9_]+$/\', $column)) {\n    $query = \"SELECT * FROM users ORDER BY $column\";\n    $result = mysqli_query($conn, $query);\n} else {\n    echo \"Недопустимое значение\";\n}\n?>\n', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(98, 2, 8, '<?php\n$column = $_GET[\'sort\'];\n\n// Проверяем, что $column содержит только буквы и цифры\nif (preg_match(\'/^[a-zA-Z0-9_]+$/\', $column)) {\n    $query = \"SELECT * FROM users ORDER BY $column\";\n    $result = mysqli_query($conn, $query);\n} else {\n    echo \"Недопустимое значение\";\n}\n?>\n', 1, 100, '2025-04-23 09:43:19', '<?php\n$column = $_GET[\'sort\'];\n\n// Проверяем, что $column содержит только буквы и цифры\nif (preg_match(\'/^[a-zA-Z0-9_]+$/\', $column)) {\n    $query = \"SELECT * FROM users ORDER BY $column\";\n    $result = mysqli_query($conn, $query);\n} else {\n    echo \"Недопустимое значение\";\n}\n?>\n', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(99, 2, 8, '<?php\n$column = $_GET[\'sort\'];\nif (preg_match(\'/^[a-zA-Z0-9_]+$/\', $column)) {\n    $query = \"SELECT * FROM users ORDER BY $column\";\n    $result = mysqli_query($conn, $query);\n} else {\n    echo \"Недопустимое значение\";\n}\n?>\n', 1, 100, '2025-04-23 09:44:37', '<?php\n$column = $_GET[\'sort\'];\nif (preg_match(\'/^[a-zA-Z0-9_]+$/\', $column)) {\n    $query = \"SELECT * FROM users ORDER BY $column\";\n    $result = mysqli_query($conn, $query);\n} else {\n    echo \"Недопустимое значение\";\n}\n?>\n', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(100, 2, 8, '<?php\n$column = $_GET[\'sort\'];\nif (preg_match(\'/^[a-zA-Z0-9_]+$/\', $column)) {\n    $query = \"SELECT * FROM users ORDER BY $column\";\n    $result = mysqli_query($conn, $query);\n} else {\n    echo \"Недопустимое значение\";\n}\n?>\n', 1, 100, '2025-04-23 09:44:39', '<?php\n$column = $_GET[\'sort\'];\nif (preg_match(\'/^[a-zA-Z0-9_]+$/\', $column)) {\n    $query = \"SELECT * FROM users ORDER BY $column\";\n    $result = mysqli_query($conn, $query);\n} else {\n    echo \"Недопустимое значение\";\n}\n?>\n', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(101, 2, 8, '<?php\n$column = $_GET[\'sort\'];\nif (preg_match(\'/^[a-zA-Z0-9_]+$/\', $column)) {\n    $query = \"SELECT * FROM users ORDER BY $column\";\n    $result = mysqli_query($conn, $query);\n} else {\n    echo \"Недопустимое значение\";\n}\n?>\n', 1, 100, '2025-04-23 09:44:39', '<?php\n$column = $_GET[\'sort\'];\nif (preg_match(\'/^[a-zA-Z0-9_]+$/\', $column)) {\n    $query = \"SELECT * FROM users ORDER BY $column\";\n    $result = mysqli_query($conn, $query);\n} else {\n    echo \"Недопустимое значение\";\n}\n?>\n', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(102, 2, 8, '<?php\n$column = $_GET[\'sort\'];\n$query = \"SELECT * FROM users ORDER BY $column\";\n$result = mysqli_query($conn, $query);\n?>\n', 1, 100, '2025-04-23 09:45:36', '<?php\n$column = $_GET[\'sort\'];\n$query = \"SELECT * FROM users ORDER BY $column\";\n$result = mysqli_query($conn, $query);\n?>\n', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(103, 2, 8, '<?php\n$column = $_GET[\'sort\'];\n$query = \"SELECT * FROM users ORDER BY $column\";\n$result = mysqli_query($conn, $query);\n?>\n', 1, 100, '2025-04-23 09:47:11', '<?php\n$column = $_GET[\'sort\'];\n$query = \"SELECT * FROM users ORDER BY $column\";\n$result = mysqli_query($conn, $query);\n?>\n', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(104, 2, 8, '<?php\n$column = $_GET[\'sort\'];\n$query = \"SELECT * FROM users ORDER BY $column\";\n$result = mysqli_query($conn, $query);\n?>', 1, 100, '2025-04-23 09:47:22', '<?php\n$column = $_GET[\'sort\'];\n$query = \"SELECT * FROM users ORDER BY $column\";\n$result = mysqli_query($conn, $query);\n?>', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(105, 2, 8, '<?php\n$column = $_GET[\'sort\'];\n$query = \"SELECT * FROM users ORDER BY $column\";\n$result = mysqli_query($conn, $query);\n?>', 0, 0, '2025-04-23 09:50:09', '<?php\n$column = $_GET[\'sort\'];\n$query = \"SELECT * FROM users ORDER BY $column\";\n$result = mysqli_query($conn, $query);\n?>', '{\"errors\": [\"Обнаружена прямая интерполяция переменной в SQL-запрос.\"], \"feedback\": [\"Не вставляйте переменные напрямую в строку запроса — используйте белый список.\"], \"warnings\": []}'),
(106, 2, 8, '<?php\n$column = $_GET[\'sort\'];\n$allowed_columns = [\'username\', \'email\', \'id\'];\n\nif (in_array($column, $allowed_columns)) {\n    $query = \"SELECT * FROM users ORDER BY $column\";\n    $result = mysqli_query($conn, $query);\n} else {\n    echo \"Недопустимое значение для сортировки.\";\n}\n?>\n', 0, 0, '2025-04-23 09:51:18', '<?php\n$column = $_GET[\'sort\'];\n$allowed_columns = [\'username\', \'email\', \'id\'];\n\nif (in_array($column, $allowed_columns)) {\n    $query = \"SELECT * FROM users ORDER BY $column\";\n    $result = mysqli_query($conn, $query);\n} else {\n    echo \"Недопустимое значение для сортировки.\";\n}\n?>\n', '{\"errors\": [\"Обнаружена прямая интерполяция переменной в SQL-запрос.\"], \"feedback\": [\"Не вставляйте переменные напрямую в строку запроса — используйте белый список.\"], \"warnings\": []}'),
(107, 2, 8, '<?php\n$column = $_GET[\'sort\'];\n\n// Белый список допустимых значений для ORDER BY\n$allowed_columns = [\'username\', \'email\', \'id\'];\n\nif (in_array($column, $allowed_columns)) {\n    // Используем подготовленное выражение\n    $stmt = $conn->prepare(\"SELECT * FROM users ORDER BY ?\");\n    $stmt->bind_param(\"s\", $column);\n    $stmt->execute();\n    $result = $stmt->get_result();\n} else {\n    echo \"Недопустимое значение для сортировки.\";\n}\n?>\n\n', 0, 0, '2025-04-23 09:51:41', '<?php\n$column = $_GET[\'sort\'];\n\n// Белый список допустимых значений для ORDER BY\n$allowed_columns = [\'username\', \'email\', \'id\'];\n\nif (in_array($column, $allowed_columns)) {\n    // Используем подготовленное выражение\n    $stmt = $conn->prepare(\"SELECT * FROM users ORDER BY ?\");\n    $stmt->bind_param(\"s\", $column);\n    $stmt->execute();\n    $result = $stmt->get_result();\n} else {\n    echo \"Недопустимое значение для сортировки.\";\n}\n?>\n\n', '{\"errors\": [\"Обнаружена прямая интерполяция переменной в SQL-запрос.\"], \"feedback\": [\"Не вставляйте переменные напрямую в строку запроса — используйте белый список.\"], \"warnings\": []}'),
(108, 2, 8, '<?php\n$column = $_GET[\'sort\'];\n\n// Белый список допустимых значений для ORDER BY\n$allowed_columns = [\'username\', \'email\', \'id\'];\n\nif (in_array($column, $allowed_columns)) {\n    // Используем подготовленное выражение\n    $stmt = $conn->prepare(\"SELECT * FROM users ORDER BY ?\");\n    $stmt->bind_param(\"s\", $column);\n    $stmt->execute();\n    $result = $stmt->get_result();\n} else {\n    echo \"Недопустимое значение для сортировки.\";\n}\n?>\n', 0, 0, '2025-04-23 09:53:34', '<?php\n$column = $_GET[\'sort\'];\n\n// Белый список допустимых значений для ORDER BY\n$allowed_columns = [\'username\', \'email\', \'id\'];\n\nif (in_array($column, $allowed_columns)) {\n    // Используем подготовленное выражение\n    $stmt = $conn->prepare(\"SELECT * FROM users ORDER BY ?\");\n    $stmt->bind_param(\"s\", $column);\n    $stmt->execute();\n    $result = $stmt->get_result();\n} else {\n    echo \"Недопустимое значение для сортировки.\";\n}\n?>\n', '{\"errors\": [\"Обнаружена прямая интерполяция переменной в SQL-запрос.\"], \"feedback\": [\"Не вставляйте переменные напрямую в строку запроса — используйте белый список.\"], \"warnings\": []}'),
(109, 2, 8, '<?php\n$column = $_GET[\'sort\'];\n\n// Белый список допустимых значений для ORDER BY\n$allowed_columns = [\'username\', \'email\', \'id\'];\n\nif (in_array($column, $allowed_columns)) {\n    // Используем подготовленное выражение\n    $stmt = $conn->prepare(\"SELECT * FROM users ORDER BY ?\");\n    $stmt->bind_param(\"s\", $column);\n    $stmt->execute();\n    $result = $stmt->get_result();\n} else {\n    echo \"Недопустимое значение для сортировки.\";\n}\n?>\n', 0, 0, '2025-04-23 09:54:24', '<?php\n$column = $_GET[\'sort\'];\n\n// Белый список допустимых значений для ORDER BY\n$allowed_columns = [\'username\', \'email\', \'id\'];\n\nif (in_array($column, $allowed_columns)) {\n    // Используем подготовленное выражение\n    $stmt = $conn->prepare(\"SELECT * FROM users ORDER BY ?\");\n    $stmt->bind_param(\"s\", $column);\n    $stmt->execute();\n    $result = $stmt->get_result();\n} else {\n    echo \"Недопустимое значение для сортировки.\";\n}\n?>\n', '{\"errors\": [\"Обнаружена прямая интерполяция переменной в SQL-запрос.\"], \"feedback\": [\"Не вставляйте переменные напрямую в строку запроса — используйте белый список.\"], \"warnings\": []}'),
(110, 2, 8, '<?php\n$column = $_GET[\'sort\'];\n\n// Белый список допустимых значений для ORDER BY\n$allowed_columns = [\'username\', \'email\', \'id\'];\n\nif (in_array($column, $allowed_columns)) {\n    // Используем подготовленное выражение\n    $stmt = $conn->prepare(\"SELECT * FROM users ORDER BY ?\");\n    $stmt->bind_param(\"s\", $column);\n    $stmt->execute();\n    $result = $stmt->get_result();\n} else {\n    echo \"Недопустимое значение для сортировки.\";\n}\n?>\n', 0, 0, '2025-04-23 09:54:25', '<?php\n$column = $_GET[\'sort\'];\n\n// Белый список допустимых значений для ORDER BY\n$allowed_columns = [\'username\', \'email\', \'id\'];\n\nif (in_array($column, $allowed_columns)) {\n    // Используем подготовленное выражение\n    $stmt = $conn->prepare(\"SELECT * FROM users ORDER BY ?\");\n    $stmt->bind_param(\"s\", $column);\n    $stmt->execute();\n    $result = $stmt->get_result();\n} else {\n    echo \"Недопустимое значение для сортировки.\";\n}\n?>\n', '{\"errors\": [\"Обнаружена прямая интерполяция переменной в SQL-запрос.\"], \"feedback\": [\"Не вставляйте переменные напрямую в строку запроса — используйте белый список.\"], \"warnings\": []}'),
(111, 2, 8, '<?php\n$column = $_GET[\'sort\'];\n\n// Белый список допустимых значений для ORDER BY\n$allowed_columns = [\'username\', \'email\', \'id\'];\n\nif (in_array($column, $allowed_columns)) {\n    // Используем подготовленное выражение\n    $stmt = $conn->prepare(\"SELECT * FROM users ORDER BY ?\");\n    $stmt->bind_param(\"s\", $column);\n    $stmt->execute();\n    $result = $stmt->get_result();\n} else {\n    echo \"Недопустимое значение для сортировки.\";\n}\n?>\n', 0, 0, '2025-04-23 09:54:25', '<?php\n$column = $_GET[\'sort\'];\n\n// Белый список допустимых значений для ORDER BY\n$allowed_columns = [\'username\', \'email\', \'id\'];\n\nif (in_array($column, $allowed_columns)) {\n    // Используем подготовленное выражение\n    $stmt = $conn->prepare(\"SELECT * FROM users ORDER BY ?\");\n    $stmt->bind_param(\"s\", $column);\n    $stmt->execute();\n    $result = $stmt->get_result();\n} else {\n    echo \"Недопустимое значение для сортировки.\";\n}\n?>\n', '{\"errors\": [\"Обнаружена прямая интерполяция переменной в SQL-запрос.\"], \"feedback\": [\"Не вставляйте переменные напрямую в строку запроса — используйте белый список.\"], \"warnings\": []}'),
(112, 2, 2, '$stmt = $pdo->prepare(\"CALL getUserByName(?)\");\n$stmt->execute([$_GET[\'name\']]);', 1, 100, '2025-04-23 09:57:29', '$stmt = $pdo->prepare(\"CALL getUserByName(?)\");\n$stmt->execute([$_GET[\'name\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(113, 2, 8, '  // Генерация безопасного решения для SQL\n  if (this.assignment.type === \'code\' || this.assignment.type === \'vulnerability_fix\') {\n    this.secureSolution = this.assignment.solution_code || \'Безопасное решение не найдено для этого задания.\';\n  }', 0, 50, '2025-04-23 09:58:21', '  // Генерация безопасного решения для SQL\n  if (this.assignment.type === \'code\' || this.assignment.type === \'vulnerability_fix\') {\n    this.secureSolution = this.assignment.solution_code || \'Безопасное решение не найдено для этого задания.\';\n  }', '{\"errors\": [\"Отсутствует обязательная часть запроса: `SELECT`\", \"Отсутствует обязательная часть запроса: `ORDER BY`\"], \"feedback\": [\"Убедитесь, что в запросе присутствует `SELECT`.\", \"Убедитесь, что в запросе присутствует `ORDER BY`.\"], \"warnings\": []}'),
(114, 2, 8, ' <?php\n$column = $_GET[\'sort\'];\n$query = \"SELECT * FROM users ORDER BY $column\";\n$result = mysqli_query($conn, $query);\n?>', 0, 0, '2025-04-23 09:59:20', ' <?php\n$column = $_GET[\'sort\'];\n$query = \"SELECT * FROM users ORDER BY $column\";\n$result = mysqli_query($conn, $query);\n?>', '{\"errors\": [\"Обнаружена прямая интерполяция переменной в SQL-запрос.\"], \"feedback\": [\"Не вставляйте переменные напрямую в строку запроса — используйте белый список.\"], \"warnings\": []}'),
(115, 2, 8, ' <?php\n$column = $_GET[\'sort\'];\n$query = \"SELECT * FROM users ORDER BY $column\";\n$result = mysqli_query($conn, $query);\n?>', 0, 0, '2025-04-23 09:59:21', ' <?php\n$column = $_GET[\'sort\'];\n$query = \"SELECT * FROM users ORDER BY $column\";\n$result = mysqli_query($conn, $query);\n?>', '{\"errors\": [\"Обнаружена прямая интерполяция переменной в SQL-запрос.\"], \"feedback\": [\"Не вставляйте переменные напрямую в строку запроса — используйте белый список.\"], \"warnings\": []}'),
(116, 2, 8, '<?php\n$column = $_GET[\'sort\'];\n$allowed_columns = [\'username\', \'email\', \'id\'];\n\nif (in_array($column, $allowed_columns)) {\n    // Используем подготовленное выражение\n    $stmt = $conn->prepare(\"SELECT * FROM users ORDER BY ?\");\n    $stmt->bind_param(\"s\", $column);\n    $stmt->execute();\n    $result = $stmt->get_result();\n} else {\n    echo \"Недопустимое значение для сортировки.\";\n}\n?>', 0, 0, '2025-04-23 09:59:31', '<?php\n$column = $_GET[\'sort\'];\n$allowed_columns = [\'username\', \'email\', \'id\'];\n\nif (in_array($column, $allowed_columns)) {\n    // Используем подготовленное выражение\n    $stmt = $conn->prepare(\"SELECT * FROM users ORDER BY ?\");\n    $stmt->bind_param(\"s\", $column);\n    $stmt->execute();\n    $result = $stmt->get_result();\n} else {\n    echo \"Недопустимое значение для сортировки.\";\n}\n?>', '{\"errors\": [\"Обнаружена прямая интерполяция переменной в SQL-запрос.\"], \"feedback\": [\"Не вставляйте переменные напрямую в строку запроса — используйте белый список.\"], \"warnings\": []}'),
(117, 2, 8, '<?php\n$column = $_GET[\'sort\'];\n$allowed_columns = [\'username\', \'email\', \'id\'];\n\nif (in_array($column, $allowed_columns)) {\n    // Используем подготовленное выражение\n    $stmt = $conn->prepare(\"SELECT * FROM users ORDER BY ?\");\n    $stmt->bind_param(\"s\", $column);\n    $stmt->execute();\n    $result = $stmt->get_result();\n} else {\n    echo \"Недопустимое значение для сортировки.\";\n}\n?>', 0, 0, '2025-04-23 09:59:33', '<?php\n$column = $_GET[\'sort\'];\n$allowed_columns = [\'username\', \'email\', \'id\'];\n\nif (in_array($column, $allowed_columns)) {\n    // Используем подготовленное выражение\n    $stmt = $conn->prepare(\"SELECT * FROM users ORDER BY ?\");\n    $stmt->bind_param(\"s\", $column);\n    $stmt->execute();\n    $result = $stmt->get_result();\n} else {\n    echo \"Недопустимое значение для сортировки.\";\n}\n?>', '{\"errors\": [\"Обнаружена прямая интерполяция переменной в SQL-запрос.\"], \"feedback\": [\"Не вставляйте переменные напрямую в строку запроса — используйте белый список.\"], \"warnings\": []}');
INSERT INTO `user_attempts` (`id`, `user_id`, `assignment_id`, `attempt_code`, `is_success`, `score`, `created_at`, `code`, `details`) VALUES
(118, 2, 8, '<?php\n\nclass SqlValidator implements ValidatorInterface {\n    public function validate(string $userCode, array $config): array {\n        $errors = [];\n        $feedback = [];\n\n        // 1) Если это задание типа vulnerability_fix по SQL, требуем белый список\n        $requiresWhitelist = \n            ($config[\'type\'] ?? \'\') === \'vulnerability_fix\' \n            || !empty($config[\'vulnerability_checks\'][\'whitelist\'])\n            || !empty($config[\'whitelist\']);\n\n        if ($requiresWhitelist) {\n            if (!preg_match(\'/\\bin_array\\s*\\(/\', $userCode)) {\n                $errors[]   = \'Отсутствует проверка по белому списку (in_array).\';\n                $feedback[] = \'Добавьте `in_array($variable, $allowlist)` перед использованием параметра.\';\n                $score = 0;\n            }\n        }\n\n        // 2) Запрещаем прямую интерполяцию переменных внутри SQL-строки\n        // Ищем строки вида \"...$var...\" внутри двойных кавычек\n        if (preg_match(\'/\"[^\"]*\\$[A-Za-z_]\\w*[^\"]*\"/\', $userCode)) {\n            $errors[]   = \'Обнаружена прямая интерполяция переменной в SQL-запрос.\';\n            $feedback[] = \'Не вставляйте переменные напрямую в строку запроса — используйте белый список.\';\n            $score = 0;\n        }\n\n        // 3) Если в config есть требование по mustContain (например, SELECT, ORDER BY), проверим\n        if (!empty($config[\'mustContain\']) && is_array($config[\'mustContain\'])) {\n            foreach ($config[\'mustContain\'] as $substr) {\n                if (stripos($userCode, $substr) === false) {\n                    $errors[]   = \"Отсутствует обязательная часть запроса: `$substr`\";\n                    $feedback[] = \"Убедитесь, что в запросе присутствует `$substr`.\";\n                    $score = min($score, 50);\n                }\n            }\n        }\n\n        // Проверка обязательных паттернов\n        foreach ($config[\'required_patterns\'] ?? [] as $pattern) {\n            if (!preg_match(\"/$pattern/\", $userCode)) {\n                $errors[] = \"Отсутствует обязательный паттерн: $pattern\";\n                $feedback[] = $this->generateFeedbackForRequiredPattern($pattern);\n            }\n        }\n\n        // Проверка запрещенных паттернов\n        foreach ($config[\'forbidden_patterns\'] ?? [] as $pattern) {\n            if (preg_match(\"/$pattern/\", $userCode)) {\n                $errors[] = \"Обнаружен запрещенный паттерн: $pattern\";\n                $feedback[] = \"Удалите или замените конструкцию: `\" . $this->humanizePattern($pattern) . \"`.\";\n            }\n        }\n\n        // Проверка на SQL-инъекции\n        if (in_array(\'SQLi\', $config[\'vulnerability_checks\'] ?? [])) {\n            if ($this->detectSqlInjection($userCode)) {\n                $errors[] = \"Обнаружена SQL-инъекция\";\n                $feedback[] = \"Используйте подготовленные выражения (prepared statements), чтобы избежать SQL-инъекций.\";\n            }\n        }\n\n        // Белый список ключевых слов\n        if (in_array(\'whitelist\', $config[\'vulnerability_checks\'] ?? [])) {\n            if (!$this->validateWhitelist($userCode)) {\n                $errors[] = \"Использование недопустимых идентификаторов или ключевых слов\";\n                $feedback[] = \"Избегайте использования нестандартных SQL-команд или неизвестных идентификаторов.\";\n            }\n        }\n\n        return [\n            \'is_valid\' => empty($errors),\n            \'errors\' => $errors,\n            \'feedback\' => $feedback,\n            \'score\' => empty($errors) ? 100 : (count($errors) < 3 ? 50 : 0)\n        ];\n    }\n\n    private function detectSqlInjection(string $code): bool {\n        // Дополнительная проверка на динамическую вставку данных в запрос\n        if (preg_match(\'/ORDER\\s+BY\\s+\\$/\', $code)) {\n            return true;  // SQL-инъекция через динамическое вставление переменной\n        }\n\n        // Опасные паттерны инъекций\n        $dangerousPatterns = [\n            \'/\\b(OR|AND)\\s+1\\s*=\\s*1\\b/\',\n            \'/;\\s*DROP\\s+TABLE/i\',\n            \'/UNION\\s+SELECT/i\',\n            \'/--\\s*$/\'\n        ];\n\n        foreach ($dangerousPatterns as $pattern) {\n            if (preg_match($pattern, $code)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private function validateWhitelist(string $code): bool {\n        // Белый список безопасных SQL-операторов\n        $whitelist = [\'SELECT\', \'FROM\', \'WHERE\', \'INNER JOIN\', \'AND\', \'OR\'];\n\n        // Извлекаем все слова из кода\n        preg_match_all(\'/\\b[A-Za-z_]+\\b/\', $code, $matches);\n        foreach ($matches[0] as $word) {\n            // Если слово не входит в белый список, возвращаем false\n            if (!in_array(strtoupper($word), $whitelist)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    private function generateFeedbackForRequiredPattern(string $pattern): string {\n        // Специальные обработки для обязательных паттернов\n        if ($pattern === \'prepare\') {\n            return \"Добавьте в код конструкцию: `prepare()` для предотвращения SQL-инъекций.\";\n        }\n\n        return \"Добавьте в код паттерн: `\" . $this->humanizePattern($pattern) . \"`.\";\n    }\n\n    private function humanizePattern(string $pattern): string {\n        // Очищаем паттерн от лишних символов\n        $pattern = str_replace(\'\\\\\', \'\', $pattern);\n        $pattern = preg_replace(\'/[^a-zA-Z0-9\\?\\(\\)\\\'\"\\.\\s]/\', \'\', $pattern);\n        return trim($pattern);\n    }\n}\n\n?>\n', 0, 50, '2025-04-23 10:02:35', '<?php\n\nclass SqlValidator implements ValidatorInterface {\n    public function validate(string $userCode, array $config): array {\n        $errors = [];\n        $feedback = [];\n\n        // 1) Если это задание типа vulnerability_fix по SQL, требуем белый список\n        $requiresWhitelist = \n            ($config[\'type\'] ?? \'\') === \'vulnerability_fix\' \n            || !empty($config[\'vulnerability_checks\'][\'whitelist\'])\n            || !empty($config[\'whitelist\']);\n\n        if ($requiresWhitelist) {\n            if (!preg_match(\'/\\bin_array\\s*\\(/\', $userCode)) {\n                $errors[]   = \'Отсутствует проверка по белому списку (in_array).\';\n                $feedback[] = \'Добавьте `in_array($variable, $allowlist)` перед использованием параметра.\';\n                $score = 0;\n            }\n        }\n\n        // 2) Запрещаем прямую интерполяцию переменных внутри SQL-строки\n        // Ищем строки вида \"...$var...\" внутри двойных кавычек\n        if (preg_match(\'/\"[^\"]*\\$[A-Za-z_]\\w*[^\"]*\"/\', $userCode)) {\n            $errors[]   = \'Обнаружена прямая интерполяция переменной в SQL-запрос.\';\n            $feedback[] = \'Не вставляйте переменные напрямую в строку запроса — используйте белый список.\';\n            $score = 0;\n        }\n\n        // 3) Если в config есть требование по mustContain (например, SELECT, ORDER BY), проверим\n        if (!empty($config[\'mustContain\']) && is_array($config[\'mustContain\'])) {\n            foreach ($config[\'mustContain\'] as $substr) {\n                if (stripos($userCode, $substr) === false) {\n                    $errors[]   = \"Отсутствует обязательная часть запроса: `$substr`\";\n                    $feedback[] = \"Убедитесь, что в запросе присутствует `$substr`.\";\n                    $score = min($score, 50);\n                }\n            }\n        }\n\n        // Проверка обязательных паттернов\n        foreach ($config[\'required_patterns\'] ?? [] as $pattern) {\n            if (!preg_match(\"/$pattern/\", $userCode)) {\n                $errors[] = \"Отсутствует обязательный паттерн: $pattern\";\n                $feedback[] = $this->generateFeedbackForRequiredPattern($pattern);\n            }\n        }\n\n        // Проверка запрещенных паттернов\n        foreach ($config[\'forbidden_patterns\'] ?? [] as $pattern) {\n            if (preg_match(\"/$pattern/\", $userCode)) {\n                $errors[] = \"Обнаружен запрещенный паттерн: $pattern\";\n                $feedback[] = \"Удалите или замените конструкцию: `\" . $this->humanizePattern($pattern) . \"`.\";\n            }\n        }\n\n        // Проверка на SQL-инъекции\n        if (in_array(\'SQLi\', $config[\'vulnerability_checks\'] ?? [])) {\n            if ($this->detectSqlInjection($userCode)) {\n                $errors[] = \"Обнаружена SQL-инъекция\";\n                $feedback[] = \"Используйте подготовленные выражения (prepared statements), чтобы избежать SQL-инъекций.\";\n            }\n        }\n\n        // Белый список ключевых слов\n        if (in_array(\'whitelist\', $config[\'vulnerability_checks\'] ?? [])) {\n            if (!$this->validateWhitelist($userCode)) {\n                $errors[] = \"Использование недопустимых идентификаторов или ключевых слов\";\n                $feedback[] = \"Избегайте использования нестандартных SQL-команд или неизвестных идентификаторов.\";\n            }\n        }\n\n        return [\n            \'is_valid\' => empty($errors),\n            \'errors\' => $errors,\n            \'feedback\' => $feedback,\n            \'score\' => empty($errors) ? 100 : (count($errors) < 3 ? 50 : 0)\n        ];\n    }\n\n    private function detectSqlInjection(string $code): bool {\n        // Дополнительная проверка на динамическую вставку данных в запрос\n        if (preg_match(\'/ORDER\\s+BY\\s+\\$/\', $code)) {\n            return true;  // SQL-инъекция через динамическое вставление переменной\n        }\n\n        // Опасные паттерны инъекций\n        $dangerousPatterns = [\n            \'/\\b(OR|AND)\\s+1\\s*=\\s*1\\b/\',\n            \'/;\\s*DROP\\s+TABLE/i\',\n            \'/UNION\\s+SELECT/i\',\n            \'/--\\s*$/\'\n        ];\n\n        foreach ($dangerousPatterns as $pattern) {\n            if (preg_match($pattern, $code)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private function validateWhitelist(string $code): bool {\n        // Белый список безопасных SQL-операторов\n        $whitelist = [\'SELECT\', \'FROM\', \'WHERE\', \'INNER JOIN\', \'AND\', \'OR\'];\n\n        // Извлекаем все слова из кода\n        preg_match_all(\'/\\b[A-Za-z_]+\\b/\', $code, $matches);\n        foreach ($matches[0] as $word) {\n            // Если слово не входит в белый список, возвращаем false\n            if (!in_array(strtoupper($word), $whitelist)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    private function generateFeedbackForRequiredPattern(string $pattern): string {\n        // Специальные обработки для обязательных паттернов\n        if ($pattern === \'prepare\') {\n            return \"Добавьте в код конструкцию: `prepare()` для предотвращения SQL-инъекций.\";\n        }\n\n        return \"Добавьте в код паттерн: `\" . $this->humanizePattern($pattern) . \"`.\";\n    }\n\n    private function humanizePattern(string $pattern): string {\n        // Очищаем паттерн от лишних символов\n        $pattern = str_replace(\'\\\\\', \'\', $pattern);\n        $pattern = preg_replace(\'/[^a-zA-Z0-9\\?\\(\\)\\\'\"\\.\\s]/\', \'\', $pattern);\n        return trim($pattern);\n    }\n}\n\n?>\n', '{\"errors\": [\"Обнаружена прямая интерполяция переменной в SQL-запрос.\"], \"feedback\": [\"Не вставляйте переменные напрямую в строку запроса — используйте белый список.\"], \"warnings\": []}'),
(119, 2, 8, '<?php\n$column = $_GET[\'sort\'];\n$allowed_columns = [\'username\', \'email\', \'id\'];\n\n// Проверка через in_array\nif (in_array($column, $allowed_columns)) {\n    // Используем подготовленное выражение\n    $stmt = $conn->prepare(\"SELECT * FROM users ORDER BY $column\");\n    $stmt->execute();\n    $result = $stmt->get_result();\n} else {\n    echo \"Недопустимое значение для сортировки.\";\n}\n?>\n', 0, 50, '2025-04-23 10:03:21', '<?php\n$column = $_GET[\'sort\'];\n$allowed_columns = [\'username\', \'email\', \'id\'];\n\n// Проверка через in_array\nif (in_array($column, $allowed_columns)) {\n    // Используем подготовленное выражение\n    $stmt = $conn->prepare(\"SELECT * FROM users ORDER BY $column\");\n    $stmt->execute();\n    $result = $stmt->get_result();\n} else {\n    echo \"Недопустимое значение для сортировки.\";\n}\n?>\n', '{\"errors\": [\"Обнаружена прямая интерполяция переменной в SQL-запрос.\"], \"feedback\": [\"Не вставляйте переменные напрямую в строку запроса — используйте белый список.\"], \"warnings\": []}'),
(120, 2, 8, '<?php\n$column = $_GET[\'sort\'];\n$allowed_columns = [\'username\', \'email\', \'id\'];\n\n// Проверка через in_array\nif (in_array($column, $allowed_columns)) {\n    // Используем подготовленное выражение\n    $stmt = $conn->prepare(\"SELECT * FROM users ORDER BY $column\");\n    $stmt->execute();\n    $result = $stmt->get_result();\n} else {\n    echo \"Недопустимое значение для сортировки.\";\n}\n?>\n', 0, 50, '2025-04-23 10:03:34', '<?php\n$column = $_GET[\'sort\'];\n$allowed_columns = [\'username\', \'email\', \'id\'];\n\n// Проверка через in_array\nif (in_array($column, $allowed_columns)) {\n    // Используем подготовленное выражение\n    $stmt = $conn->prepare(\"SELECT * FROM users ORDER BY $column\");\n    $stmt->execute();\n    $result = $stmt->get_result();\n} else {\n    echo \"Недопустимое значение для сортировки.\";\n}\n?>\n', '{\"errors\": [\"Обнаружена прямая интерполяция переменной в SQL-запрос.\"], \"feedback\": [\"Не вставляйте переменные напрямую в строку запроса — используйте белый список.\"], \"warnings\": []}'),
(121, 2, 8, '$column = $_GET[\'sort\'];\n$allowed_columns = [\'username\', \'email\', \'id\'];\n\n// Проверка через in_array\nif (in_array($column, $allowed_columns)) {\n    // Безопасный способ построения запроса\n    $query = \"SELECT * FROM users ORDER BY $column\";\n    \n    // Выполнение запроса\n    $stmt = $conn->prepare($query); // Используем подготовленное выражение\n    $stmt->execute();\n    $result = $stmt->get_result();\n} else {\n    echo \"Недопустимое значение для сортировки.\";\n}\n', 0, 50, '2025-04-23 10:04:14', '$column = $_GET[\'sort\'];\n$allowed_columns = [\'username\', \'email\', \'id\'];\n\n// Проверка через in_array\nif (in_array($column, $allowed_columns)) {\n    // Безопасный способ построения запроса\n    $query = \"SELECT * FROM users ORDER BY $column\";\n    \n    // Выполнение запроса\n    $stmt = $conn->prepare($query); // Используем подготовленное выражение\n    $stmt->execute();\n    $result = $stmt->get_result();\n} else {\n    echo \"Недопустимое значение для сортировки.\";\n}\n', '{\"errors\": [\"Обнаружена прямая интерполяция переменной в SQL-запрос.\"], \"feedback\": [\"Не вставляйте переменные напрямую в строку запроса — используйте белый список.\"], \"warnings\": []}'),
(122, 2, 8, '$column = $_GET[\'sort\'];\n$allowed_columns = [\'username\', \'email\', \'id\'];\n\n// Проверка через in_array\nif (in_array($column, $allowed_columns)) {\n    // Построение запроса с использованием белого списка для столбца\n    $query = \"SELECT * FROM users ORDER BY \" . $column; // Строка строится безопасно, так как $column проверено\n    $stmt = $conn->prepare($query); // Здесь не используется параметризация для имени столбца\n    $stmt->execute();\n    $result = $stmt->get_result();\n} else {\n    echo \"Недопустимое значение для сортировки.\";\n}\n', 0, 50, '2025-04-23 10:05:23', '$column = $_GET[\'sort\'];\n$allowed_columns = [\'username\', \'email\', \'id\'];\n\n// Проверка через in_array\nif (in_array($column, $allowed_columns)) {\n    // Построение запроса с использованием белого списка для столбца\n    $query = \"SELECT * FROM users ORDER BY \" . $column; // Строка строится безопасно, так как $column проверено\n    $stmt = $conn->prepare($query); // Здесь не используется параметризация для имени столбца\n    $stmt->execute();\n    $result = $stmt->get_result();\n} else {\n    echo \"Недопустимое значение для сортировки.\";\n}\n', '{\"errors\": [\"Обнаружена прямая интерполяция переменной в SQL-запрос.\"], \"feedback\": [\"Не вставляйте переменные напрямую в строку запроса — используйте белый список.\"], \"warnings\": []}'),
(123, 2, 8, '$column = $_GET[\'sort\'];\n$allowed_columns = [\'username\', \'email\', \'id\'];\n\n// Проверка через in_array\nif (in_array($column, $allowed_columns)) {\n    // Построение запроса с использованием белого списка для столбца\n    $query = \"SELECT * FROM users ORDER BY \" . $column; // Строка строится безопасно, так как $column проверено\n    $stmt = $conn->prepare($query); // Здесь не используется параметризация для имени столбца\n    $stmt->execute();\n    $result = $stmt->get_result();\n} else {\n    echo \"Недопустимое значение для сортировки.\";\n}\n', 0, 50, '2025-04-23 10:05:24', '$column = $_GET[\'sort\'];\n$allowed_columns = [\'username\', \'email\', \'id\'];\n\n// Проверка через in_array\nif (in_array($column, $allowed_columns)) {\n    // Построение запроса с использованием белого списка для столбца\n    $query = \"SELECT * FROM users ORDER BY \" . $column; // Строка строится безопасно, так как $column проверено\n    $stmt = $conn->prepare($query); // Здесь не используется параметризация для имени столбца\n    $stmt->execute();\n    $result = $stmt->get_result();\n} else {\n    echo \"Недопустимое значение для сортировки.\";\n}\n', '{\"errors\": [\"Обнаружена прямая интерполяция переменной в SQL-запрос.\"], \"feedback\": [\"Не вставляйте переменные напрямую в строку запроса — используйте белый список.\"], \"warnings\": []}'),
(124, 2, 8, '$column = $_GET[\'sort\'];\n$allowed_columns = [\'username\', \'email\', \'id\'];\n\n// Проверка через in_array\nif (in_array($column, $allowed_columns)) {\n    // Построение запроса с использованием белого списка для столбца\n    $query = \"SELECT * FROM users ORDER BY \" . $column; // Строка строится безопасно, так как $column проверено\n    $stmt = $conn->prepare($query); // Здесь не используется параметризация для имени столбца\n    $stmt->execute();\n    $result = $stmt->get_result();\n} else {\n    echo \"Недопустимое значение для сортировки.\";\n}\n', 1, 100, '2025-04-23 10:06:41', '$column = $_GET[\'sort\'];\n$allowed_columns = [\'username\', \'email\', \'id\'];\n\n// Проверка через in_array\nif (in_array($column, $allowed_columns)) {\n    // Построение запроса с использованием белого списка для столбца\n    $query = \"SELECT * FROM users ORDER BY \" . $column; // Строка строится безопасно, так как $column проверено\n    $stmt = $conn->prepare($query); // Здесь не используется параметризация для имени столбца\n    $stmt->execute();\n    $result = $stmt->get_result();\n} else {\n    echo \"Недопустимое значение для сортировки.\";\n}\n', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(125, 2, 8, '<?php\n$column = $_GET[\'sort\'];\n$query = \"SELECT * FROM users ORDER BY $column\";\n$result = mysqli_query($conn, $query);\n?> ', 1, 100, '2025-04-23 10:06:58', '<?php\n$column = $_GET[\'sort\'];\n$query = \"SELECT * FROM users ORDER BY $column\";\n$result = mysqli_query($conn, $query);\n?> ', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(126, 2, 8, '<?php\n$column = $_GET[\'sort\'];\n$query = \"SELECT * FROM users ORDER BY $column\";\n$result = mysqli_query($conn, $query);\n?> ', 1, 100, '2025-04-23 10:06:59', '<?php\n$column = $_GET[\'sort\'];\n$query = \"SELECT * FROM users ORDER BY $column\";\n$result = mysqli_query($conn, $query);\n?> ', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(127, 2, 8, '<?php\n$column = $_GET[\'sort\'];\n$query = \"SELECT * FROM users ORDER BY $column\";\n$result = mysqli_query($conn, $query);\n?> ', 1, 100, '2025-04-23 10:06:59', '<?php\n$column = $_GET[\'sort\'];\n$query = \"SELECT * FROM users ORDER BY $column\";\n$result = mysqli_query($conn, $query);\n?> ', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(128, 2, 8, '<?php\n$column = $_GET[\'sort\'];\n$query = \"SELECT * FROM users ORDER BY $column\";\n$result = mysqli_query($conn, $query);\n?> ', 1, 100, '2025-04-23 10:07:08', '<?php\n$column = $_GET[\'sort\'];\n$query = \"SELECT * FROM users ORDER BY $column\";\n$result = mysqli_query($conn, $query);\n?> ', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(129, 2, 8, '<?php\n$column = $_GET[\'sort\'];\n$query = \"SELECT * FROM users ORDER BY $column\";\n$result = mysqli_query($conn, $query);\n?> ', 0, 50, '2025-04-23 11:04:01', '<?php\n$column = $_GET[\'sort\'];\n$query = \"SELECT * FROM users ORDER BY $column\";\n$result = mysqli_query($conn, $query);\n?> ', '{\"errors\": [\"Используется прямое вставление переменной в SQL-запрос (ORDER BY $column).\"], \"feedback\": [\"Используйте белый список для проверки имени столбца, чтобы избежать SQL-инъекций.\"], \"warnings\": []}'),
(130, 2, 8, '$column = $_GET[\'sort\'];\n$allowed_columns = [\'username\', \'email\', \'id\'];\n\n// Проверка через in_array\nif (in_array($column, $allowed_columns)) {\n    // Построение запроса с использованием белого списка для столбца\n    $query = \"SELECT * FROM users ORDER BY \" . $column; // Строка строится безопасно, так как $column проверено\n    $stmt = $conn->prepare($query); // Здесь не используется параметризация для имени столбца\n    $stmt->execute();\n    $result = $stmt->get_result();\n} else {\n    echo \"Недопустимое значение для сортировки.\";\n}', 1, 100, '2025-04-23 11:04:16', '$column = $_GET[\'sort\'];\n$allowed_columns = [\'username\', \'email\', \'id\'];\n\n// Проверка через in_array\nif (in_array($column, $allowed_columns)) {\n    // Построение запроса с использованием белого списка для столбца\n    $query = \"SELECT * FROM users ORDER BY \" . $column; // Строка строится безопасно, так как $column проверено\n    $stmt = $conn->prepare($query); // Здесь не используется параметризация для имени столбца\n    $stmt->execute();\n    $result = $stmt->get_result();\n} else {\n    echo \"Недопустимое значение для сортировки.\";\n}', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(131, 4, 1, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-23 11:53:24', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(132, 5, 1, 'dfghjklkjgvfc', 0, 50, '2025-04-23 12:33:51', 'dfghjklkjgvfc', '{\"errors\": [\"Отсутствует обязательный паттерн: prepare\\\\(\", \"Отсутствует обязательный паттерн: \\\\?\"], \"feedback\": [\"Добавьте в код паттерн: `prepare(`.\", \"Добавьте в код паттерн: `?`.\"], \"warnings\": []}'),
(133, 5, 1, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-23 12:34:33', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(134, 5, 8, '$column = $_GET[\'sort\'];\n$allowed_columns = [\'username\', \'email\', \'id\'];\n\n// Проверка через in_array\nif (in_array($column, $allowed_columns)) {\n    // Построение запроса с использованием белого списка для столбца\n    $query = \"SELECT * FROM users ORDER BY \" . $column; // Строка строится безопасно, так как $column проверено\n    $stmt = $conn->prepare($query); // Здесь не используется параметризация для имени столбца\n    $stmt->execute();\n    $result = $stmt->get_result();\n} else {\n    echo \"Недопустимое значение для сортировки.\";\n}', 1, 100, '2025-04-23 12:36:41', '$column = $_GET[\'sort\'];\n$allowed_columns = [\'username\', \'email\', \'id\'];\n\n// Проверка через in_array\nif (in_array($column, $allowed_columns)) {\n    // Построение запроса с использованием белого списка для столбца\n    $query = \"SELECT * FROM users ORDER BY \" . $column; // Строка строится безопасно, так как $column проверено\n    $stmt = $conn->prepare($query); // Здесь не используется параметризация для имени столбца\n    $stmt->execute();\n    $result = $stmt->get_result();\n} else {\n    echo \"Недопустимое значение для сортировки.\";\n}', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(135, 5, 9, 'dfghj', 1, 100, '2025-04-23 12:37:15', 'dfghj', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(136, 5, 5, '<script>alert()</script>', 1, 100, '2025-04-23 12:39:16', '<script>alert()</script>', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(137, 2, 1, '\npg_query($linc,\'SELECT * FROM users WHERE username = $1\',[input]);', 0, 50, '2025-04-23 12:58:20', '\npg_query($linc,\'SELECT * FROM users WHERE username = $1\',[input]);', '{\"errors\": [\"Отсутствует обязательный паттерн: prepare\\\\(\", \"Отсутствует обязательный паттерн: \\\\?\"], \"feedback\": [\"Добавьте в код паттерн: `prepare(`.\", \"Добавьте в код паттерн: `?`.\"], \"warnings\": []}'),
(138, 2, 1, '\npg_query($linc,\"SELECT * FROM users WHERE username = \'\".preg_replace(\'/[^a-z]+/\',\'\',$input).\"\'\");', 0, 50, '2025-04-23 13:01:30', '\npg_query($linc,\"SELECT * FROM users WHERE username = \'\".preg_replace(\'/[^a-z]+/\',\'\',$input).\"\'\");', '{\"errors\": [\"Отсутствует обязательный паттерн: prepare\\\\(\", \"Отсутствует обязательный паттерн: \\\\?\"], \"feedback\": [\"Добавьте в код паттерн: `prepare(`.\", \"Добавьте в код паттерн: `?`.\"], \"warnings\": []}'),
(139, 2, 1, 'pg_prepare(\'\',[])', 0, 50, '2025-04-23 13:03:26', 'pg_prepare(\'\',[])', '{\"errors\": [\"Отсутствует обязательный паттерн: \\\\?\"], \"feedback\": [\"Добавьте в код паттерн: `?`.\"], \"warnings\": []}'),
(140, 2, 1, '<?\npg_prepare(\'\',[]);\n/?>', 1, 100, '2025-04-23 13:04:02', '<?\npg_prepare(\'\',[]);\n/?>', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(141, 2, 1, '<?\npgjhgd_prepare(\'\',[]);\n/?>', 1, 100, '2025-04-23 13:04:33', '<?\npgjhgd_prepare(\'\',[]);\n/?>', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(142, 2, 1, '<?\npgjhgd_prepare(\'\',[]);\n/?>', 1, 100, '2025-04-23 13:04:38', '<?\npgjhgd_prepare(\'\',[]);\n/?>', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(143, 2, 1, '<?\npgjhgd_prepare(\'\',[]);\n/?>', 1, 100, '2025-04-23 13:04:38', '<?\npgjhgd_prepare(\'\',[]);\n/?>', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(144, 2, 1, '<?\npgjhgd_prepare(\'\',[]);\n/?>', 1, 100, '2025-04-23 13:04:38', '<?\npgjhgd_prepare(\'\',[]);\n/?>', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(145, 2, 1, '<?\npgjhgd_prepare(\'\',[]);\n/?>', 1, 100, '2025-04-23 13:04:38', '<?\npgjhgd_prepare(\'\',[]);\n/?>', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(146, 2, 1, '<?\npgjhgd_prepare(\'\',[]);\n/?>', 1, 100, '2025-04-23 13:04:39', '<?\npgjhgd_prepare(\'\',[]);\n/?>', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(147, 2, 1, '<?\npgjhgd_prepare(\'\',[]);\n/?>', 1, 100, '2025-04-23 13:04:39', '<?\npgjhgd_prepare(\'\',[]);\n/?>', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(148, 2, 1, '<?\npgjhgd_prepare(\'\',[]);\n/?>', 1, 100, '2025-04-23 13:04:39', '<?\npgjhgd_prepare(\'\',[]);\n/?>', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(149, 2, 1, '<?\npgjhgd_prepare(\'\',[]);\n/?>', 1, 100, '2025-04-23 13:04:39', '<?\npgjhgd_prepare(\'\',[]);\n/?>', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(150, 2, 1, '<?\npgjhgd_prepare(\'\',[]);\n/?>', 1, 100, '2025-04-23 13:04:39', '<?\npgjhgd_prepare(\'\',[]);\n/?>', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(151, 2, 1, '<?\npgjhgd_prepare(\'\',[]);\n/?>', 1, 100, '2025-04-23 13:04:39', '<?\npgjhgd_prepare(\'\',[]);\n/?>', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(152, 2, 1, '<?\npgjhgd_prepare(\'\',[]);\n/?>', 1, 100, '2025-04-23 13:04:40', '<?\npgjhgd_prepare(\'\',[]);\n/?>', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(153, 2, 1, '<?\npgjhgd_prepare(\'\',[]);\n/?>', 1, 100, '2025-04-23 13:04:40', '<?\npgjhgd_prepare(\'\',[]);\n/?>', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(154, 2, 1, '<?\npgjhgd_prepare(\'\',[]);\n/?>', 1, 100, '2025-04-23 13:04:40', '<?\npgjhgd_prepare(\'\',[]);\n/?>', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(155, 2, 1, '<?\npgjhgd_prepare(\'\',[]);\n/?>', 1, 100, '2025-04-23 13:04:40', '<?\npgjhgd_prepare(\'\',[]);\n/?>', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(156, 2, 1, '<?\npgjhgd_prepare(\'\',[]);\n/?>', 1, 100, '2025-04-23 13:04:40', '<?\npgjhgd_prepare(\'\',[]);\n/?>', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(157, 2, 1, '<?\npgjhgd_prepare(\'\',[]);\n/?>', 1, 100, '2025-04-23 13:04:40', '<?\npgjhgd_prepare(\'\',[]);\n/?>', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(158, 2, 1, '<?\npgjhgd_prepare(\'\',[]);\n/?>', 1, 100, '2025-04-23 13:04:41', '<?\npgjhgd_prepare(\'\',[]);\n/?>', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(159, 2, 1, '<?\npgjhgd_prepare(\'\',[]);\n/?>', 1, 100, '2025-04-23 13:04:41', '<?\npgjhgd_prepare(\'\',[]);\n/?>', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(160, 2, 1, '<?\npgjhgd_prepare(\'\',[]);\n/?>', 1, 100, '2025-04-23 13:04:41', '<?\npgjhgd_prepare(\'\',[]);\n/?>', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(161, 2, 1, '<?\npgjhgd_prepare(\'\',[]);\n/?>', 1, 100, '2025-04-23 13:04:41', '<?\npgjhgd_prepare(\'\',[]);\n/?>', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(162, 2, 1, '<?\npgjhgd_prepare(\'\',[]);\n/?>', 1, 100, '2025-04-23 13:04:41', '<?\npgjhgd_prepare(\'\',[]);\n/?>', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(163, 2, 1, '<?\necho \"SELECT * FROM users WHERE username = \'prepare\'\";\n/?>', 0, 50, '2025-04-23 13:05:24', '<?\necho \"SELECT * FROM users WHERE username = \'prepare\'\";\n/?>', '{\"errors\": [\"Отсутствует обязательный паттерн: prepare\\\\(\"], \"feedback\": [\"Добавьте в код паттерн: `prepare(`.\"], \"warnings\": []}'),
(164, 2, 1, '<?\necho \"SELECT * FROM users WHERE username = \'prepare(\'\";\n/?>', 1, 100, '2025-04-23 13:05:34', '<?\necho \"SELECT * FROM users WHERE username = \'prepare(\'\";\n/?>', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(165, 2, 1, '<?php\n$input = $_GET[\'username\']; \n$sql = \"SELECT * FROM users WHERE username = \'$input\'\";\n\n$result = mysqli_query($conn, $sql);\n', 0, 0, '2025-04-23 13:15:09', '<?php\n$input = $_GET[\'username\']; \n$sql = \"SELECT * FROM users WHERE username = \'$input\'\";\n\n$result = mysqli_query($conn, $sql);\n', '{\"errors\": [\"Обнаружена прямая интерполяция переменной в SQL-запрос.\"], \"feedback\": [\"Не вставляйте переменные напрямую в строку запроса — используйте белый список и плейсхолдеры.\"], \"warnings\": []}'),
(166, 2, 1, '<?php\n$username = addslashes($_GET[\'username\']);\n$query = \"SELECT * FROM users WHERE username = \'$username\'\";\n?>\n\n', 0, 0, '2025-04-23 13:16:33', '<?php\n$username = addslashes($_GET[\'username\']);\n$query = \"SELECT * FROM users WHERE username = \'$username\'\";\n?>\n\n', '{\"errors\": [\"Обнаружена прямая интерполяция переменной в SQL-запрос.\"], \"feedback\": [\"Не вставляйте переменные напрямую в строку запроса — используйте белый список и плейсхолдеры.\"], \"warnings\": []}'),
(167, 2, 1, '<?php\n$stmt = $pdo->prepare(\"SELECT * FROM users WHERE username = :username\");\n$stmt->execute([\'username\' => $_GET[\'username\']]);\n$result = $stmt->fetchAll();\n?>\n\n\n', 1, 100, '2025-04-23 13:16:45', '<?php\n$stmt = $pdo->prepare(\"SELECT * FROM users WHERE username = :username\");\n$stmt->execute([\'username\' => $_GET[\'username\']]);\n$result = $stmt->fetchAll();\n?>\n\n\n', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(168, 2, 1, '<?php\n$stmt = $pdo->(\"SELECT * FROM users WHERE username = :username\");\n$stmt->execute([\'username\' => $_GET[\'username\']]);\n$result = $stmt->fetchAll();\n?>\n\n\n', 1, 100, '2025-04-23 13:16:55', '<?php\n$stmt = $pdo->(\"SELECT * FROM users WHERE username = :username\");\n$stmt->execute([\'username\' => $_GET[\'username\']]);\n$result = $stmt->fetchAll();\n?>\n\n\n', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(169, 2, 1, '<?php\n$stmt = $pdo->(\"SELECT * FROM users WHERE username = :username\");\n$stmt->execute([\'username\' => $_GET[\'username\']]);\n$result = $stmt->fetchAll();\n?>\n\n\n', 1, 100, '2025-04-23 13:16:56', '<?php\n$stmt = $pdo->(\"SELECT * FROM users WHERE username = :username\");\n$stmt->execute([\'username\' => $_GET[\'username\']]);\n$result = $stmt->fetchAll();\n?>\n\n\n', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(170, 2, 1, '<?php\n$username = addslashes($_GET[\'username\']);\n$query = \"SELECT * FROM users WHERE username = \'$username\'\";\n$result = $pdo->query($query)->fetchAll();\n?>\n\n\n\n', 0, 0, '2025-04-23 13:17:48', '<?php\n$username = addslashes($_GET[\'username\']);\n$query = \"SELECT * FROM users WHERE username = \'$username\'\";\n$result = $pdo->query($query)->fetchAll();\n?>\n\n\n\n', '{\"errors\": [\"Обнаружена прямая интерполяция переменной в SQL-запрос.\"], \"feedback\": [\"Не вставляйте переменные напрямую в строку запроса — используйте белый список и плейсхолдеры.\"], \"warnings\": []}'),
(171, 2, 1, '$username = addslashes($_GET[\'username\']);  // Потенциально опасно!\n$query = \"SELECT * FROM users WHERE username = \'$username\'\";\n$result = $pdo->query($query)->fetchAll();\n\n\n\n\n', 0, 50, '2025-04-23 13:19:56', '$username = addslashes($_GET[\'username\']);  // Потенциально опасно!\n$query = \"SELECT * FROM users WHERE username = \'$username\'\";\n$result = $pdo->query($query)->fetchAll();\n\n\n\n\n', '{\"errors\": [\"Обнаружена прямая интерполяция переменной в SQL-запрос.\"], \"feedback\": [\"Не вставляйте переменные напрямую в строку запроса — используйте белый список и плейсхолдеры.\"], \"warnings\": []}'),
(172, 2, 1, '<?php\n$allowlist = [\'admin\', \'user\', \'guest\'];\n$username = $_GET[\'username\'];\n\nif (in_array($username, $allowlist)) {\n    $stmt = $pdo->prepare(\"SELECT * FROM users WHERE username = ?\");\n    $stmt->execute([$username]);\n    $result = $stmt->fetchAll();\n}\n?>\n\n\n\n', 1, 100, '2025-04-23 13:20:12', '<?php\n$allowlist = [\'admin\', \'user\', \'guest\'];\n$username = $_GET[\'username\'];\n\nif (in_array($username, $allowlist)) {\n    $stmt = $pdo->prepare(\"SELECT * FROM users WHERE username = ?\");\n    $stmt->execute([$username]);\n    $result = $stmt->fetchAll();\n}\n?>\n\n\n\n', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(173, 2, 2, '<?php\n$name = addslashes($_GET[\'name\']);\n$query = \"CALL getUserByName(\'$name\')\";\n$result = $pdo->query($query)->fetchAll();\n?>\n', 0, 50, '2025-04-23 13:22:17', '<?php\n$name = addslashes($_GET[\'name\']);\n$query = \"CALL getUserByName(\'$name\')\";\n$result = $pdo->query($query)->fetchAll();\n?>\n', '{\"errors\": [\"Обнаружена прямая интерполяция переменной в SQL-запрос.\"], \"feedback\": [\"Не вставляйте переменные напрямую в строку запроса — используйте белый список и плейсхолдеры.\"], \"warnings\": []}'),
(174, 2, 2, '<?php\n$name = $_GET[\'name\'];\n$query = \"CALL getUserByName($name)\";\n$result = $pdo->query($query)->fetchAll();\n?>\n\n', 0, 50, '2025-04-23 13:22:36', '<?php\n$name = $_GET[\'name\'];\n$query = \"CALL getUserByName($name)\";\n$result = $pdo->query($query)->fetchAll();\n?>\n\n', '{\"errors\": [\"Обнаружена прямая интерполяция переменной в SQL-запрос.\"], \"feedback\": [\"Не вставляйте переменные напрямую в строку запроса — используйте белый список и плейсхолдеры.\"], \"warnings\": []}'),
(175, 2, 2, '<?php\n$name = $_GET[\'name\'];\n\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\");\n$stmt->execute([$name]);\n$result = $stmt->fetchAll();\n?>\n\n', 1, 100, '2025-04-23 13:22:47', '<?php\n$name = $_GET[\'name\'];\n\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\");\n$stmt->execute([$name]);\n$result = $stmt->fetchAll();\n?>\n\n', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(176, 2, 1, ' $username = addslashes($_GET[\'username\']);  // Потенциально опасно!\n$query = \"SELECT * FROM users WHERE username = \'$username\'\";\n$result = $pdo->query($query)->fetchAll();\n', 0, 50, '2025-04-23 13:33:10', ' $username = addslashes($_GET[\'username\']);  // Потенциально опасно!\n$query = \"SELECT * FROM users WHERE username = \'$username\'\";\n$result = $pdo->query($query)->fetchAll();\n', '{\"errors\": [\"Отсутствует требуемый шаблон: `prepare\\\\(`\", \"Отсутствует требуемый шаблон: `\\\\?`\", \"Прямая интерполяция переменной в SQL-запрос.\"], \"feedback\": [\"Добавьте конструкцию, соответствующую `prepare\\\\(`.\", \"Используйте плейсхолдер `?` вместо прямой вставки переменных в запрос.\", \"Замените интерполяцию на плейсхолдеры.\"], \"warnings\": []}'),
(177, 2, 1, '<? \n$username = addslashes($_GET[\'username\']);  // Потенциально опасно!\n$query = \"SELECT * FROM users WHERE username = \'$username\'\";\n$result = $pdo->query($query)->fetchAll();\n?>', 0, 50, '2025-04-23 13:35:46', '<? \n$username = addslashes($_GET[\'username\']);  // Потенциально опасно!\n$query = \"SELECT * FROM users WHERE username = \'$username\'\";\n$result = $pdo->query($query)->fetchAll();\n?>', '{\"errors\": [\"Отсутствует требуемый шаблон: `prepare\\\\(`\", \"Прямая интерполяция переменной в SQL-запрос.\"], \"feedback\": [\"Добавьте конструкцию, соответствующую `prepare\\\\(`.\", \"Замените интерполяцию на плейсхолдеры.\"], \"warnings\": []}'),
(178, 2, 1, '<?php\n    $stmt = $pdo->prepare(\"SELECT * FROM users WHERE username = ?\");\n    $stmt->execute([$_GET[\\\"username\\\"]]);\n    $user = $stmt->fetch();\n  ?>\n', 0, 50, '2025-04-23 13:36:40', '<?php\n    $stmt = $pdo->prepare(\"SELECT * FROM users WHERE username = ?\");\n    $stmt->execute([$_GET[\\\"username\\\"]]);\n    $user = $stmt->fetch();\n  ?>\n', '{\"errors\": [\"Прямая интерполяция переменной в SQL-запрос.\"], \"feedback\": [\"Замените интерполяцию на плейсхолдеры.\"], \"warnings\": []}'),
(179, 2, 1, ' <?php\n$allowlist = [\'admin\', \'user\', \'guest\'];\n$username = $_GET[\'username\'];\n\nif (in_array($username, $allowlist)) {\n    $stmt = $pdo->prepare(\"SELECT * FROM users WHERE username = ?\");\n    $stmt->execute([$username]);\n    $result = $stmt->fetchAll();\n}\n?>', 1, 100, '2025-04-23 13:36:58', ' <?php\n$allowlist = [\'admin\', \'user\', \'guest\'];\n$username = $_GET[\'username\'];\n\nif (in_array($username, $allowlist)) {\n    $stmt = $pdo->prepare(\"SELECT * FROM users WHERE username = ?\");\n    $stmt->execute([$username]);\n    $result = $stmt->fetchAll();\n}\n?>', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(180, 2, 5, '<script>alert()</script>', 1, 100, '2025-04-23 13:38:14', '<script>alert()</script>', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(181, 2, 5, '<script>alert()</script>', 0, 50, '2025-04-23 13:48:50', '<script>alert()</script>', '{\"errors\": [\"Прямое использование тега <script> не разрешено.\"], \"feedback\": \"\", \"warnings\": []}'),
(182, 2, 5, '<script>alert()</script>', 1, 100, '2025-04-23 13:50:37', '<script>alert()</script>', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(183, 2, 5, '<script>alert(\"XSS\")</script> ', 1, 100, '2025-04-23 16:00:05', '<script>alert(\"XSS\")</script> ', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(184, 2, 6, '<script>alert(\"XSS\")</script> ', 1, 100, '2025-04-23 16:00:33', '<script>alert(\"XSS\")</script> ', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(185, 2, 7, '<script>alert(\"XSS\")</script> ', 1, 100, '2025-04-23 16:00:47', '<script>alert(\"XSS\")</script> ', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(186, 2, 7, '<script>alert(\"XSS\")</script> ', 1, 100, '2025-04-23 16:04:14', '<script>alert(\"XSS\")</script> ', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(187, 2, 7, '<script>alert(\"XSS\")</script> ', 0, 0, '2025-04-23 16:06:47', '<script>alert(\"XSS\")</script> ', '{\"errors\": [\"Слишком очевидный XSS payload: <script>alert(...)</script> не допускается.\"], \"feedback\": \"\", \"warnings\": []}'),
(188, 2, 7, '<script>alert(\"XSS\")</script> ', 0, 0, '2025-04-23 16:06:51', '<script>alert(\"XSS\")</script> ', '{\"errors\": [\"Слишком очевидный XSS payload: <script>alert(...)</script> не допускается.\"], \"feedback\": \"\", \"warnings\": []}'),
(189, 2, 7, '<script>alert(\"XSS\")</script> ', 0, 0, '2025-04-23 16:09:43', '<script>alert(\"XSS\")</script> ', '{\"errors\": [\"Слишком очевидный XSS payload: <script>alert(...)</script> не допускается.\"], \"feedback\": \"\", \"warnings\": []}'),
(190, 2, 5, '<script>alert(\"XSS\")</script> ', 0, 0, '2025-04-23 16:15:53', '<script>alert(\"XSS\")</script> ', '{\"errors\": [\"Слишком очевидный XSS payload: <script>alert(...)</script> не допускается.\"], \"feedback\": \"\", \"warnings\": []}'),
(191, 2, 5, '<img src=x onerror=alert(1)>', 1, 100, '2025-04-23 16:16:12', '<img src=x onerror=alert(1)>', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(192, 2, 5, '<img src=\"x\" onerror=\"alert(1)\">\n', 1, 100, '2025-04-23 17:00:33', '<img src=\"x\" onerror=\"alert(1)\">\n', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(193, 2, 6, '<img src=\"x\" onerror=\"alert(1)\">\n', 1, 100, '2025-04-23 17:00:52', '<img src=\"x\" onerror=\"alert(1)\">\n', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(194, 2, 7, '<img src=\"x\" onerror=\"alert(1)\">\n', 1, 100, '2025-04-23 17:01:15', '<img src=\"x\" onerror=\"alert(1)\">\n', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(195, 2, 7, '<img src=\"x\" onerror=\"alert(1)\">\n', 1, 100, '2025-04-23 17:04:46', '<img src=\"x\" onerror=\"alert(1)\">\n', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(196, 2, 7, '<img src=\"x\" onerror=\"alert(1)\">\n', 1, 100, '2025-04-23 17:04:47', '<img src=\"x\" onerror=\"alert(1)\">\n', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(197, 2, 5, 'msg=<script>alert(1)</script>', 0, 0, '2025-04-23 17:11:03', 'msg=<script>alert(1)</script>', '{\"errors\": [\"Слишком очевидный XSS payload. Попробуйте использовать более изощрённый подход.\"], \"feedback\": \"\", \"warnings\": []}'),
(198, 2, 5, 'xss.html?msg=<script>alert(1)</script>\n', 0, 0, '2025-04-23 17:11:19', 'xss.html?msg=<script>alert(1)</script>\n', '{\"errors\": [\"Слишком очевидный XSS payload. Попробуйте использовать более изощрённый подход.\"], \"feedback\": \"\", \"warnings\": []}'),
(199, 2, 5, 'echo htmlspecialchars($_GET[\'name\'], ENT_QUOTES, \'UTF-8\');\n\n', 0, 80, '2025-04-23 17:12:02', 'echo htmlspecialchars($_GET[\'name\'], ENT_QUOTES, \'UTF-8\');\n\n', '{\"errors\": [\"Обнаружен опасный паттерн вывода: Вывод необработанных данных\"], \"feedback\": \"\", \"warnings\": []}'),
(200, 2, 5, '<img src=x onerror=alert(1)>', 0, 0, '2025-04-23 17:14:04', '<img src=x onerror=alert(1)>', '{\"errors\": [\"Слишком очевидный XSS payload. Попробуйте использовать более изощрённый подход.\"], \"feedback\": \"\", \"warnings\": []}'),
(201, 2, 5, '<img src=x onerror=alert(1)>', 1, 100, '2025-04-23 17:14:19', '<img src=x onerror=alert(1)>', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(202, 2, 5, 'greeting.php?name=%3Cimg%20src%3Dx%20onerror%3Dalert(1)%3E', 1, 100, '2025-04-23 17:14:30', 'greeting.php?name=%3Cimg%20src%3Dx%20onerror%3Dalert(1)%3E', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(203, 2, 5, 'greeting.php?name=%3Cimg%20src%3Dx%20onerror%3Dalert(1)%3E', 1, 100, '2025-04-23 17:14:31', 'greeting.php?name=%3Cimg%20src%3Dx%20onerror%3Dalert(1)%3E', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(204, 2, 6, 'greeting.php?name=%3Cimg%20src%3Dx%20onerror%3Dalert(1)%3E', 1, 100, '2025-04-23 17:14:49', 'greeting.php?name=%3Cimg%20src%3Dx%20onerror%3Dalert(1)%3E', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(205, 2, 5, '<script>alert(\"XSS\")</script> ', 0, 0, '2025-04-23 17:16:07', '<script>alert(\"XSS\")</script> ', '{\"errors\": [\"Слишком очевидный XSS payload. Попробуйте использовать более изощрённый подход.\"], \"feedback\": \"\", \"warnings\": []}'),
(206, 2, 5, 'greeting.php?name=%3Cscript%3Ealert(%22XSS%22)%3C%2Fscript%3E', 1, 100, '2025-04-24 07:59:15', 'greeting.php?name=%3Cscript%3Ealert(%22XSS%22)%3C%2Fscript%3E', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(207, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 08:02:52', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(208, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 08:12:45', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(209, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 08:17:07', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(210, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 08:20:16', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(211, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 08:20:27', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(212, 2, 8, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 08:25:45', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(213, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 08:25:53', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(214, 2, 8, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 08:26:17', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(215, 2, 8, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 08:29:46', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(216, 2, 8, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 08:29:53', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(217, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 08:30:00', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(218, 2, 1, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 0, 50, '2025-04-25 08:32:29', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [\"Прямая интерполяция переменных в SQL-запрос\"], \"feedback\": [\"Замените интерполяцию на параметризованные запросы\"], \"warnings\": []}'),
(219, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 0, 50, '2025-04-25 08:32:44', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [\"Прямая интерполяция переменных в SQL-запрос\"], \"feedback\": [\"Замените интерполяцию на параметризованные запросы\"], \"warnings\": []}'),
(220, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 0, 50, '2025-04-25 08:34:51', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [\"Прямая интерполяция переменных в SQL-запрос\"], \"feedback\": [\"Замените интерполяцию на параметризованные запросы\"], \"warnings\": []}'),
(221, 2, 1, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 0, 50, '2025-04-25 08:35:04', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [\"Прямая интерполяция переменных в SQL-запрос\"], \"feedback\": [\"Замените интерполяцию на параметризованные запросы\"], \"warnings\": []}'),
(222, 2, 8, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 0, 75, '2025-04-25 08:35:13', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [\"Отсутствует обязательная часть: `ORDER BY`\"], \"feedback\": [\"Убедитесь, что в коде присутствует `ORDER BY`.\"], \"warnings\": []}');
INSERT INTO `user_attempts` (`id`, `user_id`, `assignment_id`, `attempt_code`, `is_success`, `score`, `created_at`, `code`, `details`) VALUES
(223, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 0, 50, '2025-04-25 08:35:29', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [\"Прямая интерполяция переменных в SQL-запрос\"], \"feedback\": [\"Замените интерполяцию на параметризованные запросы\"], \"warnings\": []}'),
(224, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 08:37:00', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(225, 2, 8, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 08:37:11', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(226, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 0, 50, '2025-04-25 08:44:21', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [\"Обнаружена опасная интерполяция переменных\"], \"feedback\": [\"Замените интерполяцию на параметризованные запросы\"], \"warnings\": []}'),
(227, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 0, 50, '2025-04-25 08:45:33', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [\"Обнаружена опасная интерполяция переменных\"], \"feedback\": [\"Замените интерполяцию на параметризованные запросы\"], \"warnings\": []}'),
(228, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 0, 50, '2025-04-25 08:45:41', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [\"Обнаружена опасная интерполяция переменных\"], \"feedback\": [\"Замените интерполяцию на параметризованные запросы\"], \"warnings\": []}'),
(229, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 0, 50, '2025-04-25 08:46:31', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [\"Обнаружена опасная интерполяция переменных\"], \"feedback\": [\"Замените интерполяцию на параметризованные запросы\"], \"warnings\": []}'),
(230, 2, 1, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 0, 50, '2025-04-25 08:47:41', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [\"Обнаружена опасная интерполяция переменных\"], \"feedback\": [\"Замените интерполяцию на параметризованные запросы\"], \"warnings\": []}'),
(231, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 0, 50, '2025-04-25 08:48:58', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [\"Обнаружена опасная интерполяция переменных\", \"Не найден вызов процедуры getUserByName с параметром {{input}}\"], \"feedback\": [\"Замените интерполяцию на параметризованные запросы\", \"Используйте вызов процедуры: CALL getUserByName({{input}})\"], \"warnings\": []}'),
(232, 2, 2, '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(:username)\"); \n$stmt->bindParam(\':username\', $username, PDO::PARAM_STR);\n$stmt->execute();\n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>\n', 0, 50, '2025-04-25 08:50:02', '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(:username)\"); \n$stmt->bindParam(\':username\', $username, PDO::PARAM_STR);\n$stmt->execute();\n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>\n', '{\"errors\": [\"Обнаружена опасная интерполяция переменных\", \"Не найден вызов процедуры getUserByName с параметром {{input}}\"], \"feedback\": [\"Замените интерполяцию на параметризованные запросы\", \"Используйте вызов процедуры: CALL getUserByName({{input}})\"], \"warnings\": []}'),
(233, 2, 2, '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(:username)\"); \n$stmt->bindParam(\':username\', $username, PDO::PARAM_STR);\n$stmt->execute();\n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>\n', 0, 50, '2025-04-25 08:51:16', '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(:username)\"); \n$stmt->bindParam(\':username\', $username, PDO::PARAM_STR);\n$stmt->execute();\n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>\n', '{\"errors\": [\"Обнаружена опасная интерполяция переменных\", \"Не найден вызов процедуры getUserByName с параметром {{input}}\"], \"feedback\": [\"Замените интерполяцию на параметризованные запросы\", \"Используйте вызов процедуры: CALL getUserByName({{input}})\"], \"warnings\": []}'),
(234, 2, 2, '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(:username)\"); \n$stmt->bindParam(\':username\', $username, PDO::PARAM_STR);\n$stmt->execute();\n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>\n', 0, 50, '2025-04-25 08:51:25', '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(:username)\"); \n$stmt->bindParam(\':username\', $username, PDO::PARAM_STR);\n$stmt->execute();\n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>\n', '{\"errors\": [\"Обнаружена опасная интерполяция переменных\", \"Не найден вызов процедуры getUserByName с параметром {{input}}\"], \"feedback\": [\"Замените интерполяцию на параметризованные запросы\", \"Используйте вызов процедуры: CALL getUserByName({{input}})\"], \"warnings\": []}'),
(235, 2, 2, '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(:username)\"); \n$stmt->bindParam(\':username\', $username, PDO::PARAM_STR);\n$stmt->execute();\n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>\n', 0, 50, '2025-04-25 08:51:47', '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(:username)\"); \n$stmt->bindParam(\':username\', $username, PDO::PARAM_STR);\n$stmt->execute();\n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>\n', '{\"errors\": [\"Обнаружена опасная интерполяция переменных\", \"Не найден вызов процедуры getUserByName с параметром {{input}}\"], \"feedback\": [\"Замените интерполяцию на параметризованные запросы\", \"Используйте вызов процедуры: CALL getUserByName({{input}})\"], \"warnings\": []}'),
(236, 2, 2, '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]);\n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>\n', 0, 50, '2025-04-25 08:52:59', '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]);\n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>\n', '{\"errors\": [\"Обнаружена опасная интерполяция переменных\"], \"feedback\": [\"Замените интерполяцию на параметризованные запросы\"], \"warnings\": []}'),
(237, 2, 2, '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]);\n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', 0, 50, '2025-04-25 08:53:13', '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]);\n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', '{\"errors\": [\"Обнаружена опасная интерполяция переменных\"], \"feedback\": [\"Замените интерполяцию на параметризованные запросы\"], \"warnings\": []}'),
(238, 2, 2, '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]);\n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', 0, 50, '2025-04-25 08:53:13', '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]);\n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', '{\"errors\": [\"Обнаружена опасная интерполяция переменных\"], \"feedback\": [\"Замените интерполяцию на параметризованные запросы\"], \"warnings\": []}'),
(239, 2, 2, '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', 0, 50, '2025-04-25 08:53:46', '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', '{\"errors\": [\"Обнаружена опасная интерполяция переменных\"], \"feedback\": [\"Замените интерполяцию на параметризованные запросы\"], \"warnings\": []}'),
(240, 2, 2, '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); // Используем неименованный параметр\n$stmt->execute([$username]); // Параметры передаются через execute()\n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', 0, 50, '2025-04-25 08:54:19', '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); // Используем неименованный параметр\n$stmt->execute([$username]); // Параметры передаются через execute()\n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', '{\"errors\": [\"Обнаружена опасная интерполяция переменных\"], \"feedback\": [\"Замените интерполяцию на параметризованные запросы\"], \"warnings\": []}'),
(241, 2, 2, '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', 0, 50, '2025-04-25 08:55:10', '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', '{\"errors\": [\"Обнаружена опасная интерполяция переменных\"], \"feedback\": [\"Замените интерполяцию на параметризованные запросы\"], \"warnings\": []}'),
(242, 2, 2, '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', 1, 100, '2025-04-25 09:01:47', '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(243, 2, 1, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 09:02:14', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(244, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 09:02:22', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(245, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 09:04:54', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(246, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 0, 50, '2025-04-25 09:05:29', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [\"Обнаружена опасная интерполяция переменных\", \"Не найден вызов процедуры getUserByName с параметром {{input}}\"], \"feedback\": [\"Замените интерполяцию на параметризованные запросы\", \"Используйте вызов процедуры: CALL getUserByName({{input}})\"], \"warnings\": []}'),
(247, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 0, 50, '2025-04-25 09:06:59', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [\"Не найден вызов процедуры getUserByName с параметром {{input}}\"], \"feedback\": [\"Используйте вызов процедуры: CALL getUserByName({{input}})\"], \"warnings\": []}'),
(248, 2, 2, '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', 1, 100, '2025-04-25 09:07:11', '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(249, 2, 1, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 0, 50, '2025-04-25 09:07:24', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [\"Не найден вызов процедуры getUserByName с параметром {{input}}\"], \"feedback\": [\"Используйте вызов процедуры: CALL getUserByName({{input}})\"], \"warnings\": []}'),
(250, 2, 1, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 09:09:26', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(251, 2, 2, '$this->validateProcedureCall($userCode, $config, $errors, $feedback, $score);\n', 0, 50, '2025-04-25 09:09:36', '$this->validateProcedureCall($userCode, $config, $errors, $feedback, $score);\n', '{\"errors\": [\"Требуется использование подготовленных выражений (prepare)\", \"Требуется параметризованный запрос\", \"Отсутствует обязательный элемент: prepare\", \"Отсутствует обязательный элемент: \\\\?\"], \"feedback\": [\"Используйте $pdo->prepare() для безопасности\", \"Используйте ? в качестве плейсхолдера\", \"Добавьте в код: prepare\", \"Добавьте в код: \\\\?\"], \"warnings\": []}'),
(252, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 09:09:47', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(253, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 09:11:11', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(254, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 09:11:12', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(255, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 09:15:18', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(256, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 09:17:42', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(257, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 09:17:54', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(258, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 09:22:02', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(259, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 09:22:16', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(260, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 09:25:08', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(261, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 09:26:29', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(262, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 09:28:20', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(263, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 09:28:20', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(264, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 09:28:21', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(265, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 09:28:21', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(266, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 09:28:21', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(267, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 09:30:27', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(268, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 09:30:29', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(269, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 09:30:29', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(270, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 09:30:29', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(271, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 09:30:30', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(272, 2, 2, '$stmt =', 0, 25, '2025-04-25 09:30:38', '$stmt =', '{\"errors\": [\"Требуется использование подготовленных выражений (prepare)\", \"Требуется параметризованный запрос\", \"Отсутствует обязательный элемент: prepare\", \"Отсутствует обязательный элемент: \\\\\\\\?\"], \"feedback\": [\"Используйте $pdo->prepare() для безопасности\", \"Используйте ? в качестве плейсхолдера\", \"Добавьте в код: prepare\", \"Добавьте в код: ?\"], \"warnings\": []}'),
(273, 2, 1, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 09:41:04', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(274, 2, 1, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 09:42:09', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(275, 2, 8, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 0, 50, '2025-04-25 09:42:29', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [\"Требуется проверка ввода через белый список (in_array)\"], \"feedback\": [\"Добавьте проверку ввода через in_array\"], \"warnings\": []}'),
(276, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 09:43:07', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(277, 2, 2, '$name = $_GET[\"name\"];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\");\n$stmt->execute([$name]);\n', 1, 100, '2025-04-25 09:44:44', '$name = $_GET[\"name\"];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\");\n$stmt->execute([$name]);\n', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(278, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 09:47:29', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(279, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 09:47:32', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(280, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 0, 50, '2025-04-25 09:50:06', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [\"Неверное использование подготовленных выражений. Используйте $stmt->execute([?\\\\])\"], \"feedback\": [\"Используйте подготовленные выражения для всех SQL-запросов.\"], \"warnings\": []}'),
(281, 2, 2, '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', 1, 100, '2025-04-25 09:50:20', '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(282, 2, 1, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 0, 50, '2025-04-25 09:50:33', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [\"Неверное использование подготовленных выражений. Используйте $stmt->execute([?\\\\])\"], \"feedback\": [\"Используйте подготовленные выражения для всех SQL-запросов.\"], \"warnings\": []}'),
(283, 2, 1, '$stmt = $pdo->prepare(\"SELECT * FROM users WHERE username = ?\");\n$stmt->execute([$_GET[\'username\']]);\n', 0, 50, '2025-04-25 09:51:10', '$stmt = $pdo->prepare(\"SELECT * FROM users WHERE username = ?\");\n$stmt->execute([$_GET[\'username\']]);\n', '{\"errors\": [\"Неверное использование подготовленных выражений. Используйте $stmt->execute([?\\\\])\"], \"feedback\": [\"Используйте подготовленные выражения для всех SQL-запросов.\"], \"warnings\": []}'),
(284, 2, 1, ' <?php\n$allowlist = [\'admin\', \'user\', \'guest\'];\n$username = $_GET[\'username\'];\n\nif (in_array($username, $allowlist)) {\n    $stmt = $pdo->prepare(\"SELECT * FROM users WHERE username = ?\");\n    $stmt->execute([$username]);\n    $result = $stmt->fetchAll();\n}\n?>\n', 0, 50, '2025-04-25 09:51:18', ' <?php\n$allowlist = [\'admin\', \'user\', \'guest\'];\n$username = $_GET[\'username\'];\n\nif (in_array($username, $allowlist)) {\n    $stmt = $pdo->prepare(\"SELECT * FROM users WHERE username = ?\");\n    $stmt->execute([$username]);\n    $result = $stmt->fetchAll();\n}\n?>\n', '{\"errors\": [\"Неверное использование подготовленных выражений. Используйте $stmt->execute([?\\\\])\"], \"feedback\": [\"Используйте подготовленные выражения для всех SQL-запросов.\"], \"warnings\": []}'),
(285, 2, 8, ' <?php\n$allowlist = [\'admin\', \'user\', \'guest\'];\n$username = $_GET[\'username\'];\n\nif (in_array($username, $allowlist)) {\n    $stmt = $pdo->prepare(\"SELECT * FROM users WHERE username = ?\");\n    $stmt->execute([$username]);\n    $result = $stmt->fetchAll();\n}\n?>\n', 1, 100, '2025-04-25 09:51:38', ' <?php\n$allowlist = [\'admin\', \'user\', \'guest\'];\n$username = $_GET[\'username\'];\n\nif (in_array($username, $allowlist)) {\n    $stmt = $pdo->prepare(\"SELECT * FROM users WHERE username = ?\");\n    $stmt->execute([$username]);\n    $result = $stmt->fetchAll();\n}\n?>\n', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(286, 2, 8, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);\n', 1, 100, '2025-04-25 09:51:49', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);\n', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(287, 2, 1, '$allowlist = [\'admin\', \'user\', \'guest\'];\n$username = $_GET[\'username\'];\n\nif (in_array($username, $allowlist)) {\n    $stmt = $pdo->prepare(\"SELECT * FROM users WHERE username = ?\");\n    $stmt->execute([$username]);\n    $result = $stmt->fetchAll();\n}\n', 0, 50, '2025-04-25 09:52:13', '$allowlist = [\'admin\', \'user\', \'guest\'];\n$username = $_GET[\'username\'];\n\nif (in_array($username, $allowlist)) {\n    $stmt = $pdo->prepare(\"SELECT * FROM users WHERE username = ?\");\n    $stmt->execute([$username]);\n    $result = $stmt->fetchAll();\n}\n', '{\"errors\": [\"Неверное использование подготовленных выражений. Используйте $stmt->execute([?\\\\])\"], \"feedback\": [\"Используйте подготовленные выражения для всех SQL-запросов.\"], \"warnings\": []}'),
(288, 2, 8, ' $stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 09:52:38', ' $stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(289, 2, 8, ' $stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 0, 50, '2025-04-25 09:53:46', ' $stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [\"Требуется проверка ввода через белый список (in_array)\"], \"feedback\": [\"Добавьте проверку ввода через in_array\"], \"warnings\": []}'),
(290, 2, 8, ' $stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 0, 50, '2025-04-25 09:57:50', ' $stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [\"Требуется реализация белого списка для входных данных\"], \"feedback\": [\"Используйте in_array() с предопределенным списком допустимых значений\"], \"warnings\": []}'),
(291, 2, 8, ' $column = $_GET[\'sort\'];\n$allowed_columns = [\'username\', \'email\', \'id\'];\n\n// Проверка через in_array\nif (in_array($column, $allowed_columns)) {\n    // Построение запроса с использованием белого списка для столбца\n    $query = \"SELECT * FROM users ORDER BY \" . $column; // Строка строится безопасно, так как $column проверено\n    $stmt = $conn->prepare($query); // Здесь не используется параметризация для имени столбца\n    $stmt->execute();\n    $result = $stmt->get_result();\n} else {\n    echo \"Недопустимое значение для сортировки.\";\n}', 1, 100, '2025-04-25 09:58:25', ' $column = $_GET[\'sort\'];\n$allowed_columns = [\'username\', \'email\', \'id\'];\n\n// Проверка через in_array\nif (in_array($column, $allowed_columns)) {\n    // Построение запроса с использованием белого списка для столбца\n    $query = \"SELECT * FROM users ORDER BY \" . $column; // Строка строится безопасно, так как $column проверено\n    $stmt = $conn->prepare($query); // Здесь не используется параметризация для имени столбца\n    $stmt->execute();\n    $result = $stmt->get_result();\n} else {\n    echo \"Недопустимое значение для сортировки.\";\n}', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(292, 2, 2, ' $stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 09:58:40', ' $stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(293, 2, 2, ' $stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 10:01:31', ' $stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(294, 2, 2, ' $stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 10:01:32', ' $stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(295, 2, 2, ' $stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 10:02:03', ' $stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(296, 2, 2, ' $stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 0, 50, '2025-04-25 10:02:22', ' $stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [\"Неверное использование подготовленных выражений. Используйте $stmt->execute([?\\\\])\"], \"feedback\": [\"Используйте подготовленные выражения для всех SQL-запросов.\"], \"warnings\": []}'),
(297, 2, 8, ' $stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 0, 50, '2025-04-25 10:03:40', ' $stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [\"Требуется реализация белого списка для входных данных\"], \"feedback\": [\"Используйте in_array() с предопределенным списком допустимых значений\"], \"warnings\": []}'),
(298, 2, 5, '<script>alert(123)</script>', 0, 0, '2025-04-25 10:04:02', '<script>alert(123)</script>', '{\"errors\": [\"Слишком очевидный XSS payload. Попробуйте использовать более изощрённый подход.\"], \"feedback\": \"\", \"warnings\": []}'),
(299, 2, 5, '<script>alert(123)</script>', 0, 0, '2025-04-25 10:04:31', '<script>alert(123)</script>', '{\"errors\": [\"Слишком очевидный XSS payload: <script>alert(...)</script> не допускается.\"], \"feedback\": \"\", \"warnings\": []}'),
(300, 2, 6, '<script>alert(123)</script>', 0, 0, '2025-04-25 10:04:51', '<script>alert(123)</script>', '{\"errors\": [\"Слишком очевидный XSS payload: <script>alert(...)</script> не допускается.\"], \"feedback\": \"\", \"warnings\": []}'),
(301, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 10:06:02', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(302, 2, 8, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 0, 50, '2025-04-25 10:07:01', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [\"Требуется реализация белого списка для входных данных\"], \"feedback\": [\"Используйте in_array() с предопределенным списком допустимых значений\"], \"warnings\": []}'),
(303, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 10:12:43', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(304, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 10:15:06', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(305, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 10:16:48', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(306, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 10:17:02', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(307, 2, 8, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 0, 50, '2025-04-25 10:17:13', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [\"Требуется реализация белого списка для входных данных\"], \"feedback\": [\"Используйте in_array() с предопределенным списком допустимых значений\"], \"warnings\": []}'),
(308, 2, 1, ' $stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 10:17:20', ' $stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(309, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 10:17:29', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(310, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 10:23:08', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(311, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 10:23:09', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(312, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 10:23:09', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(313, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 10:24:40', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(314, 2, 2, '$stm', 0, 25, '2025-04-25 10:25:21', '$stm', '{\"errors\": [\"Требуется полный цикл подготовленных выражений (prepare -> bind -> execute)\", \"Отсутствует обязательный элемент: prepare\", \"Отсутствует обязательный элемент: \\\\?\"], \"feedback\": [\"Используйте связывание параметров через prepare() и execute()\", \"Добавьте в код конструкцию: prepare\", \"Добавьте в код конструкцию: \\\\?\"], \"warnings\": []}'),
(315, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);\n', 1, 100, '2025-04-25 10:26:28', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);\n', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(316, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);\n', 1, 100, '2025-04-25 10:28:58', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);\n', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(317, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);\n', 1, 100, '2025-04-25 10:29:00', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);\n', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(318, 2, 8, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);\n', 0, 50, '2025-04-25 10:29:12', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);\n', '{\"errors\": [\"Требуется реализация белого списка для входных данных\"], \"feedback\": [\"Используйте in_array() с предопределенным списком допустимых значений\"], \"warnings\": []}'),
(319, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);\n', 1, 100, '2025-04-25 10:29:19', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);\n', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(320, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 10:34:10', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(321, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 10:41:27', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(322, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 10:41:33', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(323, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 10:43:03', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(324, 2, 8, '{\n  \"hints\": [\n    \"Используйте параметр для вызова процедуры\",\n    \"Не вставляйте переменную напрямую в SQL-строку\"\n  ],\n  \"template\": \"CALL getUserByName({{input}});\",\n  \"description\": \"Убедитесь, что пользовательский ввод не может нарушить структуру вызова процедуры\",\n  \"attack_example\": \"admin\\\\\' OR 1=1\",\n  \"protection_type\": \"procedure_call\",\n  \"required_patterns\": [\n    \"prepare\",\n    \"\\\\?\",\n    \"CALL\\\\s+getUserByName\\\\s*\\\\(\\\\s*\\\\?\"\n  ],\n  \"forbidden_patterns\": [\n    \"CONCAT\", \n    \"SELECT.*FROM.*WHERE.*\\\\?\",\n    \"DROP|DELETE|UPDATE\"\n  ],\n  \"vulnerability_checks\": [\n    \"injection_check\",\n    \"parameterized_check\"\n  ],\n  \"mustContain\": [\n    \"prepare\",\n    \"parameterized_query\",\n    \"CALL\"\n  ],\n  \"error_message\": \"Запрос должен быть вызовом процедуры \'getUserByName\', а не обычным SELECT запросом.\"\n}\n', 0, 0, '2025-04-25 10:43:39', '{\n  \"hints\": [\n    \"Используйте параметр для вызова процедуры\",\n    \"Не вставляйте переменную напрямую в SQL-строку\"\n  ],\n  \"template\": \"CALL getUserByName({{input}});\",\n  \"description\": \"Убедитесь, что пользовательский ввод не может нарушить структуру вызова процедуры\",\n  \"attack_example\": \"admin\\\\\' OR 1=1\",\n  \"protection_type\": \"procedure_call\",\n  \"required_patterns\": [\n    \"prepare\",\n    \"\\\\?\",\n    \"CALL\\\\s+getUserByName\\\\s*\\\\(\\\\s*\\\\?\"\n  ],\n  \"forbidden_patterns\": [\n    \"CONCAT\", \n    \"SELECT.*FROM.*WHERE.*\\\\?\",\n    \"DROP|DELETE|UPDATE\"\n  ],\n  \"vulnerability_checks\": [\n    \"injection_check\",\n    \"parameterized_check\"\n  ],\n  \"mustContain\": [\n    \"prepare\",\n    \"parameterized_query\",\n    \"CALL\"\n  ],\n  \"error_message\": \"Запрос должен быть вызовом процедуры \'getUserByName\', а не обычным SELECT запросом.\"\n}\n', '{\"errors\": [\"Требуется реализация белого списка для входных данных\", \"Обнаружена критическая уязвимость SQLi\"], \"feedback\": [\"Используйте in_array() с предопределенным списком допустимых значений\", \"Немедленно устраните опасный паттерн: /\\\\b(OR|AND)\\\\s+1\\\\s*=\\\\s*1\\\\b/i\"], \"warnings\": []}'),
(325, 2, 8, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 0, 50, '2025-04-25 10:43:50', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [\"Требуется реализация белого списка для входных данных\"], \"feedback\": [\"Используйте in_array() с предопределенным списком допустимых значений\"], \"warnings\": []}'),
(326, 2, 1, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 10:43:58', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(327, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 10:44:05', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(328, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 10:46:27', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(329, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 10:47:57', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(330, 5, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 10:48:13', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(331, 5, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 10:50:33', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(332, 5, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 10:52:35', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(333, 5, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 10:52:37', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(334, 5, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 0, 0, '2025-04-25 10:53:54', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [\"Запрос должен быть вызовом процедуры \'getUserByName\', а не обычным SELECT запросом.\"], \"feedback\": [\"Используйте CALL для вызова хранимой процедуры.\"], \"warnings\": []}'),
(335, 5, 1, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 0, 0, '2025-04-25 10:54:06', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [\"Запрос должен быть вызовом процедуры \'getUserByName\', а не обычным SELECT запросом.\"], \"feedback\": [\"Используйте CALL для вызова хранимой процедуры.\"], \"warnings\": []}'),
(336, 5, 1, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 10:55:12', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(337, 5, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 10:55:21', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(338, 5, 8, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 0, 50, '2025-04-25 10:55:32', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [\"Требуется реализация белого списка для входных данных\"], \"feedback\": [\"Используйте in_array() с предопределенным списком допустимых значений\"], \"warnings\": []}'),
(339, 5, 8, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 0, 50, '2025-04-25 10:59:28', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [\"Требуется реализация белого списка для входных данных\"], \"feedback\": [\"Используйте in_array() с предопределенным списком допустимых значений\"], \"warnings\": []}'),
(340, 5, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 10:59:38', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(341, 5, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 11:00:57', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}');
INSERT INTO `user_attempts` (`id`, `user_id`, `assignment_id`, `attempt_code`, `is_success`, `score`, `created_at`, `code`, `details`) VALUES
(342, 5, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 11:00:58', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(343, 5, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 11:02:54', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(344, 5, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-25 11:03:01', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(345, 2, 8, ' $stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 0, 50, '2025-04-25 11:14:13', ' $stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [\"Требуется реализация белого списка для входных данных\"], \"feedback\": [\"Используйте in_array() с предопределенным списком допустимых значений\"], \"warnings\": []}'),
(346, 2, 1, '123', 0, 25, '2025-04-25 11:14:29', '123', '{\"errors\": [\"Требуется полный цикл подготовленных выражений (prepare -> bind -> execute)\", \"Отсутствует обязательный элемент: prepare\\\\(\", \"Отсутствует обязательный элемент: \\\\?\"], \"feedback\": [\"Используйте связывание параметров через prepare() и execute()\", \"Добавьте в код конструкцию: prepare\\\\(\", \"Добавьте в код конструкцию: \\\\?\"], \"warnings\": []}'),
(347, 2, 5, '<script>alert(123)</script>', 0, 0, '2025-04-25 11:14:59', '<script>alert(123)</script>', '{\"errors\": [\"Слишком очевидный XSS payload: <script>alert(...)</script> не допускается.\"], \"feedback\": \"\", \"warnings\": []}'),
(348, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-28 07:48:19', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(349, 2, 8, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 0, 50, '2025-04-28 07:48:39', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [\"Требуется реализация белого списка для входных данных\"], \"feedback\": [\"Используйте in_array() с предопределенным списком допустимых значений\"], \"warnings\": []}'),
(350, 2, 1, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-28 07:48:52', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(351, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-28 07:53:33', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(352, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-28 07:53:34', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(353, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-28 07:53:36', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(354, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-28 07:53:37', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(355, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-28 07:53:37', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(356, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-28 07:53:37', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(357, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-28 07:53:37', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(358, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-28 07:55:52', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(359, 2, 2, '123', 0, 25, '2025-04-28 07:59:05', '123', '{\"errors\": [\"Требуется полный цикл подготовленных выражений (prepare -> bind -> execute)\", \"Отсутствует обязательный элемент: prepare\", \"Отсутствует обязательный элемент: \\\\?\"], \"feedback\": [\"Используйте связывание параметров через prepare() и execute()\", \"Добавьте в код конструкцию: prepare\", \"Добавьте в код конструкцию: \\\\?\"], \"warnings\": []}'),
(360, 2, 2, '12', 0, 25, '2025-04-28 07:59:40', '12', '{\"errors\": [\"Требуется полный цикл подготовленных выражений (prepare -> bind -> execute)\", \"Отсутствует обязательный элемент: prepare\", \"Отсутствует обязательный элемент: \\\\?\"], \"feedback\": [\"Используйте связывание параметров через prepare() и execute()\", \"Добавьте в код конструкцию: prepare\", \"Добавьте в код конструкцию: \\\\?\"], \"warnings\": []}'),
(361, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-28 07:59:54', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(362, 2, 2, '123', 0, 25, '2025-04-28 08:07:50', '123', '{\"errors\": [\"Требуется полный цикл подготовленных выражений (prepare -> bind -> execute)\", \"Отсутствует обязательный элемент: prepare\", \"Отсутствует обязательный элемент: \\\\?\"], \"feedback\": [\"Используйте связывание параметров через prepare() и execute()\", \"Добавьте в код конструкцию: prepare\", \"Добавьте в код конструкцию: \\\\?\"], \"warnings\": []}'),
(363, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-28 08:08:42', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(364, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-28 08:12:54', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(365, 2, 2, 'code', 0, 25, '2025-04-28 08:15:45', 'code', '{\"errors\": [\"Требуется полный цикл подготовленных выражений (prepare -> bind -> execute)\", \"Отсутствует обязательный элемент: prepare\", \"Отсутствует обязательный элемент: \\\\?\"], \"feedback\": [\"Используйте связывание параметров через prepare() и execute()\", \"Добавьте в код конструкцию: prepare\", \"Добавьте в код конструкцию: \\\\?\"], \"warnings\": []}'),
(366, 2, 2, 'code', 0, 25, '2025-04-28 08:22:46', 'code', '{\"errors\": [\"Требуется полный цикл подготовленных выражений (prepare -> bind -> execute)\", \"Отсутствует обязательный элемент: prepare\", \"Отсутствует обязательный элемент: \\\\?\"], \"feedback\": [\"Используйте связывание параметров через prepare() и execute()\", \"Добавьте в код конструкцию: prepare\", \"Добавьте в код конструкцию: \\\\?\"], \"warnings\": []}'),
(367, 2, 2, '123', 0, 25, '2025-04-28 08:23:00', '123', '{\"errors\": [\"Требуется полный цикл подготовленных выражений (prepare -> bind -> execute)\", \"Отсутствует обязательный элемент: prepare\", \"Отсутствует обязательный элемент: \\\\?\"], \"feedback\": [\"Используйте связывание параметров через prepare() и execute()\", \"Добавьте в код конструкцию: prepare\", \"Добавьте в код конструкцию: \\\\?\"], \"warnings\": []}'),
(368, 2, 2, '123', 0, 25, '2025-04-28 08:23:01', '123', '{\"errors\": [\"Требуется полный цикл подготовленных выражений (prepare -> bind -> execute)\", \"Отсутствует обязательный элемент: prepare\", \"Отсутствует обязательный элемент: \\\\?\"], \"feedback\": [\"Используйте связывание параметров через prepare() и execute()\", \"Добавьте в код конструкцию: prepare\", \"Добавьте в код конструкцию: \\\\?\"], \"warnings\": []}'),
(369, 2, 2, '123', 0, 25, '2025-04-28 08:23:02', '123', '{\"errors\": [\"Требуется полный цикл подготовленных выражений (prepare -> bind -> execute)\", \"Отсутствует обязательный элемент: prepare\", \"Отсутствует обязательный элемент: \\\\?\"], \"feedback\": [\"Используйте связывание параметров через prepare() и execute()\", \"Добавьте в код конструкцию: prepare\", \"Добавьте в код конструкцию: \\\\?\"], \"warnings\": []}'),
(370, 2, 2, '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(:username)\"); \n$stmt->bindParam(\':username\', $username, PDO::PARAM_STR);\n$stmt->execute();\n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>\n', 1, 100, '2025-04-28 08:23:11', '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(:username)\"); \n$stmt->bindParam(\':username\', $username, PDO::PARAM_STR);\n$stmt->execute();\n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>\n', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(371, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-28 08:23:32', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(372, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-28 08:26:11', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(373, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-28 08:26:20', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(374, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-28 08:26:56', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(375, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-28 08:27:31', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(376, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-28 08:31:47', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(377, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-28 08:34:13', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(378, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-28 08:34:21', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(379, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-28 08:35:44', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(380, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-28 08:36:42', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(381, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-28 08:36:42', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(382, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-28 08:36:44', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(383, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);\n', 1, 100, '2025-04-28 08:36:53', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);\n', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(384, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);\n', 0, 100, '2025-04-28 08:39:33', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);\n', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(385, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 0, 100, '2025-04-28 08:41:14', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(386, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 0, 100, '2025-04-28 08:42:33', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(387, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-28 08:43:52', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(388, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-28 08:44:12', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(389, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-28 08:45:11', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(390, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 0, 0, '2025-04-28 08:49:36', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [\"Ожидается вызов хранимой процедуры (CALL), а не обычный SQL-запрос.\", \"Требуется SQL-оператор типа: CALL\", \"Ваш код должен вызывать процедуру \'getUserByName\' через CALL.\"], \"feedback\": [\"Проверьте правильность вызова процедуры \'getUserByName\'.\"], \"warnings\": []}'),
(391, 2, 1, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 0, 0, '2025-04-28 08:49:49', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [\"Код не соответствует шаблону. Ожидается: SELECT * FROM users WHERE username = \'\'{{input}}\'\'\", \"Ошибка шаблона: не удалось определить имя процедуры.\"], \"feedback\": [], \"warnings\": []}'),
(392, 2, 1, '$stmt = $pdo->prepare(\"SELECT * FROM users WHERE username = \'?\");\n$stmt->execute([$_GET[\'username\']]);', 0, 0, '2025-04-28 08:50:05', '$stmt = $pdo->prepare(\"SELECT * FROM users WHERE username = \'?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [\"Код не соответствует шаблону. Ожидается: SELECT * FROM users WHERE username = \'\'{{input}}\'\'\", \"Ошибка шаблона: не удалось определить имя процедуры.\"], \"feedback\": [], \"warnings\": []}'),
(393, 2, 1, '$stmt = $pdo->prepare(\"SELECT * FROM users WHERE username = :username\");\n$stmt->execute([\':username\' => $_GET[\'username\']]);\n', 0, 0, '2025-04-28 08:50:38', '$stmt = $pdo->prepare(\"SELECT * FROM users WHERE username = :username\");\n$stmt->execute([\':username\' => $_GET[\'username\']]);\n', '{\"errors\": [\"Код не соответствует шаблону. Ожидается: SELECT * FROM users WHERE username = \'\'{{input}}\'\'\", \"Ошибка шаблона: не удалось определить имя процедуры.\", \"Требуется полный цикл подготовленных выражений (prepare -> bind -> execute)\", \"Обязательный элемент отсутствует: \\\\?\"], \"feedback\": [\"Используйте связывание параметров через prepare() и execute()\"], \"warnings\": []}'),
(394, 2, 1, '$input = $_GET[\'username\']; // Получаем значение параметра username\n\n// Подставляем значение в строку с одинарными кавычками\n$query = \"SELECT * FROM users WHERE username = \'\'\" . $input . \"\'\'\"; \n\n$stmt = $pdo->prepare($query); // Подготовленный запрос\n$stmt->execute(); // Выполняем запрос\n', 0, 0, '2025-04-28 08:51:12', '$input = $_GET[\'username\']; // Получаем значение параметра username\n\n// Подставляем значение в строку с одинарными кавычками\n$query = \"SELECT * FROM users WHERE username = \'\'\" . $input . \"\'\'\"; \n\n$stmt = $pdo->prepare($query); // Подготовленный запрос\n$stmt->execute(); // Выполняем запрос\n', '{\"errors\": [\"Код не соответствует шаблону. Ожидается: SELECT * FROM users WHERE username = \'\'{{input}}\'\'\", \"Ошибка шаблона: не удалось определить имя процедуры.\", \"Требуется полный цикл подготовленных выражений (prepare -> bind -> execute)\", \"Обязательный элемент отсутствует: \\\\?\"], \"feedback\": [\"Используйте связывание параметров через prepare() и execute()\"], \"warnings\": []}'),
(395, 2, 1, '$input = $_GET[\'username\']; // Получаем значение параметра username\n\n// Подставляем значение в строку с одинарными кавычками\n$query = \"SELECT * FROM users WHERE username = \'\'\" . $input . \"\'\'\"; \n\n$stmt = $pdo->prepare($query); // Подготовленный запрос\n$stmt->execute(); // Выполняем запрос\n', 0, 0, '2025-04-28 08:51:25', '$input = $_GET[\'username\']; // Получаем значение параметра username\n\n// Подставляем значение в строку с одинарными кавычками\n$query = \"SELECT * FROM users WHERE username = \'\'\" . $input . \"\'\'\"; \n\n$stmt = $pdo->prepare($query); // Подготовленный запрос\n$stmt->execute(); // Выполняем запрос\n', '{\"errors\": [\"Код не соответствует шаблону. Ожидается: SELECT * FROM users WHERE username = \'\'{{input}}\'\'\", \"Ошибка шаблона: не удалось определить имя процедуры.\", \"Требуется полный цикл подготовленных выражений (prepare -> bind -> execute)\", \"Обязательный элемент отсутствует: \\\\?\"], \"feedback\": [\"Используйте связывание параметров через prepare() и execute()\"], \"warnings\": []}'),
(396, 2, 1, '$input = $_GET[\'username\'];\n$query = \"SELECT * FROM users WHERE username = :username\";\n$stmt = $pdo->prepare($query);\n$stmt->bindValue(\':username\', $input, PDO::PARAM_STR);\n$stmt->execute();', 0, 0, '2025-04-28 08:52:11', '$input = $_GET[\'username\'];\n$query = \"SELECT * FROM users WHERE username = :username\";\n$stmt = $pdo->prepare($query);\n$stmt->bindValue(\':username\', $input, PDO::PARAM_STR);\n$stmt->execute();', '{\"errors\": [\"Код не соответствует шаблону. Ожидается: SELECT * FROM users WHERE username = \'\'{{input}}\'\'\", \"Ошибка шаблона: не удалось определить имя процедуры.\", \"Требуется полный цикл подготовленных выражений (prepare -> bind -> execute)\", \"Обязательный элемент отсутствует: \\\\?\"], \"feedback\": [\"Используйте связывание параметров через prepare() и execute()\"], \"warnings\": []}'),
(397, 2, 1, '$input = $_GET[\'username\']\n$query = \"SELECT * FROM users WHERE username = ?\";\n$stmt = $pdo->prepare($query);\n$stmt->execute([$input]);', 0, 0, '2025-04-28 08:53:00', '$input = $_GET[\'username\']\n$query = \"SELECT * FROM users WHERE username = ?\";\n$stmt = $pdo->prepare($query);\n$stmt->execute([$input]);', '{\"errors\": [\"Код не соответствует шаблону. Ожидается: SELECT * FROM users WHERE username = \'\'{{input}}\'\'\", \"Ошибка шаблона: не удалось определить имя процедуры.\"], \"feedback\": [], \"warnings\": []}'),
(398, 2, 1, '$input = $_GET[\'username\']\n$query = \"SELECT * FROM users WHERE username = \'\'\".$input.\"\'\'\";\n$stmt = $pdo->prepare($query);\n$stmt->execute([$input]);', 0, 0, '2025-04-28 08:53:31', '$input = $_GET[\'username\']\n$query = \"SELECT * FROM users WHERE username = \'\'\".$input.\"\'\'\";\n$stmt = $pdo->prepare($query);\n$stmt->execute([$input]);', '{\"errors\": [\"Код не соответствует шаблону. Ожидается: SELECT * FROM users WHERE username = \'\'{{input}}\'\'\", \"Ошибка шаблона: не удалось определить имя процедуры.\", \"Требуется полный цикл подготовленных выражений (prepare -> bind -> execute)\", \"Обязательный элемент отсутствует: \\\\?\"], \"feedback\": [\"Используйте связывание параметров через prepare() и execute()\"], \"warnings\": []}'),
(399, 2, 1, '$stmt = $pdo->prepare(\'SELECT * FROM users WHERE username = :username\');\n$stmt->bindParam(\':username\', $username, PDO::PARAM_STR);\n$stmt->execute();\n', 0, 0, '2025-04-28 08:54:59', '$stmt = $pdo->prepare(\'SELECT * FROM users WHERE username = :username\');\n$stmt->bindParam(\':username\', $username, PDO::PARAM_STR);\n$stmt->execute();\n', '{\"errors\": [\"Код не соответствует шаблону. Ожидается: SELECT * FROM users WHERE username = \'\'{{input}}\'\'\", \"Ошибка шаблона: не удалось определить имя процедуры.\", \"Требуется полный цикл подготовленных выражений (prepare -> bind -> execute)\", \"Обязательный элемент отсутствует: \\\\?\"], \"feedback\": [\"Используйте связывание параметров через prepare() и execute()\"], \"warnings\": []}'),
(400, 2, 2, ' $stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 0, 0, '2025-04-28 19:18:48', ' $stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [\"Ожидается вызов хранимой процедуры (CALL), а не обычный SQL-запрос.\", \"Требуется SQL-оператор типа: CALL\", \"Ваш код должен вызывать процедуру \'getUserByName\' через CALL.\"], \"feedback\": [\"Проверьте правильность вызова процедуры \'getUserByName\'.\"], \"warnings\": []}'),
(401, 2, 2, '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', 0, 0, '2025-04-29 09:06:32', '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', '{\"errors\": [\"Код не соответствует шаблону. Ожидается: CALL getUserByName({{input}})\"], \"feedback\": [], \"warnings\": []}'),
(402, 2, 2, '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', 1, 70, '2025-04-29 09:11:46', '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', '{\"errors\": [], \"feedback\": [\"Ваш SQL-запрос отличается от ожидаемого шаблона.\"], \"warnings\": []}'),
(403, 2, 2, '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', 1, 60, '2025-04-29 09:30:54', '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', '{\"errors\": [], \"feedback\": [\"Ваш SQL-запрос отличается от ожидаемого шаблона.\", \"Отсутствует обязательный элемент: `prepare`\", \"Отсутствует обязательный элемент: `\\\\?`\"], \"warnings\": []}'),
(404, 2, 2, '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', 1, 60, '2025-04-29 09:33:17', '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', '{\"errors\": [], \"feedback\": [\"Ваш SQL-запрос отличается от ожидаемого шаблона.\", \"Отсутствует обязательный элемент: `prepare`\", \"Отсутствует обязательный элемент: `\\\\?`\"], \"warnings\": []}'),
(405, 2, 2, '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', 1, 60, '2025-04-29 09:33:22', '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', '{\"errors\": [], \"feedback\": [\"Ваш SQL-запрос отличается от ожидаемого шаблона.\", \"Отсутствует обязательный элемент: `prepare`\", \"Отсутствует обязательный элемент: `\\\\?`\"], \"warnings\": []}'),
(406, 2, 2, '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', 1, 60, '2025-04-29 09:34:38', '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', '{\"errors\": [], \"feedback\": [\"Ваш SQL-запрос отличается от ожидаемого шаблона.\", \"Отсутствует обязательный элемент: `prepare`\", \"Отсутствует обязательный элемент: `\\\\?`\"], \"warnings\": []}'),
(407, 2, 2, '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', 1, 60, '2025-04-29 09:34:41', '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', '{\"errors\": [], \"feedback\": [\"Ваш SQL-запрос отличается от ожидаемого шаблона.\", \"Отсутствует обязательный элемент: `prepare`\", \"Отсутствует обязательный элемент: `\\\\?`\"], \"warnings\": []}'),
(408, 2, 2, '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', 1, 60, '2025-04-29 09:37:38', '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', '{\"errors\": [], \"feedback\": [\"Ваш SQL-запрос отличается от ожидаемого шаблона.\", \"Отсутствует обязательный элемент: `prepare`\", \"Отсутствует обязательный элемент: `\\\\?`\"], \"warnings\": []}'),
(409, 2, 2, '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', 1, 60, '2025-04-29 09:39:34', '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', '{\"errors\": [], \"feedback\": [\"Ваш SQL-запрос отличается от ожидаемого шаблона.\", \"Отсутствует обязательный элемент: `prepare`\", \"Отсутствует обязательный элемент: `\\\\?`\"], \"warnings\": []}'),
(410, 2, 2, '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', 0, 0, '2025-04-29 09:42:56', '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', '{\"errors\": [\"Обязательный элемент отсутствует: \\\\\\\\\\\\?\"], \"feedback\": [\"Ваш SQL-запрос отличается от ожидаемого шаблона.\", \"Отсутствует обязательный элемент: `\\\\\\\\\\\\?`\"], \"warnings\": []}'),
(411, 2, 2, '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', 0, 0, '2025-04-29 09:44:29', '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', '{\"errors\": [\"Обязательный элемент отсутствует: \\\\\\\\\\\\?\"], \"feedback\": [\"Ваш SQL-запрос отличается от ожидаемого шаблона.\", \"Отсутствует обязательный элемент: `\\\\\\\\\\\\?`\"], \"warnings\": []}'),
(412, 2, 2, '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', 0, 0, '2025-04-29 09:47:18', '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', '{\"errors\": [\"Обязательный элемент отсутствует: \\\\\\\\\\\\?\"], \"feedback\": [\"Ваш SQL-запрос отличается от ожидаемого шаблона.\", \"Отсутствует обязательный элемент: `\\\\\\\\\\\\?`\"], \"warnings\": []}'),
(413, 2, 2, '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', 0, 0, '2025-04-29 09:47:26', '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', '{\"errors\": [\"Обязательный элемент отсутствует: \\\\\\\\\\\\?\"], \"feedback\": [\"Ваш SQL-запрос отличается от ожидаемого шаблона.\", \"Отсутствует обязательный элемент: `\\\\\\\\\\\\?`\"], \"warnings\": []}'),
(414, 2, 2, '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', 0, 0, '2025-04-29 09:48:38', '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', '{\"errors\": [\"Обязательный элемент отсутствует: \\\\\\\\\\\\?\"], \"feedback\": [\"Ваш SQL-запрос отличается от ожидаемого шаблона.\", \"Отсутствует обязательный элемент: `\\\\\\\\\\\\?`\"], \"warnings\": []}'),
(415, 2, 2, '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', 0, 0, '2025-04-29 09:51:08', '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', '{\"errors\": [\"Обязательный элемент отсутствует: \\\\\\\\\\\\?\"], \"feedback\": [\"Ваш SQL-запрос отличается от ожидаемого шаблона.\", \"Отсутствует обязательный элемент: `\\\\\\\\\\\\?`\"], \"warnings\": []}'),
(416, 2, 2, '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', 0, 0, '2025-04-29 09:51:15', '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', '{\"errors\": [\"Обязательный элемент отсутствует: \\\\\\\\\\\\?\"], \"feedback\": [\"Ваш SQL-запрос отличается от ожидаемого шаблона.\", \"Отсутствует обязательный элемент: `\\\\\\\\\\\\?`\"], \"warnings\": []}'),
(417, 2, 2, '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', 0, 0, '2025-04-29 09:52:46', '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', '{\"errors\": [\"Ваш SQL-запрос отличается от ожидаемого шаблона.\", \"Обязательный элемент отсутствует: \\\\\\\\\\\\?\"], \"feedback\": [\"Отсутствует обязательный элемент: `\\\\\\\\\\\\?`\"], \"warnings\": []}'),
(418, 2, 2, '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', 0, 0, '2025-04-29 09:54:32', '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', '{\"errors\": [\"Ваш SQL-запрос отличается от ожидаемого шаблона.\", \"Обязательный элемент отсутствует: \\\\\\\\\\\\?\"], \"feedback\": [\"Отсутствует обязательный элемент: `\\\\\\\\\\\\?`\"], \"warnings\": []}'),
(419, 2, 2, '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', 0, 0, '2025-04-29 09:56:04', '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', '{\"errors\": [\"Ваш SQL-запрос отличается от ожидаемого шаблона.\", \"Обязательный элемент отсутствует: \\\\\\\\\\\\?\"], \"feedback\": [\"Отсутствует обязательный элемент: `\\\\\\\\\\\\?`\"], \"warnings\": []}'),
(420, 2, 2, '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', 0, 0, '2025-04-29 09:56:12', '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', '{\"errors\": [\"Ваш SQL-запрос отличается от ожидаемого шаблона.\", \"Обязательный элемент отсутствует: \\\\\\\\\\\\?\"], \"feedback\": [\"Отсутствует обязательный элемент: `\\\\\\\\\\\\?`\"], \"warnings\": []}'),
(421, 2, 2, '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', 0, 0, '2025-04-29 09:58:05', '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', '{\"errors\": [\"Обязательный элемент отсутствует: \\\\\\\\\\\\?\"], \"feedback\": [\"Отсутствует обязательный элемент: `\\\\\\\\\\\\?`\"], \"warnings\": []}'),
(422, 2, 2, ' $stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 0, 0, '2025-04-29 09:58:40', ' $stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [\"Требуется SQL-оператор типа: CALL\", \"Обязательный элемент отсутствует: \\\\\\\\\\\\?\"], \"feedback\": [\"Отсутствует обязательный элемент: `\\\\\\\\\\\\?`\"], \"warnings\": []}'),
(423, 2, 2, ' $stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 0, 0, '2025-04-29 10:01:27', ' $stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [\"Требуется SQL-оператор типа: CALL\", \"Обязательный элемент отсутствует: \\\\\\\\\\\\?\"], \"feedback\": [\"Отсутствует обязательный элемент: `\\\\\\\\\\\\?`\"], \"warnings\": []}'),
(424, 2, 2, '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', 0, 0, '2025-04-29 10:01:38', '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', '{\"errors\": [\"Обязательный элемент отсутствует: \\\\\\\\\\\\?\"], \"feedback\": [\"Отсутствует обязательный элемент: `\\\\\\\\\\\\?`\"], \"warnings\": []}'),
(425, 2, 2, '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', 0, 0, '2025-04-29 10:02:26', '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', '{\"errors\": [\"Обязательный элемент отсутствует: \\\\\\\\\\\\?\"], \"feedback\": [\"Отсутствует обязательный элемент: `\\\\\\\\\\\\?`\"], \"warnings\": []}'),
(426, 2, 2, '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', 1, 100, '2025-04-29 10:04:27', '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(427, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 0, 100, '2025-04-29 10:04:37', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [\"Требуется SQL-оператор типа: CALL\"], \"feedback\": [], \"warnings\": []}'),
(428, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 0, 100, '2025-04-29 10:05:53', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [\"Требуется SQL-оператор типа: CALL\"], \"feedback\": [], \"warnings\": []}'),
(429, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 0, 100, '2025-04-29 10:06:04', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [\"Требуется SQL-оператор типа: CALL\"], \"feedback\": [], \"warnings\": []}'),
(430, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 0, 0, '2025-04-29 10:10:17', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [\"Требуется SQL-оператор типа: CALL\"], \"feedback\": [], \"warnings\": []}'),
(431, 2, 1, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 0, 0, '2025-04-29 10:10:28', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [\"Обязательный элемент отсутствует: prepare\\\\\\\\\\\\(\"], \"feedback\": [\"Отсутствует обязательный элемент: `prepare\\\\\\\\\\\\(`\"], \"warnings\": []}'),
(432, 2, 8, ' $stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 0, 50, '2025-04-29 10:11:10', ' $stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [\"Требуется реализация белого списка для входных данных\"], \"feedback\": [\"Ожидается наличие конструкции: `ORDER BY`\", \"Используйте in_array() с предопределенным списком допустимых значений\"], \"warnings\": []}'),
(433, 2, 8, ' $column = $_GET[\'sort\'];\n$allowed_columns = [\'username\', \'email\', \'id\'];\n\n// Проверка через in_array\nif (in_array($column, $allowed_columns)) {\n    // Построение запроса с использованием белого списка для столбца\n    $query = \"SELECT * FROM users ORDER BY \" . $column; // Строка строится безопасно, так как $column проверено\n    $stmt = $conn->prepare($query); // Здесь не используется параметризация для имени столбца\n    $stmt->execute();\n    $result = $stmt->get_result();\n} else {\n    echo \"Недопустимое значение для сортировки.\";\n}', 0, 70, '2025-04-29 10:11:32', ' $column = $_GET[\'sort\'];\n$allowed_columns = [\'username\', \'email\', \'id\'];\n\n// Проверка через in_array\nif (in_array($column, $allowed_columns)) {\n    // Построение запроса с использованием белого списка для столбца\n    $query = \"SELECT * FROM users ORDER BY \" . $column; // Строка строится безопасно, так как $column проверено\n    $stmt = $conn->prepare($query); // Здесь не используется параметризация для имени столбца\n    $stmt->execute();\n    $result = $stmt->get_result();\n} else {\n    echo \"Недопустимое значение для сортировки.\";\n}', '{\"errors\": [\"Ваш SQL-запрос отличается от ожидаемого шаблона.\"], \"feedback\": [], \"warnings\": []}'),
(434, 2, 8, ' $column = $_GET[\'sort\'];\n$allowed_columns = [\'username\', \'email\', \'id\'];\nif (in_array($column, $allowed_columns)) {\n    $query = \"SELECT * FROM users ORDER BY \" . $column; \n    $stmt = $conn->prepare($query); \n    $stmt->execute();\n    $result = $stmt->get_result();\n} else {\n    echo \"Недопустимое значение для сортировки.\";\n}', 0, 70, '2025-04-29 10:12:04', ' $column = $_GET[\'sort\'];\n$allowed_columns = [\'username\', \'email\', \'id\'];\nif (in_array($column, $allowed_columns)) {\n    $query = \"SELECT * FROM users ORDER BY \" . $column; \n    $stmt = $conn->prepare($query); \n    $stmt->execute();\n    $result = $stmt->get_result();\n} else {\n    echo \"Недопустимое значение для сортировки.\";\n}', '{\"errors\": [\"Ваш SQL-запрос отличается от ожидаемого шаблона.\"], \"feedback\": [], \"warnings\": []}'),
(435, 2, 8, ' $column = $_GET[\'sort\'];\n$allowed_columns = [\'username\', \'email\', \'id\'];\nif (in_array($column, $allowed_columns)) {\n    $query = \"SELECT * FROM users ORDER BY \" . $column; \n    $stmt = $conn->prepare($query); \n    $stmt->execute();\n    $result = $stmt->get_result();\n} else {\n    echo \"Недопустимое значение для сортировки.\";\n}', 0, 70, '2025-04-29 10:16:16', ' $column = $_GET[\'sort\'];\n$allowed_columns = [\'username\', \'email\', \'id\'];\nif (in_array($column, $allowed_columns)) {\n    $query = \"SELECT * FROM users ORDER BY \" . $column; \n    $stmt = $conn->prepare($query); \n    $stmt->execute();\n    $result = $stmt->get_result();\n} else {\n    echo \"Недопустимое значение для сортировки.\";\n}', '{\"errors\": [\"Ваш SQL-запрос отличается от ожидаемого шаблона.\"], \"feedback\": [], \"warnings\": []}'),
(436, 2, 8, ' $column = $_GET[\'sort\'];\n$allowed_columns = [\'username\', \'email\', \'id\'];\nif (in_array($column, $allowed_columns)) {\n    $query = \"SELECT * FROM users ORDER BY \" . $column; \n    $stmt = $conn->prepare($query); \n    $stmt->execute();\n    $result = $stmt->get_result();\n} else {\n    echo \"Недопустимое значение для сортировки.\";\n}', 0, 70, '2025-04-29 10:16:18', ' $column = $_GET[\'sort\'];\n$allowed_columns = [\'username\', \'email\', \'id\'];\nif (in_array($column, $allowed_columns)) {\n    $query = \"SELECT * FROM users ORDER BY \" . $column; \n    $stmt = $conn->prepare($query); \n    $stmt->execute();\n    $result = $stmt->get_result();\n} else {\n    echo \"Недопустимое значение для сортировки.\";\n}', '{\"errors\": [\"Ваш SQL-запрос отличается от ожидаемого шаблона.\"], \"feedback\": [], \"warnings\": []}'),
(437, 2, 1, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-29 10:16:35', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(438, 2, 8, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 0, 50, '2025-04-29 10:17:43', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [\"Требуется реализация белого списка для входных данных\"], \"feedback\": [\"Ожидается наличие конструкции: `ORDER BY`\", \"Используйте in_array() с предопределенным списком допустимых значений\"], \"warnings\": []}'),
(439, 2, 8, 'column = $_GET[\'sort\'];\n$allowed_columns = [\'username\', \'email\', \'id\'];\n\n// Проверка через in_array\nif (in_array($column, $allowed_columns)) {\n    // Построение запроса с использованием белого списка для столбца\n    $query = \"SELECT * FROM users ORDER BY \" . $column; // Строка строится безопасно, так как $column проверено\n    $stmt = $conn->prepare($query); // Здесь не используется параметризация для имени столбца\n    $stmt->execute();\n    $result = $stmt->get_result();\n} else {\n    echo \"Недопустимое значение для сортировки.\";\n}', 0, 70, '2025-04-29 10:19:34', 'column = $_GET[\'sort\'];\n$allowed_columns = [\'username\', \'email\', \'id\'];\n\n// Проверка через in_array\nif (in_array($column, $allowed_columns)) {\n    // Построение запроса с использованием белого списка для столбца\n    $query = \"SELECT * FROM users ORDER BY \" . $column; // Строка строится безопасно, так как $column проверено\n    $stmt = $conn->prepare($query); // Здесь не используется параметризация для имени столбца\n    $stmt->execute();\n    $result = $stmt->get_result();\n} else {\n    echo \"Недопустимое значение для сортировки.\";\n}', '{\"errors\": [\"Ваш SQL-запрос отличается от ожидаемого шаблона.\"], \"feedback\": [], \"warnings\": []}'),
(440, 2, 8, '$allowedColumns = [\'username\', \'email\', \'created_at\'];\n$column = $_GET[\'sort\'] ?? \'username\';\n\nif (!in_array($column, $allowedColumns)) {\n    $column = \'username\';\n}\n\n$stmt = $pdo->prepare(\"SELECT * FROM users ORDER BY $column\");\n$stmt->execute();\n', 1, 100, '2025-04-29 10:19:48', '$allowedColumns = [\'username\', \'email\', \'created_at\'];\n$column = $_GET[\'sort\'] ?? \'username\';\n\nif (!in_array($column, $allowedColumns)) {\n    $column = \'username\';\n}\n\n$stmt = $pdo->prepare(\"SELECT * FROM users ORDER BY $column\");\n$stmt->execute();\n', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(441, 2, 1, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-29 10:27:35', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}');
INSERT INTO `user_attempts` (`id`, `user_id`, `assignment_id`, `attempt_code`, `is_success`, `score`, `created_at`, `code`, `details`) VALUES
(442, 2, 2, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 0, 0, '2025-04-29 10:27:43', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [\"Требуется SQL-оператор типа: CALL\"], \"feedback\": [\"Ожидается наличие конструкции: `parameterized_query`\", \"Ожидается наличие конструкции: `CALL`\"], \"warnings\": []}'),
(443, 2, 2, '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', 1, 90, '2025-04-29 10:28:38', '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', '{\"errors\": [], \"feedback\": [\"Ожидается наличие конструкции: `parameterized_query`\"], \"warnings\": []}'),
(444, 2, 2, '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', 1, 100, '2025-04-29 10:29:03', '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(445, 2, 8, ' $allowedColumns = [\'username\', \'email\', \'created_at\'];\n$column = $_GET[\'sort\'] ?? \'username\';\n\nif (!in_array($column, $allowedColumns)) {\n    $column = \'username\';\n}\n\n$stmt = $pdo->prepare(\"SELECT * FROM users ORDER BY $column\");\n$stmt->execute();', 0, 0, '2025-04-29 10:29:21', ' $allowedColumns = [\'username\', \'email\', \'created_at\'];\n$column = $_GET[\'sort\'] ?? \'username\';\n\nif (!in_array($column, $allowedColumns)) {\n    $column = \'username\';\n}\n\n$stmt = $pdo->prepare(\"SELECT * FROM users ORDER BY $column\");\n$stmt->execute();', '{\"errors\": [\"Обязательный элемент отсутствует: in_array\\\\\\\\s\\\\*\\\\\\\\\\\\(\"], \"feedback\": [\"Отсутствует обязательный элемент: `in_array\\\\\\\\s\\\\*\\\\\\\\\\\\(`\"], \"warnings\": []}'),
(446, 2, 8, '$allowedColumns = [\'username\', \'email\', \'created_at\'];\n$column = $_GET[\'sort\'] ?? \'username\';\n\nif (!in_array($column, $allowedColumns)) {\n    $column = \'username\';\n}\n', 0, 0, '2025-04-29 10:31:16', '$allowedColumns = [\'username\', \'email\', \'created_at\'];\n$column = $_GET[\'sort\'] ?? \'username\';\n\nif (!in_array($column, $allowedColumns)) {\n    $column = \'username\';\n}\n', '{\"errors\": [\"Требуется SQL-оператор типа: SELECT\", \"Обязательный элемент отсутствует: ORDER BY\", \"Обязательный элемент отсутствует: in_array\\\\\\\\s\\\\*\\\\\\\\\\\\(\"], \"feedback\": [\"Отсутствует обязательный элемент: `ORDER BY`\", \"Отсутствует обязательный элемент: `in_array\\\\\\\\s\\\\*\\\\\\\\\\\\(`\", \"Ожидается наличие конструкции: `SELECT`\", \"Ожидается наличие конструкции: `ORDER BY`\"], \"warnings\": []}'),
(447, 2, 8, ' $allowedColumns = [\'username\', \'email\', \'created_at\'];\n$column = $_GET[\'sort\'] ?? \'username\';\n\nif (!in_array($column, $allowedColumns)) {\n    $column = \'username\';\n}\n\n$stmt = $pdo->prepare(\"SELECT * FROM users ORDER BY $column\");\n$stmt->execute();', 0, 0, '2025-04-29 10:31:43', ' $allowedColumns = [\'username\', \'email\', \'created_at\'];\n$column = $_GET[\'sort\'] ?? \'username\';\n\nif (!in_array($column, $allowedColumns)) {\n    $column = \'username\';\n}\n\n$stmt = $pdo->prepare(\"SELECT * FROM users ORDER BY $column\");\n$stmt->execute();', '{\"errors\": [\"Обязательный элемент отсутствует: in_array\\\\\\\\s\\\\*\\\\\\\\\\\\(\"], \"feedback\": [\"Отсутствует обязательный элемент: `in_array\\\\\\\\s\\\\*\\\\\\\\\\\\(`\"], \"warnings\": []}'),
(448, 2, 8, ' $allowedColumns = [\'username\', \'email\', \'created_at\'];\n$column = $_GET[\'sort\'] ?? \'username\';\n\nif (!in_array($column, $allowedColumns)) {\n    $column = \'username\';\n}\n\n$stmt = $pdo->prepare(\"SELECT * FROM users ORDER BY $column\");\n$stmt->execute();', 1, 100, '2025-04-29 10:34:35', ' $allowedColumns = [\'username\', \'email\', \'created_at\'];\n$column = $_GET[\'sort\'] ?? \'username\';\n\nif (!in_array($column, $allowedColumns)) {\n    $column = \'username\';\n}\n\n$stmt = $pdo->prepare(\"SELECT * FROM users ORDER BY $column\");\n$stmt->execute();', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(449, 2, 5, '<script>alert(123)</script>', 0, 0, '2025-04-29 10:34:59', '<script>alert(123)</script>', '{\"errors\": [\"Слишком очевидный XSS payload: <script>alert(...)</script> не допускается.\"], \"feedback\": \"\", \"warnings\": []}'),
(450, 2, 5, '<img src=\"x\" onerror=\"alert(1)\">\n', 1, 100, '2025-04-29 10:35:15', '<img src=\"x\" onerror=\"alert(1)\">\n', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(451, 2, 6, '<img src=\"x\" onerror=\"alert(1)\">\n', 1, 100, '2025-04-29 10:35:29', '<img src=\"x\" onerror=\"alert(1)\">\n', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(452, 2, 7, '<img src=\"x\" onerror=\"alert(1)\">\n', 1, 100, '2025-04-29 10:36:56', '<img src=\"x\" onerror=\"alert(1)\">\n', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(453, 2, 7, '<img src=\"x\" onerror=\"alert(1)\">\n', 1, 100, '2025-04-29 10:41:34', '<img src=\"x\" onerror=\"alert(1)\">\n', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(454, 2, 7, '<img src=\"x\" onerror=\"alert(1)\">', 1, 100, '2025-04-29 10:55:21', '<img src=\"x\" onerror=\"alert(1)\">', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(455, 2, 7, '<img src=\"x\" onerror=\"alert(1)\">', 1, 100, '2025-04-29 10:56:03', '<img src=\"x\" onerror=\"alert(1)\">', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(456, 2, 7, '<div onmouseover=\"alert(1)\">Hover me</div>\n', 0, 60, '2025-04-29 10:57:55', '<div onmouseover=\"alert(1)\">Hover me</div>\n', '{\"errors\": [\"Не обнаружено DOM-XSS payload, например: `<img src=x onerror=alert(1)>`.\"], \"feedback\": \"\", \"warnings\": []}'),
(457, 2, 7, '%3Cimg%20src%3Dx%20onerror%3D%22alert(1)%22%3E\n', 0, 60, '2025-04-29 10:59:15', '%3Cimg%20src%3Dx%20onerror%3D%22alert(1)%22%3E\n', '{\"errors\": [\"Не обнаружено DOM-XSS payload, например: `<img src=x onerror=alert(1)>`.\"], \"feedback\": \"\", \"warnings\": []}'),
(458, 2, 7, '%3Cimg%20src%3Dx%20onerror%3D%22alert(1)%22%3E\n', 0, 60, '2025-04-29 11:00:08', '%3Cimg%20src%3Dx%20onerror%3D%22alert(1)%22%3E\n', '{\"errors\": [\"Не обнаружено DOM-XSS payload\"], \"feedback\": \"\", \"warnings\": []}'),
(459, 2, 7, 'dom_xss.html?msg=%3Cimg%20src%3Dx%20onerror%3D%22alert(1)%22%3E\n', 1, 100, '2025-04-29 11:01:27', 'dom_xss.html?msg=%3Cimg%20src%3Dx%20onerror%3D%22alert(1)%22%3E\n', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(460, 2, 10, 'htmlspecialchars($name)', 1, 100, '2025-04-29 11:40:25', 'htmlspecialchars($name)', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(461, 2, 10, '<?php\n$name = $_GET[\"name\"];\necho \"<h1>Welcome, $name!</h1>\";\n?>', 1, 100, '2025-04-29 12:25:39', '<?php\n$name = $_GET[\"name\"];\necho \"<h1>Welcome, $name!</h1>\";\n?>', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(462, 2, 10, '<?php\n$name = $_GET[\"name\"];\necho \"<h1>Welcome, $name!</h1>\";\n?>', 0, 30, '2025-04-29 12:28:19', '<?php\n$name = $_GET[\"name\"];\necho \"<h1>Welcome, $name!</h1>\";\n?>', '{\"errors\": [\"Не используется обязательная функция: htmlspecialchars\", \"Отсутствует HTML-экранирование\"], \"feedback\": \"\", \"warnings\": []}'),
(463, 2, 11, '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $comment = $_POST[\"comment\"];\n    file_put_contents(\"comments.txt\", $comment . \"\\n\", FILE_APPEND);\n}\n?>\n<form method=\"post\">\n    <textarea name=\"comment\"></textarea>\n    <button type=\"submit\">Submit</button>\n</form>', 0, 30, '2025-04-29 12:28:35', '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $comment = $_POST[\"comment\"];\n    file_put_contents(\"comments.txt\", $comment . \"\\n\", FILE_APPEND);\n}\n?>\n<form method=\"post\">\n    <textarea name=\"comment\"></textarea>\n    <button type=\"submit\">Submit</button>\n</form>', '{\"errors\": [\"Не используется обязательная функция: htmlspecialchars\", \"Отсутствует HTML-экранирование\"], \"feedback\": \"\", \"warnings\": []}'),
(464, 2, 2, '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', 1, 100, '2025-04-29 12:38:00', '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(465, 2, 10, '<?php\n$name = $_GET[\"name\"];\necho \"<h1>Welcome, $name!</h1>\";\n?>', 0, 30, '2025-04-29 12:38:12', '<?php\n$name = $_GET[\"name\"];\necho \"<h1>Welcome, $name!</h1>\";\n?>', '{\"errors\": [\"Не используется обязательная функция: htmlspecialchars\", \"Отсутствует HTML-экранирование\"], \"feedback\": \"\", \"warnings\": []}'),
(466, 5, 1, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-29 13:45:27', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(467, 5, 1, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-29 13:46:26', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(468, 5, 1, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-29 13:46:43', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(469, 5, 1, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-04-29 13:46:57', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(470, 2, 10, '<?php\n$name = $_GET[\"name\"];\necho \"<h1>Welcome, $name!</h1>\";\n?>', 0, 30, '2025-04-29 14:28:48', '<?php\n$name = $_GET[\"name\"];\necho \"<h1>Welcome, $name!</h1>\";\n?>', '{\"errors\": [\"Не используется обязательная функция: htmlspecialchars\", \"Отсутствует HTML-экранирование\"], \"feedback\": \"\", \"warnings\": []}'),
(471, 2, 10, '<?php\n$name = $_GET[\"name\"];\necho \"<h1>Welcome, \" . htmlspecialchars($name, ENT_QUOTES, \'UTF-8\') . \"!</h1>\";\n?>', 1, 100, '2025-05-05 08:21:18', '<?php\n$name = $_GET[\"name\"];\necho \"<h1>Welcome, \" . htmlspecialchars($name, ENT_QUOTES, \'UTF-8\') . \"!</h1>\";\n?>', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(472, 2, 11, '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $comment = $_POST[\"comment\"];\n    file_put_contents(\"comments.txt\", $comment . \"\\n\", FILE_APPEND);\n}\n?>\n<form method=\"post\">\n    <textarea name=\"comment\"></textarea>\n    <button type=\"submit\">Submit</button>\n</form>', 0, 30, '2025-05-05 08:22:08', '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $comment = $_POST[\"comment\"];\n    file_put_contents(\"comments.txt\", $comment . \"\\n\", FILE_APPEND);\n}\n?>\n<form method=\"post\">\n    <textarea name=\"comment\"></textarea>\n    <button type=\"submit\">Submit</button>\n</form>', '{\"errors\": [\"Не используется обязательная функция: htmlspecialchars\", \"Отсутствует HTML-экранирование\"], \"feedback\": \"\", \"warnings\": []}'),
(473, 2, 11, '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $comment = htmlspecialchars($_POST[\"comment\"], ENT_QUOTES, \'UTF-8\');\n    file_put_contents(\"comments.txt\", $comment . \"\\n\", FILE_APPEND);\n}\n$comments = file_exists(\"comments.txt\") ? file(\"comments.txt\", FILE_IGNORE_NEW_LINES) : [];\n?>\n<form method=\"post\">\n    <textarea name=\"comment\"></textarea>\n    <button type=\"submit\">Submit</button>\n</form>\n\n<h2>Comments:</h2>\n<?php foreach ($comments as $comment): ?>\n    <p><?= $comment ?></p>  \n<?php endforeach; ?>', 1, 100, '2025-05-05 08:22:35', '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $comment = htmlspecialchars($_POST[\"comment\"], ENT_QUOTES, \'UTF-8\');\n    file_put_contents(\"comments.txt\", $comment . \"\\n\", FILE_APPEND);\n}\n$comments = file_exists(\"comments.txt\") ? file(\"comments.txt\", FILE_IGNORE_NEW_LINES) : [];\n?>\n<form method=\"post\">\n    <textarea name=\"comment\"></textarea>\n    <button type=\"submit\">Submit</button>\n</form>\n\n<h2>Comments:</h2>\n<?php foreach ($comments as $comment): ?>\n    <p><?= $comment ?></p>  \n<?php endforeach; ?>', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(474, 2, 12, '<!DOCTYPE html>\n<html>\n<head>\n  <title>DOM XSS Example</title>\n</head>\n<body>\n  <p id=\"output\"></p>\n  <script>\n    const params = new URLSearchParams(window.location.search);\n    document.getElementById(\"output\").innerHTML = params.get(\"msg\");\n  </script>\n</body>\n</html>', 0, 80, '2025-05-05 08:22:55', '<!DOCTYPE html>\n<html>\n<head>\n  <title>DOM XSS Example</title>\n</head>\n<body>\n  <p id=\"output\"></p>\n  <script>\n    const params = new URLSearchParams(window.location.search);\n    document.getElementById(\"output\").innerHTML = params.get(\"msg\");\n  </script>\n</body>\n</html>', '{\"errors\": [\"Обнаружен опасный паттерн вывода: innerHTML\"], \"feedback\": \"\", \"warnings\": []}'),
(475, 2, 12, '<!DOCTYPE html>\n<html>\n<head>\n  <title>DOM XSS Example (Fixed)</title>\n</head>\n<body>\n  <p id=\"output\"></p>\n  <script>\n    const params = new URLSearchParams(window.location.search);\n    const msg = params.get(\"msg\");\n    document.getElementById(\"output\").textContent = msg;\n  </script>\n</body>\n</html>', 1, 100, '2025-05-05 08:23:42', '<!DOCTYPE html>\n<html>\n<head>\n  <title>DOM XSS Example (Fixed)</title>\n</head>\n<body>\n  <p id=\"output\"></p>\n  <script>\n    const params = new URLSearchParams(window.location.search);\n    const msg = params.get(\"msg\");\n    document.getElementById(\"output\").textContent = msg;\n  </script>\n</body>\n</html>', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(476, 2, 15, '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', 0, 0, '2025-05-05 08:48:57', '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', '{\"errors\": [\"Отсутствует генерация CSRF-токена\", \"Отсутствует проверка CSRF-токена\", \"Отсутствует CSRF-токен в форме\"], \"feedback\": \"\", \"warnings\": []}'),
(477, 2, 15, '<?php\nsession_start();\nif (empty($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    if (!isset($_POST[\'csrf_token\']) || $_POST[\'csrf_token\'] !== $_SESSION[\'csrf_token\']) {\n        die(\"Ошибка CSRF: Недействительный токен!\");\n    }\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n?>\n\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= htmlspecialchars($_SESSION[\'csrf_token\'], ENT_QUOTES, \'UTF-8\') ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', 0, 20, '2025-05-05 08:50:03', '<?php\nsession_start();\nif (empty($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    if (!isset($_POST[\'csrf_token\']) || $_POST[\'csrf_token\'] !== $_SESSION[\'csrf_token\']) {\n        die(\"Ошибка CSRF: Недействительный токен!\");\n    }\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n?>\n\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= htmlspecialchars($_SESSION[\'csrf_token\'], ENT_QUOTES, \'UTF-8\') ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', '{\"errors\": [\"Отсутствует генерация CSRF-токена\", \"Отсутствует проверка CSRF-токена\"], \"feedback\": \"\", \"warnings\": []}'),
(478, 2, 15, '<?php\nsession_start();\nif (empty($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    if (!isset($_POST[\'csrf_token\']) || $_POST[\'csrf_token\'] !== $_SESSION[\'csrf_token\']) {\n        die(\"Ошибка CSRF: Недействительный токен!\");\n    }\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n?>\n\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= htmlspecialchars($_SESSION[\'csrf_token\'], ENT_QUOTES, \'UTF-8\') ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', 1, 100, '2025-05-05 08:55:28', '<?php\nsession_start();\nif (empty($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    if (!isset($_POST[\'csrf_token\']) || $_POST[\'csrf_token\'] !== $_SESSION[\'csrf_token\']) {\n        die(\"Ошибка CSRF: Недействительный токен!\");\n    }\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n?>\n\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= htmlspecialchars($_SESSION[\'csrf_token\'], ENT_QUOTES, \'UTF-8\') ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(479, 2, 15, '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', 1, 100, '2025-05-05 08:55:39', '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(480, 2, 15, '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', 1, 100, '2025-05-05 08:57:59', '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(481, 2, 15, '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', 1, 100, '2025-05-05 09:01:48', '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(482, 2, 15, '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', 1, 100, '2025-05-05 09:02:04', '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(483, 2, 15, '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', 1, 100, '2025-05-05 09:05:04', '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(484, 2, 15, '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>\n', 1, 100, '2025-05-05 09:05:16', '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>\n', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(485, 2, 15, '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>\n', 0, 0, '2025-05-05 09:06:02', '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>\n', '{\"errors\": [\"Отсутствует генерация CSRF-токена\", \"Отсутствует проверка CSRF-токена\", \"Отсутствует CSRF-токен в форме\"], \"feedback\": \"\", \"warnings\": []}'),
(486, 2, 15, '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>\n', 0, 70, '2025-05-05 09:07:49', '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>\n', '{\"errors\": [\"Не добавлен CSRF-токен в форму\"], \"feedback\": \"\", \"warnings\": []}'),
(487, 2, 15, '<?php\nsession_start();\n\n// Генерация CSRF-токена, если его нет\nif (empty($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\n// Обработка POST-запроса\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка CSRF-токена\n    if (!isset($_POST[\'csrf_token\']) || $_POST[\'csrf_token\'] !== $_SESSION[\'csrf_token\']) {\n        die(\"Ошибка CSRF: Недействительный токен!\");\n    }\n\n    // Обработка перевода (если токен верный)\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n    \n    // Можно сгенерировать новый токен после успешной операции\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n?>\n\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= htmlspecialchars($_SESSION[\'csrf_token\'], ENT_QUOTES, \'UTF-8\') ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', 1, 100, '2025-05-05 09:08:03', '<?php\nsession_start();\n\n// Генерация CSRF-токена, если его нет\nif (empty($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\n// Обработка POST-запроса\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка CSRF-токена\n    if (!isset($_POST[\'csrf_token\']) || $_POST[\'csrf_token\'] !== $_SESSION[\'csrf_token\']) {\n        die(\"Ошибка CSRF: Недействительный токен!\");\n    }\n\n    // Обработка перевода (если токен верный)\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n    \n    // Можно сгенерировать новый токен после успешной операции\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n?>\n\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= htmlspecialchars($_SESSION[\'csrf_token\'], ENT_QUOTES, \'UTF-8\') ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(488, 2, 15, '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', 0, 70, '2025-05-05 09:08:14', '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', '{\"errors\": [\"Не добавлен CSRF-токен в форму\"], \"feedback\": \"\", \"warnings\": []}'),
(489, 2, 19, '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n  $amount = $_POST[\"amount\"];\n  $to = $_POST[\"to\"];\n  transferMoney($to, $amount);\n  echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n  <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n  <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n  <button type=\"submit\">Перевести</button>\n</form>', 0, 0, '2025-05-05 09:41:46', '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n  $amount = $_POST[\"amount\"];\n  $to = $_POST[\"to\"];\n  transferMoney($to, $amount);\n  echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n  <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n  <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n  <button type=\"submit\">Перевести</button>\n</form>', '{\"errors\": [\"Отсутствует генерация CSRF-токена в сессии\", \"Отсутствует CSRF-токен в форме\", \"Отсутствует проверка CSRF-токена на сервере\", \"Отсутствует атрибут SameSite для кук\", \"Отсутствует проверка HTTP Referer\", \"Не добавлен CSRF-токен в форму\"], \"feedback\": \"\", \"warnings\": []}'),
(490, 2, 19, '<?php\nsession_start();\nsetcookie(\'session_id\', session_id(), [\n    \'samesite\' => \'Strict\',\n    \'secure\' => false, // true на HTTPS\n    \'httponly\' => true,\n    \'path\' => \'/\',\n]);\nif (!isset($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка HTTP Referer\n    if (!isset($_SERVER[\"HTTP_REFERER\"]) || strpos($_SERVER[\"HTTP_REFERER\"], \"http://yourdomain.com\") !== 0) {\n        die(\"Неверный источник запроса.\");\n    }\n\n    // Проверка CSRF-токена\n    if (!isset($_POST[\"csrf_token\"]) || !hash_equals($_SESSION[\"csrf_token\"], $_POST[\"csrf_token\"])) {\n        die(\"Недействительный CSRF токен.\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\'csrf_token\'] ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>\n', 0, 10, '2025-05-05 09:44:30', '<?php\nsession_start();\nsetcookie(\'session_id\', session_id(), [\n    \'samesite\' => \'Strict\',\n    \'secure\' => false, // true на HTTPS\n    \'httponly\' => true,\n    \'path\' => \'/\',\n]);\nif (!isset($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка HTTP Referer\n    if (!isset($_SERVER[\"HTTP_REFERER\"]) || strpos($_SERVER[\"HTTP_REFERER\"], \"http://yourdomain.com\") !== 0) {\n        die(\"Неверный источник запроса.\");\n    }\n\n    // Проверка CSRF-токена\n    if (!isset($_POST[\"csrf_token\"]) || !hash_equals($_SESSION[\"csrf_token\"], $_POST[\"csrf_token\"])) {\n        die(\"Недействительный CSRF токен.\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\'csrf_token\'] ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>\n', '{\"errors\": [\"Отсутствует проверка CSRF-токена на сервере\", \"Отсутствует атрибут SameSite для кук\", \"Отсутствует проверка HTTP Referer\"], \"feedback\": \"\", \"warnings\": []}'),
(491, 2, 19, '<?php\nsession_start();\n\n// Альтернативный способ установки SameSite\nheader(\"Set-Cookie: session_id=\" . session_id() . \"; SameSite=Strict; HttpOnly; Path=/\");\n\nif (!isset($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка Referer\n    if (!isset($_SERVER[\"HTTP_REFERER\"]) || strpos($_SERVER[\"HTTP_REFERER\"], \"http://yourdomain.com\") !== 0) {\n        die(\"Неверный источник запроса.\");\n    }\n\n    // Проверка CSRF-токена\n    if (!isset($_POST[\"csrf_token\"]) || !hash_equals($_SESSION[\"csrf_token\"], $_POST[\"csrf_token\"])) {\n        die(\"Недействительный CSRF токен.\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\'csrf_token\'] ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>\n', 0, 40, '2025-05-05 09:47:55', '<?php\nsession_start();\n\n// Альтернативный способ установки SameSite\nheader(\"Set-Cookie: session_id=\" . session_id() . \"; SameSite=Strict; HttpOnly; Path=/\");\n\nif (!isset($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка Referer\n    if (!isset($_SERVER[\"HTTP_REFERER\"]) || strpos($_SERVER[\"HTTP_REFERER\"], \"http://yourdomain.com\") !== 0) {\n        die(\"Неверный источник запроса.\");\n    }\n\n    // Проверка CSRF-токена\n    if (!isset($_POST[\"csrf_token\"]) || !hash_equals($_SESSION[\"csrf_token\"], $_POST[\"csrf_token\"])) {\n        die(\"Недействительный CSRF токен.\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\'csrf_token\'] ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>\n', '{\"errors\": [\"Отсутствует проверка CSRF-токена на сервере\", \"Отсутствует проверка HTTP Referer\"], \"feedback\": \"\", \"warnings\": []}'),
(492, 2, 19, '<?php\nsession_start();\n\n// Альтернативный способ установки SameSite\nheader(\"Set-Cookie: session_id=\" . session_id() . \"; SameSite=Strict; HttpOnly; Path=/\");\n\nif (!isset($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка Referer\n    if (!isset($_SERVER[\"HTTP_REFERER\"]) || strpos($_SERVER[\"HTTP_REFERER\"], \"http://yourdomain.com\") !== 0) {\n        die(\"Неверный источник запроса.\");\n    }\n\n    // Проверка CSRF-токена\n    if (!isset($_POST[\"csrf_token\"]) || !hash_equals($_SESSION[\"csrf_token\"], $_POST[\"csrf_token\"])) {\n        die(\"Недействительный CSRF токен.\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\'csrf_token\'] ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>\n', 0, 40, '2025-05-05 09:53:39', '<?php\nsession_start();\n\n// Альтернативный способ установки SameSite\nheader(\"Set-Cookie: session_id=\" . session_id() . \"; SameSite=Strict; HttpOnly; Path=/\");\n\nif (!isset($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка Referer\n    if (!isset($_SERVER[\"HTTP_REFERER\"]) || strpos($_SERVER[\"HTTP_REFERER\"], \"http://yourdomain.com\") !== 0) {\n        die(\"Неверный источник запроса.\");\n    }\n\n    // Проверка CSRF-токена\n    if (!isset($_POST[\"csrf_token\"]) || !hash_equals($_SESSION[\"csrf_token\"], $_POST[\"csrf_token\"])) {\n        die(\"Недействительный CSRF токен.\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\'csrf_token\'] ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>\n', '{\"errors\": [\"Отсутствует безопасная проверка CSRF-токена (hash_equals)\", \"Отсутствует проверка HTTP Referer с использованием parse_url\"], \"feedback\": \"\", \"warnings\": []}'),
(493, 2, 19, '<?php\nsession_start();\n\n// Установка cookie с атрибутом SameSite\nheader(\"Set-Cookie: session_id=\" . session_id() . \"; SameSite=Strict; HttpOnly; Path=/\");\n\nif (!isset($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка Referer с использованием parse_url\n    if (!isset($_SERVER[\"HTTP_REFERER\"])) {\n        die(\"Отсутствует заголовок Referer.\");\n    }\n    $referer_host = parse_url($_SERVER[\"HTTP_REFERER\"], PHP_URL_HOST);\n    if ($referer_host !== \'yourdomain.com\') {  // Замените \'yourdomain.com\' на ваш домен\n        die(\"Неверный источник запроса.\");\n    }\n\n    // Проверка CSRF-токена с использованием hash_equals\n    if (!isset($_POST[\"csrf_token\"]) || !hash_equals($_SESSION[\"csrf_token\"], $_POST[\"csrf_token\"])) {\n        die(\"Недействительный CSRF токен.\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\'csrf_token\'] ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>\n', 0, 40, '2025-05-05 09:55:14', '<?php\nsession_start();\n\n// Установка cookie с атрибутом SameSite\nheader(\"Set-Cookie: session_id=\" . session_id() . \"; SameSite=Strict; HttpOnly; Path=/\");\n\nif (!isset($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка Referer с использованием parse_url\n    if (!isset($_SERVER[\"HTTP_REFERER\"])) {\n        die(\"Отсутствует заголовок Referer.\");\n    }\n    $referer_host = parse_url($_SERVER[\"HTTP_REFERER\"], PHP_URL_HOST);\n    if ($referer_host !== \'yourdomain.com\') {  // Замените \'yourdomain.com\' на ваш домен\n        die(\"Неверный источник запроса.\");\n    }\n\n    // Проверка CSRF-токена с использованием hash_equals\n    if (!isset($_POST[\"csrf_token\"]) || !hash_equals($_SESSION[\"csrf_token\"], $_POST[\"csrf_token\"])) {\n        die(\"Недействительный CSRF токен.\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\'csrf_token\'] ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>\n', '{\"errors\": [\"Отсутствует безопасная проверка CSRF-токена (hash_equals)\", \"Отсутствует проверка HTTP Referer с использованием parse_url\"], \"feedback\": \"\", \"warnings\": []}'),
(494, 2, 19, '<?php\nsession_start();\n\n// Установка cookie с атрибутом SameSite\nheader(\"Set-Cookie: session_id=\" . session_id() . \"; SameSite=Strict; HttpOnly; Path=/\");\n\nif (!isset($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка Referer с использованием parse_url\n    if (!isset($_SERVER[\"HTTP_REFERER\"])) {\n        die(\"Отсутствует заголовок Referer.\");\n    }\n    $referer_host = parse_url($_SERVER[\"HTTP_REFERER\"], PHP_URL_HOST);\n    if ($referer_host !== \'yourdomain.com\') {  // Замените \'yourdomain.com\' на ваш домен\n        die(\"Неверный источник запроса.\");\n    }\n\n    // Проверка CSRF-токена с использованием hash_equals\n    if (!isset($_POST[\"csrf_token\"]) || !hash_equals($_SESSION[\"csrf_token\"], $_POST[\"csrf_token\"])) {\n        die(\"Недействительный CSRF токен.\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\'csrf_token\'] ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>\n', 0, 40, '2025-05-05 09:57:59', '<?php\nsession_start();\n\n// Установка cookie с атрибутом SameSite\nheader(\"Set-Cookie: session_id=\" . session_id() . \"; SameSite=Strict; HttpOnly; Path=/\");\n\nif (!isset($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка Referer с использованием parse_url\n    if (!isset($_SERVER[\"HTTP_REFERER\"])) {\n        die(\"Отсутствует заголовок Referer.\");\n    }\n    $referer_host = parse_url($_SERVER[\"HTTP_REFERER\"], PHP_URL_HOST);\n    if ($referer_host !== \'yourdomain.com\') {  // Замените \'yourdomain.com\' на ваш домен\n        die(\"Неверный источник запроса.\");\n    }\n\n    // Проверка CSRF-токена с использованием hash_equals\n    if (!isset($_POST[\"csrf_token\"]) || !hash_equals($_SESSION[\"csrf_token\"], $_POST[\"csrf_token\"])) {\n        die(\"Недействительный CSRF токен.\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\'csrf_token\'] ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>\n', '{\"errors\": [\"Отсутствует безопасная проверка CSRF-токена (hash_equals)\", \"Отсутствует проверка HTTP Referer с использованием parse_url\"], \"feedback\": \"\", \"warnings\": []}'),
(495, 2, 19, '<?php\nsession_start();\n\n// Установка cookie с атрибутом SameSite\nheader(\"Set-Cookie: session_id=\" . session_id() . \"; SameSite=Strict; HttpOnly; Path=/\");\n\nif (!isset($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка Referer с использованием parse_url\n    if (!isset($_SERVER[\"HTTP_REFERER\"])) {\n        die(\"Отсутствует заголовок Referer.\");\n    }\n    $referer_host = parse_url($_SERVER[\"HTTP_REFERER\"], PHP_URL_HOST);\n    if ($referer_host !== \'yourdomain.com\') {  // Замените \'yourdomain.com\' на ваш домен\n        die(\"Неверный источник запроса.\");\n    }\n\n    // Проверка CSRF-токена с использованием hash_equals\n    if (!isset($_POST[\"csrf_token\"]) || !hash_equals($_SESSION[\"csrf_token\"], $_POST[\"csrf_token\"])) {\n        die(\"Недействительный CSRF токен.\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\'csrf_token\'] ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>\n', 0, 40, '2025-05-05 09:58:01', '<?php\nsession_start();\n\n// Установка cookie с атрибутом SameSite\nheader(\"Set-Cookie: session_id=\" . session_id() . \"; SameSite=Strict; HttpOnly; Path=/\");\n\nif (!isset($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка Referer с использованием parse_url\n    if (!isset($_SERVER[\"HTTP_REFERER\"])) {\n        die(\"Отсутствует заголовок Referer.\");\n    }\n    $referer_host = parse_url($_SERVER[\"HTTP_REFERER\"], PHP_URL_HOST);\n    if ($referer_host !== \'yourdomain.com\') {  // Замените \'yourdomain.com\' на ваш домен\n        die(\"Неверный источник запроса.\");\n    }\n\n    // Проверка CSRF-токена с использованием hash_equals\n    if (!isset($_POST[\"csrf_token\"]) || !hash_equals($_SESSION[\"csrf_token\"], $_POST[\"csrf_token\"])) {\n        die(\"Недействительный CSRF токен.\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\'csrf_token\'] ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>\n', '{\"errors\": [\"Отсутствует безопасная проверка CSRF-токена (hash_equals)\", \"Отсутствует проверка HTTP Referer с использованием parse_url\"], \"feedback\": \"\", \"warnings\": []}');
INSERT INTO `user_attempts` (`id`, `user_id`, `assignment_id`, `attempt_code`, `is_success`, `score`, `created_at`, `code`, `details`) VALUES
(496, 2, 19, '<?php\nsession_start();\n\n// Установка cookie с атрибутом SameSite\nheader(\"Set-Cookie: session_id=\" . session_id() . \"; SameSite=Strict; HttpOnly; Path=/\");\n\nif (!isset($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка Referer с использованием parse_url\n    if (!isset($_SERVER[\"HTTP_REFERER\"])) {\n        die(\"Отсутствует заголовок Referer.\");\n    }\n    $referer_host = parse_url($_SERVER[\"HTTP_REFERER\"], PHP_URL_HOST);\n    if ($referer_host !== \'yourdomain.com\') {  // Замените \'yourdomain.com\' на ваш домен\n        die(\"Неверный источник запроса.\");\n    }\n\n    // Проверка CSRF-токена с использованием hash_equals\n    if (!isset($_POST[\"csrf_token\"]) || !hash_equals($_SESSION[\"csrf_token\"], $_POST[\"csrf_token\"])) {\n        die(\"Недействительный CSRF токен.\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\'csrf_token\'] ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>\n', 0, 40, '2025-05-05 09:59:58', '<?php\nsession_start();\n\n// Установка cookie с атрибутом SameSite\nheader(\"Set-Cookie: session_id=\" . session_id() . \"; SameSite=Strict; HttpOnly; Path=/\");\n\nif (!isset($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка Referer с использованием parse_url\n    if (!isset($_SERVER[\"HTTP_REFERER\"])) {\n        die(\"Отсутствует заголовок Referer.\");\n    }\n    $referer_host = parse_url($_SERVER[\"HTTP_REFERER\"], PHP_URL_HOST);\n    if ($referer_host !== \'yourdomain.com\') {  // Замените \'yourdomain.com\' на ваш домен\n        die(\"Неверный источник запроса.\");\n    }\n\n    // Проверка CSRF-токена с использованием hash_equals\n    if (!isset($_POST[\"csrf_token\"]) || !hash_equals($_SESSION[\"csrf_token\"], $_POST[\"csrf_token\"])) {\n        die(\"Недействительный CSRF токен.\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\'csrf_token\'] ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>\n', '{\"errors\": [\"Отсутствует безопасная проверка CSRF-токена (hash_equals)\", \"Отсутствует проверка HTTP Referer с использованием parse_url\"], \"feedback\": \"\", \"warnings\": []}'),
(497, 2, 19, '<?php\nsession_start();\n\n// Установка cookie с атрибутом SameSite\nheader(\"Set-Cookie: session_id=\" . session_id() . \"; SameSite=Strict; HttpOnly; Path=/\");\n\nif (!isset($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка Referer с использованием parse_url\n    if (!isset($_SERVER[\"HTTP_REFERER\"])) {\n        die(\"Отсутствует заголовок Referer.\");\n    }\n    $referer_host = parse_url($_SERVER[\"HTTP_REFERER\"], PHP_URL_HOST);\n    if ($referer_host !== \'yourdomain.com\') {  // Замените \'yourdomain.com\' на ваш домен\n        die(\"Неверный источник запроса.\");\n    }\n\n    // Проверка CSRF-токена с использованием hash_equals\n    if (!isset($_POST[\"csrf_token\"]) || !hash_equals($_SESSION[\"csrf_token\"], $_POST[\"csrf_token\"])) {\n        die(\"Недействительный CSRF токен.\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\'csrf_token\'] ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>\n', 0, 10, '2025-05-05 10:02:43', '<?php\nsession_start();\n\n// Установка cookie с атрибутом SameSite\nheader(\"Set-Cookie: session_id=\" . session_id() . \"; SameSite=Strict; HttpOnly; Path=/\");\n\nif (!isset($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка Referer с использованием parse_url\n    if (!isset($_SERVER[\"HTTP_REFERER\"])) {\n        die(\"Отсутствует заголовок Referer.\");\n    }\n    $referer_host = parse_url($_SERVER[\"HTTP_REFERER\"], PHP_URL_HOST);\n    if ($referer_host !== \'yourdomain.com\') {  // Замените \'yourdomain.com\' на ваш домен\n        die(\"Неверный источник запроса.\");\n    }\n\n    // Проверка CSRF-токена с использованием hash_equals\n    if (!isset($_POST[\"csrf_token\"]) || !hash_equals($_SESSION[\"csrf_token\"], $_POST[\"csrf_token\"])) {\n        die(\"Недействительный CSRF токен.\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\'csrf_token\'] ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>\n', '{\"errors\": [\"Отсутствует безопасная проверка CSRF-токена (hash_equals)\", \"Отсутствует атрибут SameSite для кук\", \"Отсутствует проверка HTTP Referer с использованием parse_url\"], \"feedback\": \"\", \"warnings\": []}'),
(498, 2, 19, '<?php\nsession_start();\n\n// Установка cookie с атрибутом SameSite\nheader(\"Set-Cookie: session_id=\" . session_id() . \"; SameSite=Strict; HttpOnly; Path=/\");\n\nif (!isset($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка Referer с использованием parse_url\n    if (!isset($_SERVER[\"HTTP_REFERER\"])) {\n        die(\"Отсутствует заголовок Referer.\");\n    }\n    $referer_host = parse_url($_SERVER[\"HTTP_REFERER\"], PHP_URL_HOST);\n    if ($referer_host !== \'yourdomain.com\') {  // Замените \'yourdomain.com\' на ваш домен\n        die(\"Неверный источник запроса.\");\n    }\n\n    // Проверка CSRF-токена с использованием hash_equals\n    if (!isset($_POST[\"csrf_token\"]) || !hash_equals($_SESSION[\"csrf_token\"], $_POST[\"csrf_token\"])) {\n        die(\"Недействительный CSRF токен.\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\'csrf_token\'] ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>\n', 0, 40, '2025-05-05 10:05:25', '<?php\nsession_start();\n\n// Установка cookie с атрибутом SameSite\nheader(\"Set-Cookie: session_id=\" . session_id() . \"; SameSite=Strict; HttpOnly; Path=/\");\n\nif (!isset($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка Referer с использованием parse_url\n    if (!isset($_SERVER[\"HTTP_REFERER\"])) {\n        die(\"Отсутствует заголовок Referer.\");\n    }\n    $referer_host = parse_url($_SERVER[\"HTTP_REFERER\"], PHP_URL_HOST);\n    if ($referer_host !== \'yourdomain.com\') {  // Замените \'yourdomain.com\' на ваш домен\n        die(\"Неверный источник запроса.\");\n    }\n\n    // Проверка CSRF-токена с использованием hash_equals\n    if (!isset($_POST[\"csrf_token\"]) || !hash_equals($_SESSION[\"csrf_token\"], $_POST[\"csrf_token\"])) {\n        die(\"Недействительный CSRF токен.\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\'csrf_token\'] ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>\n', '{\"errors\": [\"Отсутствует безопасная проверка CSRF-токена (hash_equals)\", \"Отсутствует атрибут SameSite для кук\", \"Отсутствует проверка HTTP Referer с использованием parse_url\"], \"feedback\": \"\", \"warnings\": []}'),
(499, 2, 19, '<?php\nsession_start();\n\n// Установка cookie с атрибутом SameSite\nheader(\"Set-Cookie: session_id=\" . session_id() . \"; SameSite=Strict; HttpOnly; Path=/\");\n\nif (!isset($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка Referer с использованием parse_url\n    if (!isset($_SERVER[\"HTTP_REFERER\"])) {\n        die(\"Отсутствует заголовок Referer.\");\n    }\n    $referer_host = parse_url($_SERVER[\"HTTP_REFERER\"], PHP_URL_HOST);\n    if ($referer_host !== \'yourdomain.com\') {  // Замените \'yourdomain.com\' на ваш домен\n        die(\"Неверный источник запроса.\");\n    }\n\n    // Проверка CSRF-токена с использованием hash_equals\n    if (!isset($_POST[\"csrf_token\"]) || !hash_equals($_SESSION[\"csrf_token\"], $_POST[\"csrf_token\"])) {\n        die(\"Недействительный CSRF токен.\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\'csrf_token\'] ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>\n', 0, 40, '2025-05-05 10:05:26', '<?php\nsession_start();\n\n// Установка cookie с атрибутом SameSite\nheader(\"Set-Cookie: session_id=\" . session_id() . \"; SameSite=Strict; HttpOnly; Path=/\");\n\nif (!isset($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка Referer с использованием parse_url\n    if (!isset($_SERVER[\"HTTP_REFERER\"])) {\n        die(\"Отсутствует заголовок Referer.\");\n    }\n    $referer_host = parse_url($_SERVER[\"HTTP_REFERER\"], PHP_URL_HOST);\n    if ($referer_host !== \'yourdomain.com\') {  // Замените \'yourdomain.com\' на ваш домен\n        die(\"Неверный источник запроса.\");\n    }\n\n    // Проверка CSRF-токена с использованием hash_equals\n    if (!isset($_POST[\"csrf_token\"]) || !hash_equals($_SESSION[\"csrf_token\"], $_POST[\"csrf_token\"])) {\n        die(\"Недействительный CSRF токен.\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\'csrf_token\'] ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>\n', '{\"errors\": [\"Отсутствует безопасная проверка CSRF-токена (hash_equals)\", \"Отсутствует атрибут SameSite для кук\", \"Отсутствует проверка HTTP Referer с использованием parse_url\"], \"feedback\": \"\", \"warnings\": []}'),
(500, 2, 15, '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', 0, 90, '2025-05-05 10:05:47', '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', '{\"errors\": [\"Не добавлен CSRF-токен в форму\"], \"feedback\": \"\", \"warnings\": []}'),
(501, 2, 15, '<?php\nsession_start();\n\n// Генерация CSRF-токена, если его нет\nif (empty($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\n// Обработка POST-запроса\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка CSRF-токена\n    if (!isset($_POST[\'csrf_token\']) || $_POST[\'csrf_token\'] !== $_SESSION[\'csrf_token\']) {\n        die(\"Ошибка CSRF: Недействительный токен!\");\n    }\n\n    // Обработка перевода (если токен верный)\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n    \n    // Можно сгенерировать новый токен после успешной операции\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n?>\n\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= htmlspecialchars($_SESSION[\'csrf_token\'], ENT_QUOTES, \'UTF-8\') ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', 1, 100, '2025-05-05 10:06:16', '<?php\nsession_start();\n\n// Генерация CSRF-токена, если его нет\nif (empty($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\n// Обработка POST-запроса\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка CSRF-токена\n    if (!isset($_POST[\'csrf_token\']) || $_POST[\'csrf_token\'] !== $_SESSION[\'csrf_token\']) {\n        die(\"Ошибка CSRF: Недействительный токен!\");\n    }\n\n    // Обработка перевода (если токен верный)\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n    \n    // Можно сгенерировать новый токен после успешной операции\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n?>\n\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= htmlspecialchars($_SESSION[\'csrf_token\'], ENT_QUOTES, \'UTF-8\') ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(502, 2, 19, '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n  $amount = $_POST[\"amount\"];\n  $to = $_POST[\"to\"];\n  transferMoney($to, $amount);\n  echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n  <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n  <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n  <button type=\"submit\">Перевести</button>\n</form>', 0, 0, '2025-05-05 10:07:02', '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n  $amount = $_POST[\"amount\"];\n  $to = $_POST[\"to\"];\n  transferMoney($to, $amount);\n  echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n  <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n  <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n  <button type=\"submit\">Перевести</button>\n</form>', '{\"errors\": [\"Отсутствует генерация CSRF-токена в сессии\", \"Отсутствует CSRF-токен в форме\", \"Отсутствует безопасная проверка CSRF-токена (hash_equals)\", \"Отсутствует атрибут SameSite для кук\", \"Отсутствует проверка HTTP Referer с использованием parse_url\", \"Не добавлен CSRF-токен в форму\"], \"feedback\": \"\", \"warnings\": []}'),
(503, 2, 19, '<?php\nsession_start();\n\n// Установка cookie с атрибутом SameSite\nheader(\"Set-Cookie: session_id=\" . session_id() . \"; SameSite=Strict; HttpOnly; Path=/\");\n\nif (!isset($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка Referer с использованием parse_url\n    if (!isset($_SERVER[\"HTTP_REFERER\"])) {\n        die(\"Отсутствует заголовок Referer.\");\n    }\n    $referer_host = parse_url($_SERVER[\"HTTP_REFERER\"], PHP_URL_HOST);\n    if ($referer_host !== \'yourdomain.com\') {  // Замените \'yourdomain.com\' на ваш домен\n        die(\"Неверный источник запроса.\");\n    }\n\n    // Проверка CSRF-токена с использованием hash_equals\n    if (!isset($_POST[\"csrf_token\"]) || !hash_equals($_SESSION[\"csrf_token\"], $_POST[\"csrf_token\"])) {\n        die(\"Недействительный CSRF токен.\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\'csrf_token\'] ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>\n', 0, 40, '2025-05-05 10:07:39', '<?php\nsession_start();\n\n// Установка cookie с атрибутом SameSite\nheader(\"Set-Cookie: session_id=\" . session_id() . \"; SameSite=Strict; HttpOnly; Path=/\");\n\nif (!isset($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка Referer с использованием parse_url\n    if (!isset($_SERVER[\"HTTP_REFERER\"])) {\n        die(\"Отсутствует заголовок Referer.\");\n    }\n    $referer_host = parse_url($_SERVER[\"HTTP_REFERER\"], PHP_URL_HOST);\n    if ($referer_host !== \'yourdomain.com\') {  // Замените \'yourdomain.com\' на ваш домен\n        die(\"Неверный источник запроса.\");\n    }\n\n    // Проверка CSRF-токена с использованием hash_equals\n    if (!isset($_POST[\"csrf_token\"]) || !hash_equals($_SESSION[\"csrf_token\"], $_POST[\"csrf_token\"])) {\n        die(\"Недействительный CSRF токен.\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\'csrf_token\'] ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>\n', '{\"errors\": [\"Отсутствует безопасная проверка CSRF-токена (hash_equals)\", \"Отсутствует атрибут SameSite для кук\", \"Отсутствует проверка HTTP Referer с использованием parse_url\"], \"feedback\": \"\", \"warnings\": []}'),
(504, 2, 19, '<?php\nsession_start();\n\n// Установка cookie с атрибутом SameSite\nheader(\"Set-Cookie: session_id=\" . session_id() . \"; SameSite=Strict; HttpOnly; Path=/\");\n\nif (!isset($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка Referer с использованием parse_url\n    if (!isset($_SERVER[\"HTTP_REFERER\"])) {\n        die(\"Отсутствует заголовок Referer.\");\n    }\n    $referer_host = parse_url($_SERVER[\"HTTP_REFERER\"], PHP_URL_HOST);\n    if ($referer_host !== \'yourdomain.com\') {  // Замените \'yourdomain.com\' на ваш домен\n        die(\"Неверный источник запроса.\");\n    }\n\n    // Проверка CSRF-токена с использованием hash_equals\n    if (!isset($_POST[\"csrf_token\"]) || !hash_equals($_SESSION[\"csrf_token\"], $_POST[\"csrf_token\"])) {\n        die(\"Недействительный CSRF токен.\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\'csrf_token\'] ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>\n', 0, 40, '2025-05-05 10:10:08', '<?php\nsession_start();\n\n// Установка cookie с атрибутом SameSite\nheader(\"Set-Cookie: session_id=\" . session_id() . \"; SameSite=Strict; HttpOnly; Path=/\");\n\nif (!isset($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка Referer с использованием parse_url\n    if (!isset($_SERVER[\"HTTP_REFERER\"])) {\n        die(\"Отсутствует заголовок Referer.\");\n    }\n    $referer_host = parse_url($_SERVER[\"HTTP_REFERER\"], PHP_URL_HOST);\n    if ($referer_host !== \'yourdomain.com\') {  // Замените \'yourdomain.com\' на ваш домен\n        die(\"Неверный источник запроса.\");\n    }\n\n    // Проверка CSRF-токена с использованием hash_equals\n    if (!isset($_POST[\"csrf_token\"]) || !hash_equals($_SESSION[\"csrf_token\"], $_POST[\"csrf_token\"])) {\n        die(\"Недействительный CSRF токен.\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\'csrf_token\'] ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>\n', '{\"errors\": [\"Отсутствует безопасная проверка CSRF-токена (hash_equals)\", \"Отсутствует атрибут SameSite для кук\", \"Отсутствует проверка HTTP Referer с использованием parse_url\"], \"feedback\": \"\", \"warnings\": []}'),
(505, 2, 19, '<?php\nsession_start();\n\n// Установка cookie с атрибутом SameSite\nheader(\"Set-Cookie: session_id=\" . session_id() . \"; SameSite=Strict; HttpOnly; Path=/\");\n\nif (!isset($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка Referer с использованием parse_url\n    if (!isset($_SERVER[\"HTTP_REFERER\"])) {\n        die(\"Отсутствует заголовок Referer.\");\n    }\n    $referer_host = parse_url($_SERVER[\"HTTP_REFERER\"], PHP_URL_HOST);\n    if ($referer_host !== \'yourdomain.com\') {  // Замените \'yourdomain.com\' на ваш домен\n        die(\"Неверный источник запроса.\");\n    }\n\n    // Проверка CSRF-токена с использованием hash_equals\n    if (!isset($_POST[\"csrf_token\"]) || !hash_equals($_SESSION[\"csrf_token\"], $_POST[\"csrf_token\"])) {\n        die(\"Недействительный CSRF токен.\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\'csrf_token\'] ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>\n', 0, 40, '2025-05-05 10:10:09', '<?php\nsession_start();\n\n// Установка cookie с атрибутом SameSite\nheader(\"Set-Cookie: session_id=\" . session_id() . \"; SameSite=Strict; HttpOnly; Path=/\");\n\nif (!isset($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка Referer с использованием parse_url\n    if (!isset($_SERVER[\"HTTP_REFERER\"])) {\n        die(\"Отсутствует заголовок Referer.\");\n    }\n    $referer_host = parse_url($_SERVER[\"HTTP_REFERER\"], PHP_URL_HOST);\n    if ($referer_host !== \'yourdomain.com\') {  // Замените \'yourdomain.com\' на ваш домен\n        die(\"Неверный источник запроса.\");\n    }\n\n    // Проверка CSRF-токена с использованием hash_equals\n    if (!isset($_POST[\"csrf_token\"]) || !hash_equals($_SESSION[\"csrf_token\"], $_POST[\"csrf_token\"])) {\n        die(\"Недействительный CSRF токен.\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\'csrf_token\'] ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>\n', '{\"errors\": [\"Отсутствует безопасная проверка CSRF-токена (hash_equals)\", \"Отсутствует атрибут SameSite для кук\", \"Отсутствует проверка HTTP Referer с использованием parse_url\"], \"feedback\": \"\", \"warnings\": []}'),
(506, 2, 19, '<?php\nsession_start();\n\n// Установка cookie с атрибутом SameSite\nheader(\"Set-Cookie: session_id=\" . session_id() . \"; SameSite=Strict; HttpOnly; Path=/\");\n\nif (!isset($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка Referer с использованием parse_url\n    if (!isset($_SERVER[\"HTTP_REFERER\"])) {\n        die(\"Отсутствует заголовок Referer.\");\n    }\n    $referer_host = parse_url($_SERVER[\"HTTP_REFERER\"], PHP_URL_HOST);\n    if ($referer_host !== \'yourdomain.com\') {  // Замените \'yourdomain.com\' на ваш домен\n        die(\"Неверный источник запроса.\");\n    }\n\n    // Проверка CSRF-токена с использованием hash_equals\n    if (!isset($_POST[\"csrf_token\"]) || !hash_equals($_SESSION[\"csrf_token\"], $_POST[\"csrf_token\"])) {\n        die(\"Недействительный CSRF токен.\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\'csrf_token\'] ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>\n', 0, 40, '2025-05-05 10:10:10', '<?php\nsession_start();\n\n// Установка cookie с атрибутом SameSite\nheader(\"Set-Cookie: session_id=\" . session_id() . \"; SameSite=Strict; HttpOnly; Path=/\");\n\nif (!isset($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка Referer с использованием parse_url\n    if (!isset($_SERVER[\"HTTP_REFERER\"])) {\n        die(\"Отсутствует заголовок Referer.\");\n    }\n    $referer_host = parse_url($_SERVER[\"HTTP_REFERER\"], PHP_URL_HOST);\n    if ($referer_host !== \'yourdomain.com\') {  // Замените \'yourdomain.com\' на ваш домен\n        die(\"Неверный источник запроса.\");\n    }\n\n    // Проверка CSRF-токена с использованием hash_equals\n    if (!isset($_POST[\"csrf_token\"]) || !hash_equals($_SESSION[\"csrf_token\"], $_POST[\"csrf_token\"])) {\n        die(\"Недействительный CSRF токен.\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\'csrf_token\'] ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>\n', '{\"errors\": [\"Отсутствует безопасная проверка CSRF-токена (hash_equals)\", \"Отсутствует атрибут SameSite для кук\", \"Отсутствует проверка HTTP Referer с использованием parse_url\"], \"feedback\": \"\", \"warnings\": []}'),
(507, 2, 19, '<?php\nsession_start();\n\n// Установка cookie с атрибутом SameSite\nheader(\"Set-Cookie: session_id=\" . session_id() . \"; SameSite=Strict; HttpOnly; Path=/\");\n\nif (!isset($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка Referer с использованием parse_url\n    if (!isset($_SERVER[\"HTTP_REFERER\"])) {\n        die(\"Отсутствует заголовок Referer.\");\n    }\n    $referer_host = parse_url($_SERVER[\"HTTP_REFERER\"], PHP_URL_HOST);\n    if ($referer_host !== \'yourdomain.com\') {  // Замените \'yourdomain.com\' на ваш домен\n        die(\"Неверный источник запроса.\");\n    }\n\n    // Проверка CSRF-токена с использованием hash_equals\n    if (!isset($_POST[\"csrf_token\"]) || !hash_equals($_SESSION[\"csrf_token\"], $_POST[\"csrf_token\"])) {\n        die(\"Недействительный CSRF токен.\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\'csrf_token\'] ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>\n', 0, 10, '2025-05-05 10:12:27', '<?php\nsession_start();\n\n// Установка cookie с атрибутом SameSite\nheader(\"Set-Cookie: session_id=\" . session_id() . \"; SameSite=Strict; HttpOnly; Path=/\");\n\nif (!isset($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка Referer с использованием parse_url\n    if (!isset($_SERVER[\"HTTP_REFERER\"])) {\n        die(\"Отсутствует заголовок Referer.\");\n    }\n    $referer_host = parse_url($_SERVER[\"HTTP_REFERER\"], PHP_URL_HOST);\n    if ($referer_host !== \'yourdomain.com\') {  // Замените \'yourdomain.com\' на ваш домен\n        die(\"Неверный источник запроса.\");\n    }\n\n    // Проверка CSRF-токена с использованием hash_equals\n    if (!isset($_POST[\"csrf_token\"]) || !hash_equals($_SESSION[\"csrf_token\"], $_POST[\"csrf_token\"])) {\n        die(\"Недействительный CSRF токен.\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\'csrf_token\'] ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>\n', '{\"errors\": [\"Отсутствует безопасная проверка CSRF-токена (hash_equals)\", \"Отсутствует атрибут SameSite для кук\", \"Отсутствует проверка HTTP Referer с использованием parse_url\"], \"feedback\": \"\", \"warnings\": []}'),
(508, 2, 19, '<?php\nsession_start();\n\n// Установка cookie с атрибутом SameSite\nheader(\"Set-Cookie: session_id=\" . session_id() . \"; SameSite=Strict; HttpOnly; Path=/\");\n\nif (!isset($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка Referer с использованием parse_url\n    if (!isset($_SERVER[\"HTTP_REFERER\"])) {\n        die(\"Отсутствует заголовок Referer.\");\n    }\n    $referer_host = parse_url($_SERVER[\"HTTP_REFERER\"], PHP_URL_HOST);\n    if ($referer_host !== \'yourdomain.com\') {  // Замените \'yourdomain.com\' на ваш домен\n        die(\"Неверный источник запроса.\");\n    }\n\n    // Проверка CSRF-токена с использованием hash_equals\n    if (!isset($_POST[\"csrf_token\"]) || !hash_equals($_SESSION[\"csrf_token\"], $_POST[\"csrf_token\"])) {\n        die(\"Недействительный CSRF токен.\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\'csrf_token\'] ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>\n', 0, 40, '2025-05-05 10:12:40', '<?php\nsession_start();\n\n// Установка cookie с атрибутом SameSite\nheader(\"Set-Cookie: session_id=\" . session_id() . \"; SameSite=Strict; HttpOnly; Path=/\");\n\nif (!isset($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка Referer с использованием parse_url\n    if (!isset($_SERVER[\"HTTP_REFERER\"])) {\n        die(\"Отсутствует заголовок Referer.\");\n    }\n    $referer_host = parse_url($_SERVER[\"HTTP_REFERER\"], PHP_URL_HOST);\n    if ($referer_host !== \'yourdomain.com\') {  // Замените \'yourdomain.com\' на ваш домен\n        die(\"Неверный источник запроса.\");\n    }\n\n    // Проверка CSRF-токена с использованием hash_equals\n    if (!isset($_POST[\"csrf_token\"]) || !hash_equals($_SESSION[\"csrf_token\"], $_POST[\"csrf_token\"])) {\n        die(\"Недействительный CSRF токен.\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\'csrf_token\'] ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>\n', '{\"errors\": [\"Отсутствует безопасная проверка CSRF-токена (hash_equals)\", \"Отсутствует атрибут SameSite для кук\", \"Отсутствует проверка HTTP Referer с использованием parse_url\"], \"feedback\": \"\", \"warnings\": []}'),
(509, 2, 19, '<?php\nsession_start();\n\n// Установка cookie с атрибутом SameSite\nheader(\"Set-Cookie: session_id=\" . session_id() . \"; SameSite=Strict; HttpOnly; Path=/\");\n\nif (!isset($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка Referer с использованием parse_url\n    if (!isset($_SERVER[\"HTTP_REFERER\"])) {\n        die(\"Отсутствует заголовок Referer.\");\n    }\n    $referer_host = parse_url($_SERVER[\"HTTP_REFERER\"], PHP_URL_HOST);\n    if ($referer_host !== \'yourdomain.com\') {  // Замените \'yourdomain.com\' на ваш домен\n        die(\"Неверный источник запроса.\");\n    }\n\n    // Проверка CSRF-токена с использованием hash_equals\n    if (!isset($_POST[\"csrf_token\"]) || !hash_equals($_SESSION[\"csrf_token\"], $_POST[\"csrf_token\"])) {\n        die(\"Недействительный CSRF токен.\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\'csrf_token\'] ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>\n', 1, 100, '2025-05-05 10:15:53', '<?php\nsession_start();\n\n// Установка cookie с атрибутом SameSite\nheader(\"Set-Cookie: session_id=\" . session_id() . \"; SameSite=Strict; HttpOnly; Path=/\");\n\nif (!isset($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка Referer с использованием parse_url\n    if (!isset($_SERVER[\"HTTP_REFERER\"])) {\n        die(\"Отсутствует заголовок Referer.\");\n    }\n    $referer_host = parse_url($_SERVER[\"HTTP_REFERER\"], PHP_URL_HOST);\n    if ($referer_host !== \'yourdomain.com\') {  // Замените \'yourdomain.com\' на ваш домен\n        die(\"Неверный источник запроса.\");\n    }\n\n    // Проверка CSRF-токена с использованием hash_equals\n    if (!isset($_POST[\"csrf_token\"]) || !hash_equals($_SESSION[\"csrf_token\"], $_POST[\"csrf_token\"])) {\n        die(\"Недействительный CSRF токен.\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\'csrf_token\'] ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>\n', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(510, 2, 19, '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n  $amount = $_POST[\"amount\"];\n  $to = $_POST[\"to\"];\n  transferMoney($to, $amount);\n  echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n  <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n  <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n  <button type=\"submit\">Перевести</button>\n</form>\n', 0, 5, '2025-05-05 10:16:02', '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n  $amount = $_POST[\"amount\"];\n  $to = $_POST[\"to\"];\n  transferMoney($to, $amount);\n  echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n  <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n  <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n  <button type=\"submit\">Перевести</button>\n</form>\n', '{\"errors\": [\"Отсутствует генерация CSRF-токена в сессии\", \"Отсутствует CSRF-токен в форме\", \"Отсутствует безопасная проверка CSRF-токена (hash_equals)\", \"Отсутствует атрибут SameSite для кук\", \"Отсутствует проверка HTTP Referer с использованием parse_url\"], \"feedback\": \"\", \"warnings\": []}'),
(511, 2, 19, '<?php\nsession_start();\n\n// Установка cookie с атрибутом SameSite\nheader(\"Set-Cookie: session_id=\" . session_id() . \"; SameSite=Strict; HttpOnly; Path=/\");\n\nif (!isset($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка Referer с использованием parse_url\n    if (!isset($_SERVER[\"HTTP_REFERER\"])) {\n        die(\"Отсутствует заголовок Referer.\");\n    }\n    $referer_host = parse_url($_SERVER[\"HTTP_REFERER\"], PHP_URL_HOST);\n    if ($referer_host !== \'yourdomain.com\') {  // Замените \'yourdomain.com\' на ваш домен\n        die(\"Неверный источник запроса.\");\n    }\n\n    // Проверка CSRF-токена с использованием hash_equals\n    if (!isset($_POST[\"csrf_token\"]) || !hash_equals($_SESSION[\"csrf_token\"], $_POST[\"csrf_token\"])) {\n        die(\"Недействительный CSRF токен.\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\'csrf_token\'] ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>\n', 1, 100, '2025-05-05 10:16:10', '<?php\nsession_start();\n\n// Установка cookie с атрибутом SameSite\nheader(\"Set-Cookie: session_id=\" . session_id() . \"; SameSite=Strict; HttpOnly; Path=/\");\n\nif (!isset($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка Referer с использованием parse_url\n    if (!isset($_SERVER[\"HTTP_REFERER\"])) {\n        die(\"Отсутствует заголовок Referer.\");\n    }\n    $referer_host = parse_url($_SERVER[\"HTTP_REFERER\"], PHP_URL_HOST);\n    if ($referer_host !== \'yourdomain.com\') {  // Замените \'yourdomain.com\' на ваш домен\n        die(\"Неверный источник запроса.\");\n    }\n\n    // Проверка CSRF-токена с использованием hash_equals\n    if (!isset($_POST[\"csrf_token\"]) || !hash_equals($_SESSION[\"csrf_token\"], $_POST[\"csrf_token\"])) {\n        die(\"Недействительный CSRF токен.\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\'csrf_token\'] ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>\n', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(512, 2, 15, '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', 1, 100, '2025-05-05 10:16:32', '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(513, 2, 15, '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', 1, 100, '2025-05-05 10:20:04', '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(514, 2, 15, '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', 1, 100, '2025-05-05 10:20:05', '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(515, 2, 15, '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', 1, 100, '2025-05-05 10:20:16', '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(516, 2, 15, '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', 0, 90, '2025-05-05 10:20:23', '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', '{\"errors\": [\"Не добавлен CSRF-токен в форму\"], \"feedback\": \"\", \"warnings\": []}'),
(517, 2, 15, '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', 0, 10, '2025-05-05 10:23:15', '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', '{\"errors\": [\"Отсутствует генерация CSRF-токена в сессии\", \"Отсутствует CSRF-токен в форме\", \"Отсутствует безопасная проверка CSRF-токена (hash_equals)\", \"Отсутствует атрибут SameSite для кук\", \"Не добавлен CSRF-токен в форму\"], \"feedback\": \"\", \"warnings\": []}'),
(518, 2, 15, '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', 0, 20, '2025-05-05 10:23:36', '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', '{\"errors\": [\"Отсутствует генерация CSRF-токена в сессии\", \"Отсутствует CSRF-токен в форме\", \"Отсутствует безопасная проверка CSRF-токена (hash_equals)\", \"Отсутствует атрибут SameSite для кук\"], \"feedback\": \"\", \"warnings\": []}');
INSERT INTO `user_attempts` (`id`, `user_id`, `assignment_id`, `attempt_code`, `is_success`, `score`, `created_at`, `code`, `details`) VALUES
(519, 2, 15, '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', 0, 20, '2025-05-05 10:23:36', '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', '{\"errors\": [\"Отсутствует генерация CSRF-токена в сессии\", \"Отсутствует CSRF-токен в форме\", \"Отсутствует безопасная проверка CSRF-токена (hash_equals)\", \"Отсутствует атрибут SameSite для кук\"], \"feedback\": \"\", \"warnings\": []}'),
(520, 2, 15, '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', 0, 20, '2025-05-05 10:23:37', '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', '{\"errors\": [\"Отсутствует генерация CSRF-токена в сессии\", \"Отсутствует CSRF-токен в форме\", \"Отсутствует безопасная проверка CSRF-токена (hash_equals)\", \"Отсутствует атрибут SameSite для кук\"], \"feedback\": \"\", \"warnings\": []}'),
(521, 2, 15, '<?php\nsession_start();\n\n// Генерация CSRF-токена, если его нет\nif (empty($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\n// Обработка POST-запроса\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка CSRF-токена\n    if (!isset($_POST[\'csrf_token\']) || $_POST[\'csrf_token\'] !== $_SESSION[\'csrf_token\']) {\n        die(\"Ошибка CSRF: Недействительный токен!\");\n    }\n\n    // Обработка перевода (если токен верный)\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n    \n    // Можно сгенерировать новый токен после успешной операции\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n?>\n\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= htmlspecialchars($_SESSION[\'csrf_token\'], ENT_QUOTES, \'UTF-8\') ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', 0, 55, '2025-05-05 10:24:39', '<?php\nsession_start();\n\n// Генерация CSRF-токена, если его нет\nif (empty($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\n// Обработка POST-запроса\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка CSRF-токена\n    if (!isset($_POST[\'csrf_token\']) || $_POST[\'csrf_token\'] !== $_SESSION[\'csrf_token\']) {\n        die(\"Ошибка CSRF: Недействительный токен!\");\n    }\n\n    // Обработка перевода (если токен верный)\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n    \n    // Можно сгенерировать новый токен после успешной операции\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n?>\n\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= htmlspecialchars($_SESSION[\'csrf_token\'], ENT_QUOTES, \'UTF-8\') ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', '{\"errors\": [\"Отсутствует безопасная проверка CSRF-токена (hash_equals)\", \"Отсутствует атрибут SameSite для кук\"], \"feedback\": \"\", \"warnings\": []}'),
(522, 2, 19, '<?php\nsession_start();\n\n// Установка cookie с атрибутом SameSite\nheader(\"Set-Cookie: session_id=\" . session_id() . \"; SameSite=Strict; HttpOnly; Path=/\");\n\nif (!isset($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка Referer с использованием parse_url\n    if (!isset($_SERVER[\"HTTP_REFERER\"])) {\n        die(\"Отсутствует заголовок Referer.\");\n    }\n    $referer_host = parse_url($_SERVER[\"HTTP_REFERER\"], PHP_URL_HOST);\n    if ($referer_host !== \'yourdomain.com\') {  // Замените \'yourdomain.com\' на ваш домен\n        die(\"Неверный источник запроса.\");\n    }\n\n    // Проверка CSRF-токена с использованием hash_equals\n    if (!isset($_POST[\"csrf_token\"]) || !hash_equals($_SESSION[\"csrf_token\"], $_POST[\"csrf_token\"])) {\n        die(\"Недействительный CSRF токен.\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\'csrf_token\'] ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', 1, 100, '2025-05-05 10:25:47', '<?php\nsession_start();\n\n// Установка cookie с атрибутом SameSite\nheader(\"Set-Cookie: session_id=\" . session_id() . \"; SameSite=Strict; HttpOnly; Path=/\");\n\nif (!isset($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка Referer с использованием parse_url\n    if (!isset($_SERVER[\"HTTP_REFERER\"])) {\n        die(\"Отсутствует заголовок Referer.\");\n    }\n    $referer_host = parse_url($_SERVER[\"HTTP_REFERER\"], PHP_URL_HOST);\n    if ($referer_host !== \'yourdomain.com\') {  // Замените \'yourdomain.com\' на ваш домен\n        die(\"Неверный источник запроса.\");\n    }\n\n    // Проверка CSRF-токена с использованием hash_equals\n    if (!isset($_POST[\"csrf_token\"]) || !hash_equals($_SESSION[\"csrf_token\"], $_POST[\"csrf_token\"])) {\n        die(\"Недействительный CSRF токен.\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\'csrf_token\'] ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(523, 2, 19, '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n  $amount = $_POST[\"amount\"];\n  $to = $_POST[\"to\"];\n  transferMoney($to, $amount);\n  echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n  <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n  <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n  <button type=\"submit\">Перевести</button>\n</form>', 0, 5, '2025-05-05 10:25:59', '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n  $amount = $_POST[\"amount\"];\n  $to = $_POST[\"to\"];\n  transferMoney($to, $amount);\n  echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n  <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n  <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n  <button type=\"submit\">Перевести</button>\n</form>', '{\"errors\": [\"Отсутствует генерация CSRF-токена в сессии\", \"Отсутствует CSRF-токен в форме\", \"Отсутствует безопасная проверка CSRF-токена (hash_equals)\", \"Отсутствует атрибут SameSite для кук\", \"Отсутствует проверка HTTP Referer с использованием parse_url\"], \"feedback\": \"\", \"warnings\": []}'),
(524, 2, 15, 'В форме перевода средств отсутствует защита от CSRF-атак. Добавьте в неё CSRF-токен и реализуйте проверку его на стороне сервера.\nШаблон: transfer_form.php\n\nПодсказка: Сгенерируйте CSRF-токен в сессии и добавьте его в скрытое поле формы. При получении POST-запроса сравните полученный токен с сохранённым.\n\n🛠 Код шаблона\n📋 Копировать\n<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', 0, 20, '2025-05-05 10:26:38', 'В форме перевода средств отсутствует защита от CSRF-атак. Добавьте в неё CSRF-токен и реализуйте проверку его на стороне сервера.\nШаблон: transfer_form.php\n\nПодсказка: Сгенерируйте CSRF-токен в сессии и добавьте его в скрытое поле формы. При получении POST-запроса сравните полученный токен с сохранённым.\n\n🛠 Код шаблона\n📋 Копировать\n<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', '{\"errors\": [\"Отсутствует генерация CSRF-токена в сессии\", \"Отсутствует CSRF-токен в форме\", \"Отсутствует безопасная проверка CSRF-токена (hash_equals)\", \"Отсутствует атрибут SameSite для кук\"], \"feedback\": \"\", \"warnings\": []}'),
(525, 2, 15, '<?php\nsession_start();\n\n// Генерация CSRF-токена, если его нет\nif (empty($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\n// Обработка POST-запроса\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка CSRF-токена\n    if (!isset($_POST[\'csrf_token\']) || $_POST[\'csrf_token\'] !== $_SESSION[\'csrf_token\']) {\n        die(\"Ошибка CSRF: Недействительный токен!\");\n    }\n\n    // Обработка перевода (если токен верный)\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n    \n    // Можно сгенерировать новый токен после успешной операции\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n?>\n\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= htmlspecialchars($_SESSION[\'csrf_token\'], ENT_QUOTES, \'UTF-8\') ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', 0, 55, '2025-05-05 10:27:16', '<?php\nsession_start();\n\n// Генерация CSRF-токена, если его нет\nif (empty($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\n// Обработка POST-запроса\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка CSRF-токена\n    if (!isset($_POST[\'csrf_token\']) || $_POST[\'csrf_token\'] !== $_SESSION[\'csrf_token\']) {\n        die(\"Ошибка CSRF: Недействительный токен!\");\n    }\n\n    // Обработка перевода (если токен верный)\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n    \n    // Можно сгенерировать новый токен после успешной операции\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n?>\n\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= htmlspecialchars($_SESSION[\'csrf_token\'], ENT_QUOTES, \'UTF-8\') ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', '{\"errors\": [\"Отсутствует безопасная проверка CSRF-токена (hash_equals)\", \"Отсутствует атрибут SameSite для кук\"], \"feedback\": \"\", \"warnings\": []}'),
(526, 2, 15, '<?php\nsession_set_cookie_params([\n    \'samesite\' => \'Strict\',\n    \'secure\' => true,\n    \'httponly\' => true\n]);\nsession_start();\n\nif (empty($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    if (\n        !isset($_POST[\'csrf_token\']) ||\n        !hash_equals($_SESSION[\'csrf_token\'], $_POST[\'csrf_token\'])\n    ) {\n        die(\"Ошибка CSRF: Недействительный токен!\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n?>\n\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= htmlspecialchars($_SESSION[\'csrf_token\'], ENT_QUOTES, \'UTF-8\') ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>\n', 0, 80, '2025-05-05 10:29:55', '<?php\nsession_set_cookie_params([\n    \'samesite\' => \'Strict\',\n    \'secure\' => true,\n    \'httponly\' => true\n]);\nsession_start();\n\nif (empty($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    if (\n        !isset($_POST[\'csrf_token\']) ||\n        !hash_equals($_SESSION[\'csrf_token\'], $_POST[\'csrf_token\'])\n    ) {\n        die(\"Ошибка CSRF: Недействительный токен!\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n?>\n\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= htmlspecialchars($_SESSION[\'csrf_token\'], ENT_QUOTES, \'UTF-8\') ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>\n', '{\"errors\": [\"Отсутствует атрибут SameSite для кук\"], \"feedback\": \"\", \"warnings\": []}'),
(527, 2, 15, '<?php\nsession_start();\n\n// Установим cookie с нужными атрибутами вручную\nsetcookie(session_name(), session_id(), [\n    \'samesite\' => \'Strict\',\n    \'secure\' => true,\n    \'httponly\' => true\n]);\n\nif (empty($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    if (\n        !isset($_POST[\'csrf_token\']) ||\n        !hash_equals($_SESSION[\'csrf_token\'], $_POST[\'csrf_token\'])\n    ) {\n        die(\"Ошибка CSRF: Недействительный токен!\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n?>\n\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= htmlspecialchars($_SESSION[\'csrf_token\'], ENT_QUOTES, \'UTF-8\') ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>\n', 0, 80, '2025-05-05 10:32:38', '<?php\nsession_start();\n\n// Установим cookie с нужными атрибутами вручную\nsetcookie(session_name(), session_id(), [\n    \'samesite\' => \'Strict\',\n    \'secure\' => true,\n    \'httponly\' => true\n]);\n\nif (empty($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    if (\n        !isset($_POST[\'csrf_token\']) ||\n        !hash_equals($_SESSION[\'csrf_token\'], $_POST[\'csrf_token\'])\n    ) {\n        die(\"Ошибка CSRF: Недействительный токен!\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n?>\n\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= htmlspecialchars($_SESSION[\'csrf_token\'], ENT_QUOTES, \'UTF-8\') ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>\n', '{\"errors\": [\"Отсутствует атрибут SameSite для кук\"], \"feedback\": \"\", \"warnings\": []}'),
(528, 2, 15, '<?php\nsession_start();\n\n// Установка cookie с атрибутом SameSite\nheader(\"Set-Cookie: session_id=\" . session_id() . \"; SameSite=Strict; HttpOnly; Path=/\");\n\nif (!isset($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка Referer с использованием parse_url\n    if (!isset($_SERVER[\"HTTP_REFERER\"])) {\n        die(\"Отсутствует заголовок Referer.\");\n    }\n    $referer_host = parse_url($_SERVER[\"HTTP_REFERER\"], PHP_URL_HOST);\n    if ($referer_host !== \'yourdomain.com\') {  // Замените \'yourdomain.com\' на ваш домен\n        die(\"Неверный источник запроса.\");\n    }\n\n    // Проверка CSRF-токена с использованием hash_equals\n    if (!isset($_POST[\"csrf_token\"]) || !hash_equals($_SESSION[\"csrf_token\"], $_POST[\"csrf_token\"])) {\n        die(\"Недействительный CSRF токен.\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\'csrf_token\'] ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', 1, 100, '2025-05-05 10:33:10', '<?php\nsession_start();\n\n// Установка cookie с атрибутом SameSite\nheader(\"Set-Cookie: session_id=\" . session_id() . \"; SameSite=Strict; HttpOnly; Path=/\");\n\nif (!isset($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка Referer с использованием parse_url\n    if (!isset($_SERVER[\"HTTP_REFERER\"])) {\n        die(\"Отсутствует заголовок Referer.\");\n    }\n    $referer_host = parse_url($_SERVER[\"HTTP_REFERER\"], PHP_URL_HOST);\n    if ($referer_host !== \'yourdomain.com\') {  // Замените \'yourdomain.com\' на ваш домен\n        die(\"Неверный источник запроса.\");\n    }\n\n    // Проверка CSRF-токена с использованием hash_equals\n    if (!isset($_POST[\"csrf_token\"]) || !hash_equals($_SESSION[\"csrf_token\"], $_POST[\"csrf_token\"])) {\n        die(\"Недействительный CSRF токен.\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\'csrf_token\'] ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(529, 2, 19, '<?php\nsession_start();\n\n// Установка cookie с атрибутом SameSite\nheader(\"Set-Cookie: session_id=\" . session_id() . \"; SameSite=Strict; HttpOnly; Path=/\");\n\nif (!isset($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка Referer с использованием parse_url\n    if (!isset($_SERVER[\"HTTP_REFERER\"])) {\n        die(\"Отсутствует заголовок Referer.\");\n    }\n    $referer_host = parse_url($_SERVER[\"HTTP_REFERER\"], PHP_URL_HOST);\n    if ($referer_host !== \'yourdomain.com\') {  // Замените \'yourdomain.com\' на ваш домен\n        die(\"Неверный источник запроса.\");\n    }\n\n    // Проверка CSRF-токена с использованием hash_equals\n    if (!isset($_POST[\"csrf_token\"]) || !hash_equals($_SESSION[\"csrf_token\"], $_POST[\"csrf_token\"])) {\n        die(\"Недействительный CSRF токен.\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\'csrf_token\'] ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', 1, 100, '2025-05-05 10:33:31', '<?php\nsession_start();\n\n// Установка cookie с атрибутом SameSite\nheader(\"Set-Cookie: session_id=\" . session_id() . \"; SameSite=Strict; HttpOnly; Path=/\");\n\nif (!isset($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка Referer с использованием parse_url\n    if (!isset($_SERVER[\"HTTP_REFERER\"])) {\n        die(\"Отсутствует заголовок Referer.\");\n    }\n    $referer_host = parse_url($_SERVER[\"HTTP_REFERER\"], PHP_URL_HOST);\n    if ($referer_host !== \'yourdomain.com\') {  // Замените \'yourdomain.com\' на ваш домен\n        die(\"Неверный источник запроса.\");\n    }\n\n    // Проверка CSRF-токена с использованием hash_equals\n    if (!isset($_POST[\"csrf_token\"]) || !hash_equals($_SESSION[\"csrf_token\"], $_POST[\"csrf_token\"])) {\n        die(\"Недействительный CSRF токен.\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\'csrf_token\'] ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(530, 2, 15, '\n<?php\nclass CsrfValidator implements ValidatorInterface {\n    public function validate(string $userCode, array $config): array {\n        $errors = [];\n        $score = 100;\n\n        // Проверка генерации CSRF-токена в сессии\n        if (isset($config[\'csrf\'])) {\n            // Генерация токена\n            if (!preg_match(\'/\\$_SESSION\\s*\\[\\s*[\\\'\"]csrf_token[\\\'\"]\\s*]\\s*=\\s*bin2hex\\s*\\(\\s*random_bytes\\s*\\(\\s*\\d+\\s*\\)\\s*\\)/i\', $userCode)) {\n                $errors[] = \"Отсутствует генерация CSRF-токена в сессии\";\n                $score -= 20;\n            }\n\n            // Токен в форме\n            if (!preg_match(\'/<input[^>]+name\\s*=\\s*[\\\'\"]csrf_token[\\\'\"]/i\', $userCode)) {\n                $errors[] = \"Отсутствует CSRF-токен в форме\";\n                $score -= 15;\n            }\n\n            // hash_equals сравнение\n            if (!preg_match(\'/hash_equals\\s*\\(\\s*\\$_SESSION\\s*\\[\\s*[\\\'\"]csrf_token[\\\'\"]\\s*]\\s*,\\s*\\$_POST\\s*\\[\\s*[\\\'\"]csrf_token[\\\'\"]\\s*]\\s*\\)/i\', $userCode)) {\n                $errors[] = \"Отсутствует безопасная проверка CSRF-токена (hash_equals)\";\n                $score -= 25;\n            }\n        }\n\n        // Проверка на атрибут SameSite для cookie\n        if (isset($config[\'check_samesite\'])) {\n            // Любой способ установки cookie с SameSite\n            if (\n                !preg_match(\'/header\\s*\\(\\s*[\\\'\"]Set-Cookie\\s*:\\s*[^;]+;\\s*SameSite=(Strict|Lax|None)/i\', $userCode) &&\n                !preg_match(\'/setcookie\\s*\\([\\s\\S]*?(SameSite\\s*=>\\s*[\\\'\"](Strict|Lax|None)[\\\'\"])/i\', $userCode)\n            ) {\n                $errors[] = \"Отсутствует атрибут SameSite для кук\";\n                $score -= 20;\n            }\n        }\n\n        // Проверка Referer с parse_url\n        if (isset($config[\'check_referer\'])) {\n            if (\n                !preg_match(\'/parse_url\\s*\\(\\s*\\$_SERVER\\s*\\[\\s*[\\\'\"]HTTP_REFERER[\\\'\"]\\s*]\\s*,\\s*PHP_URL_HOST\\s*\\)/i\', $userCode)\n            ) {\n                $errors[] = \"Отсутствует проверка HTTP Referer с использованием parse_url\";\n                $score -= 15;\n            }\n        }\n\n        // Экранирование XSS\n        if (isset($config[\'xss\'])) {\n            if (!preg_match(\'/htmlspecialchars\\s*\\(/i\', $userCode)) {\n                $errors[] = \"Отсутствует экранирование XSS\";\n                $score -= 10;\n            }\n        }\n\n        // Prepared statements для SQL\n        if (isset($config[\'sql_injection\'])) {\n            if (!preg_match(\'/->\\s*prepare\\s*\\(/i\', $userCode) && !preg_match(\'/->\\s*bind(Param|Value)\\s*\\(/i\', $userCode)) {\n                $errors[] = \"Отсутствует защита от SQL инъекций (использование prepared statements)\";\n                $score -= 20;\n            }\n        }\n\n        return [\n            \'is_valid\' => empty($errors),\n            \'errors\' => $errors,\n            \'score\' => max($score, 0),\n        ];\n    }\n}\n\n', 0, 20, '2025-05-05 10:39:39', '\n<?php\nclass CsrfValidator implements ValidatorInterface {\n    public function validate(string $userCode, array $config): array {\n        $errors = [];\n        $score = 100;\n\n        // Проверка генерации CSRF-токена в сессии\n        if (isset($config[\'csrf\'])) {\n            // Генерация токена\n            if (!preg_match(\'/\\$_SESSION\\s*\\[\\s*[\\\'\"]csrf_token[\\\'\"]\\s*]\\s*=\\s*bin2hex\\s*\\(\\s*random_bytes\\s*\\(\\s*\\d+\\s*\\)\\s*\\)/i\', $userCode)) {\n                $errors[] = \"Отсутствует генерация CSRF-токена в сессии\";\n                $score -= 20;\n            }\n\n            // Токен в форме\n            if (!preg_match(\'/<input[^>]+name\\s*=\\s*[\\\'\"]csrf_token[\\\'\"]/i\', $userCode)) {\n                $errors[] = \"Отсутствует CSRF-токен в форме\";\n                $score -= 15;\n            }\n\n            // hash_equals сравнение\n            if (!preg_match(\'/hash_equals\\s*\\(\\s*\\$_SESSION\\s*\\[\\s*[\\\'\"]csrf_token[\\\'\"]\\s*]\\s*,\\s*\\$_POST\\s*\\[\\s*[\\\'\"]csrf_token[\\\'\"]\\s*]\\s*\\)/i\', $userCode)) {\n                $errors[] = \"Отсутствует безопасная проверка CSRF-токена (hash_equals)\";\n                $score -= 25;\n            }\n        }\n\n        // Проверка на атрибут SameSite для cookie\n        if (isset($config[\'check_samesite\'])) {\n            // Любой способ установки cookie с SameSite\n            if (\n                !preg_match(\'/header\\s*\\(\\s*[\\\'\"]Set-Cookie\\s*:\\s*[^;]+;\\s*SameSite=(Strict|Lax|None)/i\', $userCode) &&\n                !preg_match(\'/setcookie\\s*\\([\\s\\S]*?(SameSite\\s*=>\\s*[\\\'\"](Strict|Lax|None)[\\\'\"])/i\', $userCode)\n            ) {\n                $errors[] = \"Отсутствует атрибут SameSite для кук\";\n                $score -= 20;\n            }\n        }\n\n        // Проверка Referer с parse_url\n        if (isset($config[\'check_referer\'])) {\n            if (\n                !preg_match(\'/parse_url\\s*\\(\\s*\\$_SERVER\\s*\\[\\s*[\\\'\"]HTTP_REFERER[\\\'\"]\\s*]\\s*,\\s*PHP_URL_HOST\\s*\\)/i\', $userCode)\n            ) {\n                $errors[] = \"Отсутствует проверка HTTP Referer с использованием parse_url\";\n                $score -= 15;\n            }\n        }\n\n        // Экранирование XSS\n        if (isset($config[\'xss\'])) {\n            if (!preg_match(\'/htmlspecialchars\\s*\\(/i\', $userCode)) {\n                $errors[] = \"Отсутствует экранирование XSS\";\n                $score -= 10;\n            }\n        }\n\n        // Prepared statements для SQL\n        if (isset($config[\'sql_injection\'])) {\n            if (!preg_match(\'/->\\s*prepare\\s*\\(/i\', $userCode) && !preg_match(\'/->\\s*bind(Param|Value)\\s*\\(/i\', $userCode)) {\n                $errors[] = \"Отсутствует защита от SQL инъекций (использование prepared statements)\";\n                $score -= 20;\n            }\n        }\n\n        return [\n            \'is_valid\' => empty($errors),\n            \'errors\' => $errors,\n            \'score\' => max($score, 0),\n        ];\n    }\n}\n\n', '{\"errors\": [\"Отсутствует генерация CSRF-токена в сессии\", \"Отсутствует CSRF-токен в форме\", \"Отсутствует безопасная проверка CSRF-токена (hash_equals)\", \"Отсутствует атрибут SameSite для кук\"], \"feedback\": \"\", \"warnings\": []}'),
(531, 2, 15, '\n<?php\nclass CsrfValidator implements ValidatorInterface {\n    public function validate(string $userCode, array $config): array {\n        $errors = [];\n        $score = 100;\n\n        // Проверка генерации CSRF-токена в сессии\n        if (isset($config[\'csrf\'])) {\n            // Генерация токена\n            if (!preg_match(\'/\\$_SESSION\\s*\\[\\s*[\\\'\"]csrf_token[\\\'\"]\\s*]\\s*=\\s*bin2hex\\s*\\(\\s*random_bytes\\s*\\(\\s*\\d+\\s*\\)\\s*\\)/i\', $userCode)) {\n                $errors[] = \"Отсутствует генерация CSRF-токена в сессии\";\n                $score -= 20;\n            }\n\n            // Токен в форме\n            if (!preg_match(\'/<input[^>]+name\\s*=\\s*[\\\'\"]csrf_token[\\\'\"]/i\', $userCode)) {\n                $errors[] = \"Отсутствует CSRF-токен в форме\";\n                $score -= 15;\n            }\n\n            // hash_equals сравнение\n            if (!preg_match(\'/hash_equals\\s*\\(\\s*\\$_SESSION\\s*\\[\\s*[\\\'\"]csrf_token[\\\'\"]\\s*]\\s*,\\s*\\$_POST\\s*\\[\\s*[\\\'\"]csrf_token[\\\'\"]\\s*]\\s*\\)/i\', $userCode)) {\n                $errors[] = \"Отсутствует безопасная проверка CSRF-токена (hash_equals)\";\n                $score -= 25;\n            }\n        }\n\n        // Проверка на атрибут SameSite для cookie\n        if (isset($config[\'check_samesite\'])) {\n            // Любой способ установки cookie с SameSite\n            if (\n                !preg_match(\'/header\\s*\\(\\s*[\\\'\"]Set-Cookie\\s*:\\s*[^;]+;\\s*SameSite=(Strict|Lax|None)/i\', $userCode) &&\n                !preg_match(\'/setcookie\\s*\\([\\s\\S]*?(SameSite\\s*=>\\s*[\\\'\"](Strict|Lax|None)[\\\'\"])/i\', $userCode)\n            ) {\n                $errors[] = \"Отсутствует атрибут SameSite для кук\";\n                $score -= 20;\n            }\n        }\n\n        // Проверка Referer с parse_url\n        if (isset($config[\'check_referer\'])) {\n            if (\n                !preg_match(\'/parse_url\\s*\\(\\s*\\$_SERVER\\s*\\[\\s*[\\\'\"]HTTP_REFERER[\\\'\"]\\s*]\\s*,\\s*PHP_URL_HOST\\s*\\)/i\', $userCode)\n            ) {\n                $errors[] = \"Отсутствует проверка HTTP Referer с использованием parse_url\";\n                $score -= 15;\n            }\n        }\n\n        // Экранирование XSS\n        if (isset($config[\'xss\'])) {\n            if (!preg_match(\'/htmlspecialchars\\s*\\(/i\', $userCode)) {\n                $errors[] = \"Отсутствует экранирование XSS\";\n                $score -= 10;\n            }\n        }\n\n        // Prepared statements для SQL\n        if (isset($config[\'sql_injection\'])) {\n            if (!preg_match(\'/->\\s*prepare\\s*\\(/i\', $userCode) && !preg_match(\'/->\\s*bind(Param|Value)\\s*\\(/i\', $userCode)) {\n                $errors[] = \"Отсутствует защита от SQL инъекций (использование prepared statements)\";\n                $score -= 20;\n            }\n        }\n\n        return [\n            \'is_valid\' => empty($errors),\n            \'errors\' => $errors,\n            \'score\' => max($score, 0),\n        ];\n    }\n}\n\n', 0, 40, '2025-05-05 10:42:40', '\n<?php\nclass CsrfValidator implements ValidatorInterface {\n    public function validate(string $userCode, array $config): array {\n        $errors = [];\n        $score = 100;\n\n        // Проверка генерации CSRF-токена в сессии\n        if (isset($config[\'csrf\'])) {\n            // Генерация токена\n            if (!preg_match(\'/\\$_SESSION\\s*\\[\\s*[\\\'\"]csrf_token[\\\'\"]\\s*]\\s*=\\s*bin2hex\\s*\\(\\s*random_bytes\\s*\\(\\s*\\d+\\s*\\)\\s*\\)/i\', $userCode)) {\n                $errors[] = \"Отсутствует генерация CSRF-токена в сессии\";\n                $score -= 20;\n            }\n\n            // Токен в форме\n            if (!preg_match(\'/<input[^>]+name\\s*=\\s*[\\\'\"]csrf_token[\\\'\"]/i\', $userCode)) {\n                $errors[] = \"Отсутствует CSRF-токен в форме\";\n                $score -= 15;\n            }\n\n            // hash_equals сравнение\n            if (!preg_match(\'/hash_equals\\s*\\(\\s*\\$_SESSION\\s*\\[\\s*[\\\'\"]csrf_token[\\\'\"]\\s*]\\s*,\\s*\\$_POST\\s*\\[\\s*[\\\'\"]csrf_token[\\\'\"]\\s*]\\s*\\)/i\', $userCode)) {\n                $errors[] = \"Отсутствует безопасная проверка CSRF-токена (hash_equals)\";\n                $score -= 25;\n            }\n        }\n\n        // Проверка на атрибут SameSite для cookie\n        if (isset($config[\'check_samesite\'])) {\n            // Любой способ установки cookie с SameSite\n            if (\n                !preg_match(\'/header\\s*\\(\\s*[\\\'\"]Set-Cookie\\s*:\\s*[^;]+;\\s*SameSite=(Strict|Lax|None)/i\', $userCode) &&\n                !preg_match(\'/setcookie\\s*\\([\\s\\S]*?(SameSite\\s*=>\\s*[\\\'\"](Strict|Lax|None)[\\\'\"])/i\', $userCode)\n            ) {\n                $errors[] = \"Отсутствует атрибут SameSite для кук\";\n                $score -= 20;\n            }\n        }\n\n        // Проверка Referer с parse_url\n        if (isset($config[\'check_referer\'])) {\n            if (\n                !preg_match(\'/parse_url\\s*\\(\\s*\\$_SERVER\\s*\\[\\s*[\\\'\"]HTTP_REFERER[\\\'\"]\\s*]\\s*,\\s*PHP_URL_HOST\\s*\\)/i\', $userCode)\n            ) {\n                $errors[] = \"Отсутствует проверка HTTP Referer с использованием parse_url\";\n                $score -= 15;\n            }\n        }\n\n        // Экранирование XSS\n        if (isset($config[\'xss\'])) {\n            if (!preg_match(\'/htmlspecialchars\\s*\\(/i\', $userCode)) {\n                $errors[] = \"Отсутствует экранирование XSS\";\n                $score -= 10;\n            }\n        }\n\n        // Prepared statements для SQL\n        if (isset($config[\'sql_injection\'])) {\n            if (!preg_match(\'/->\\s*prepare\\s*\\(/i\', $userCode) && !preg_match(\'/->\\s*bind(Param|Value)\\s*\\(/i\', $userCode)) {\n                $errors[] = \"Отсутствует защита от SQL инъекций (использование prepared statements)\";\n                $score -= 20;\n            }\n        }\n\n        return [\n            \'is_valid\' => empty($errors),\n            \'errors\' => $errors,\n            \'score\' => max($score, 0),\n        ];\n    }\n}\n\n', '{\"errors\": [\"Отсутствует генерация CSRF-токена в сессии\", \"Отсутствует CSRF-токен в форме\", \"Отсутствует безопасная проверка CSRF-токена (hash_equals)\"], \"feedback\": \"\", \"warnings\": []}'),
(532, 2, 15, '<?php\nsession_start();\n\n// Генерация CSRF-токена, если его нет\nif (empty($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\n// Обработка POST-запроса\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка CSRF-токена\n    if (!isset($_POST[\'csrf_token\']) || $_POST[\'csrf_token\'] !== $_SESSION[\'csrf_token\']) {\n        die(\"Ошибка CSRF: Недействительный токен!\");\n    }\n\n    // Обработка перевода (если токен верный)\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n    \n    // Можно сгенерировать новый токен после успешной операции\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n?>\n\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= htmlspecialchars($_SESSION[\'csrf_token\'], ENT_QUOTES, \'UTF-8\') ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', 0, 75, '2025-05-05 10:42:49', '<?php\nsession_start();\n\n// Генерация CSRF-токена, если его нет\nif (empty($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\n// Обработка POST-запроса\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка CSRF-токена\n    if (!isset($_POST[\'csrf_token\']) || $_POST[\'csrf_token\'] !== $_SESSION[\'csrf_token\']) {\n        die(\"Ошибка CSRF: Недействительный токен!\");\n    }\n\n    // Обработка перевода (если токен верный)\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n    \n    // Можно сгенерировать новый токен после успешной операции\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n?>\n\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= htmlspecialchars($_SESSION[\'csrf_token\'], ENT_QUOTES, \'UTF-8\') ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', '{\"errors\": [\"Отсутствует безопасная проверка CSRF-токена (hash_equals)\"], \"feedback\": \"\", \"warnings\": []}'),
(533, 2, 15, '<?php\nsession_start();\n\n// Генерация CSRF-токена, если его нет\nif (empty($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\n// Обработка POST-запроса\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка CSRF-токена с использованием hash_equals\n    if (!isset($_POST[\'csrf_token\']) || !hash_equals($_SESSION[\'csrf_token\'], $_POST[\'csrf_token\'])) {\n        die(\"Ошибка CSRF: Недействительный токен!\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n\n    // Обновление токена\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n?>\n\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= htmlspecialchars($_SESSION[\'csrf_token\'], ENT_QUOTES, \'UTF-8\') ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>\n', 1, 100, '2025-05-05 10:44:47', '<?php\nsession_start();\n\n// Генерация CSRF-токена, если его нет\nif (empty($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\n// Обработка POST-запроса\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка CSRF-токена с использованием hash_equals\n    if (!isset($_POST[\'csrf_token\']) || !hash_equals($_SESSION[\'csrf_token\'], $_POST[\'csrf_token\'])) {\n        die(\"Ошибка CSRF: Недействительный токен!\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n\n    // Обновление токена\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n?>\n\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= htmlspecialchars($_SESSION[\'csrf_token\'], ENT_QUOTES, \'UTF-8\') ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>\n', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(534, 2, 15, '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>\n', 0, 40, '2025-05-05 10:45:17', '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>\n', '{\"errors\": [\"Отсутствует генерация CSRF-токена в сессии\", \"Отсутствует CSRF-токен в форме\", \"Отсутствует безопасная проверка CSRF-токена (hash_equals)\"], \"feedback\": \"\", \"warnings\": []}'),
(535, 2, 19, '2)<?php\nsession_start();\n\n// Установка cookie с атрибутом SameSite\nheader(\"Set-Cookie: session_id=\" . session_id() . \"; SameSite=Strict; HttpOnly; Path=/\");\n\nif (!isset($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка Referer с использованием parse_url\n    if (!isset($_SERVER[\"HTTP_REFERER\"])) {\n        die(\"Отсутствует заголовок Referer.\");\n    }\n    $referer_host = parse_url($_SERVER[\"HTTP_REFERER\"], PHP_URL_HOST);\n    if ($referer_host !== \'yourdomain.com\') {  // Замените \'yourdomain.com\' на ваш домен\n        die(\"Неверный источник запроса.\");\n    }\n\n    // Проверка CSRF-токена с использованием hash_equals\n    if (!isset($_POST[\"csrf_token\"]) || !hash_equals($_SESSION[\"csrf_token\"], $_POST[\"csrf_token\"])) {\n        die(\"Недействительный CSRF токен.\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\'csrf_token\'] ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', 1, 100, '2025-05-05 10:49:49', '2)<?php\nsession_start();\n\n// Установка cookie с атрибутом SameSite\nheader(\"Set-Cookie: session_id=\" . session_id() . \"; SameSite=Strict; HttpOnly; Path=/\");\n\nif (!isset($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка Referer с использованием parse_url\n    if (!isset($_SERVER[\"HTTP_REFERER\"])) {\n        die(\"Отсутствует заголовок Referer.\");\n    }\n    $referer_host = parse_url($_SERVER[\"HTTP_REFERER\"], PHP_URL_HOST);\n    if ($referer_host !== \'yourdomain.com\') {  // Замените \'yourdomain.com\' на ваш домен\n        die(\"Неверный источник запроса.\");\n    }\n\n    // Проверка CSRF-токена с использованием hash_equals\n    if (!isset($_POST[\"csrf_token\"]) || !hash_equals($_SESSION[\"csrf_token\"], $_POST[\"csrf_token\"])) {\n        die(\"Недействительный CSRF токен.\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\'csrf_token\'] ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(536, 2, 15, '1)<?php\nsession_start();\n\n// Генерация CSRF-токена, если его нет\nif (empty($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\n// Обработка POST-запроса\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка CSRF-токена с использованием hash_equals\n    if (!isset($_POST[\'csrf_token\']) || !hash_equals($_SESSION[\'csrf_token\'], $_POST[\'csrf_token\'])) {\n        die(\"Ошибка CSRF: Недействительный токен!\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n\n    // Обновление токена\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n?>\n\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= htmlspecialchars($_SESSION[\'csrf_token\'], ENT_QUOTES, \'UTF-8\') ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', 1, 100, '2025-05-05 10:50:03', '1)<?php\nsession_start();\n\n// Генерация CSRF-токена, если его нет\nif (empty($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\n// Обработка POST-запроса\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка CSRF-токена с использованием hash_equals\n    if (!isset($_POST[\'csrf_token\']) || !hash_equals($_SESSION[\'csrf_token\'], $_POST[\'csrf_token\'])) {\n        die(\"Ошибка CSRF: Недействительный токен!\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n\n    // Обновление токена\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n?>\n\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= htmlspecialchars($_SESSION[\'csrf_token\'], ENT_QUOTES, \'UTF-8\') ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(537, 2, 1, '123', 0, 0, '2025-05-06 07:57:53', '123', '{\"errors\": [\"Ваш SQL-запрос отличается от ожидаемого шаблона.\", \"Требуется SQL-оператор типа: SELECT\", \"Требуется полный цикл подготовленных выражений (prepare -> bind -> execute)\", \"Обязательный элемент отсутствует: ->prepare\\\\s*\\\\(\"], \"feedback\": [\"Отсутствует обязательный элемент: `->prepare\\\\s*\\\\(`\", \"Используйте связывание параметров через prepare() и execute()\"], \"warnings\": []}'),
(538, 2, 1, '123', 0, 0, '2025-05-06 07:57:53', '123', '{\"errors\": [\"Ваш SQL-запрос отличается от ожидаемого шаблона.\", \"Требуется SQL-оператор типа: SELECT\", \"Требуется полный цикл подготовленных выражений (prepare -> bind -> execute)\", \"Обязательный элемент отсутствует: ->prepare\\\\s*\\\\(\"], \"feedback\": [\"Отсутствует обязательный элемент: `->prepare\\\\s*\\\\(`\", \"Используйте связывание параметров через prepare() и execute()\"], \"warnings\": []}'),
(539, 2, 1, ' <?php\n$allowlist = [\'admin\', \'user\', \'guest\'];\n$username = $_GET[\'username\'];\n\nif (in_array($username, $allowlist)) {\n    $stmt = $pdo->prepare(\"SELECT * FROM users WHERE username = ?\");\n    $stmt->execute([$username]);\n    $result = $stmt->fetchAll();\n}\n?>', 1, 100, '2025-05-06 07:58:02', ' <?php\n$allowlist = [\'admin\', \'user\', \'guest\'];\n$username = $_GET[\'username\'];\n\nif (in_array($username, $allowlist)) {\n    $stmt = $pdo->prepare(\"SELECT * FROM users WHERE username = ?\");\n    $stmt->execute([$username]);\n    $result = $stmt->fetchAll();\n}\n?>', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(540, 2, 2, '123', 0, 0, '2025-05-06 07:58:12', '123', '{\"errors\": [\"Ваш SQL-запрос отличается от ожидаемого шаблона.\", \"Требуется SQL-оператор типа: CALL\", \"Требуется полный цикл подготовленных выражений (prepare -> bind -> execute)\", \"Обязательный элемент отсутствует: prepare\", \"Обязательный элемент отсутствует: \\\\?\"], \"feedback\": [\"Отсутствует обязательный элемент: `prepare`\", \"Отсутствует обязательный элемент: `\\\\?`\", \"Ожидается наличие конструкции: `prepare`\", \"Ожидается наличие конструкции: `CALL`\", \"Используйте связывание параметров через prepare() и execute()\"], \"warnings\": []}');
INSERT INTO `user_attempts` (`id`, `user_id`, `assignment_id`, `attempt_code`, `is_success`, `score`, `created_at`, `code`, `details`) VALUES
(541, 2, 2, '123', 0, 0, '2025-05-06 07:58:12', '123', '{\"errors\": [\"Ваш SQL-запрос отличается от ожидаемого шаблона.\", \"Требуется SQL-оператор типа: CALL\", \"Требуется полный цикл подготовленных выражений (prepare -> bind -> execute)\", \"Обязательный элемент отсутствует: prepare\", \"Обязательный элемент отсутствует: \\\\?\"], \"feedback\": [\"Отсутствует обязательный элемент: `prepare`\", \"Отсутствует обязательный элемент: `\\\\?`\", \"Ожидается наличие конструкции: `prepare`\", \"Ожидается наличие конструкции: `CALL`\", \"Используйте связывание параметров через prepare() и execute()\"], \"warnings\": []}'),
(542, 2, 2, '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(:username)\"); \n$stmt->bindParam(\':username\', $username, PDO::PARAM_STR);\n$stmt->execute();\n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', 1, 100, '2025-05-06 07:58:21', '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(:username)\"); \n$stmt->bindParam(\':username\', $username, PDO::PARAM_STR);\n$stmt->execute();\n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(543, 2, 8, '123', 0, 0, '2025-05-06 07:58:31', '123', '{\"errors\": [\"Ваш SQL-запрос отличается от ожидаемого шаблона.\", \"Требуется SQL-оператор типа: SELECT\", \"Требуется реализация белого списка для входных данных\", \"Обязательный элемент отсутствует: ORDER BY\", \"Обязательный элемент отсутствует: in_array\\\\s*\\\\(\"], \"feedback\": [\"Отсутствует обязательный элемент: `ORDER BY`\", \"Отсутствует обязательный элемент: `in_array\\\\s*\\\\(`\", \"Ожидается наличие конструкции: `SELECT`\", \"Ожидается наличие конструкции: `ORDER BY`\", \"Используйте in_array() с предопределенным списком допустимых значений\"], \"warnings\": []}'),
(544, 2, 8, '123', 0, 0, '2025-05-06 07:58:31', '123', '{\"errors\": [\"Ваш SQL-запрос отличается от ожидаемого шаблона.\", \"Требуется SQL-оператор типа: SELECT\", \"Требуется реализация белого списка для входных данных\", \"Обязательный элемент отсутствует: ORDER BY\", \"Обязательный элемент отсутствует: in_array\\\\s*\\\\(\"], \"feedback\": [\"Отсутствует обязательный элемент: `ORDER BY`\", \"Отсутствует обязательный элемент: `in_array\\\\s*\\\\(`\", \"Ожидается наличие конструкции: `SELECT`\", \"Ожидается наличие конструкции: `ORDER BY`\", \"Используйте in_array() с предопределенным списком допустимых значений\"], \"warnings\": []}'),
(545, 2, 8, '$column = $_GET[\'sort\'];\n$allowed_columns = [\'username\', \'email\', \'id\'];\n\n// Проверка через in_array\nif (in_array($column, $allowed_columns)) {\n    // Построение запроса с использованием белого списка для столбца\n    $query = \"SELECT * FROM users ORDER BY \" . $column; // Строка строится безопасно, так как $column проверено\n    $stmt = $conn->prepare($query); // Здесь не используется параметризация для имени столбца\n    $stmt->execute();\n    $result = $stmt->get_result();\n} else {\n    echo \"Недопустимое значение для сортировки.\";\n}', 0, 70, '2025-05-06 07:58:41', '$column = $_GET[\'sort\'];\n$allowed_columns = [\'username\', \'email\', \'id\'];\n\n// Проверка через in_array\nif (in_array($column, $allowed_columns)) {\n    // Построение запроса с использованием белого списка для столбца\n    $query = \"SELECT * FROM users ORDER BY \" . $column; // Строка строится безопасно, так как $column проверено\n    $stmt = $conn->prepare($query); // Здесь не используется параметризация для имени столбца\n    $stmt->execute();\n    $result = $stmt->get_result();\n} else {\n    echo \"Недопустимое значение для сортировки.\";\n}', '{\"errors\": [\"Ваш SQL-запрос отличается от ожидаемого шаблона.\"], \"feedback\": [], \"warnings\": []}'),
(546, 2, 8, '$allowedColumns = [\'username\', \'email\', \'created_at\'];\n$column = $_GET[\'sort\'] ?? \'username\';\n\nif (!in_array($column, $allowedColumns)) {\n    $column = \'username\';\n}\n\n$stmt = $pdo->prepare(\"SELECT * FROM users ORDER BY $column\");\n', 1, 100, '2025-05-06 07:59:12', '$allowedColumns = [\'username\', \'email\', \'created_at\'];\n$column = $_GET[\'sort\'] ?? \'username\';\n\nif (!in_array($column, $allowedColumns)) {\n    $column = \'username\';\n}\n\n$stmt = $pdo->prepare(\"SELECT * FROM users ORDER BY $column\");\n', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(547, 2, 8, '123', 0, 0, '2025-05-06 08:00:07', '123', '{\"errors\": [\"Ваш SQL-запрос отличается от ожидаемого шаблона.\", \"Требуется SQL-оператор типа: SELECT\", \"Требуется реализация белого списка для входных данных\", \"Обязательный элемент отсутствует: ORDER BY\", \"Обязательный элемент отсутствует: in_array\\\\s*\\\\(\"], \"feedback\": [\"Отсутствует обязательный элемент: `ORDER BY`\", \"Отсутствует обязательный элемент: `in_array\\\\s*\\\\(`\", \"Ожидается наличие конструкции: `SELECT`\", \"Ожидается наличие конструкции: `ORDER BY`\", \"Используйте in_array() с предопределенным списком допустимых значений\"], \"warnings\": []}'),
(548, 2, 8, '123', 0, 0, '2025-05-06 08:00:08', '123', '{\"errors\": [\"Ваш SQL-запрос отличается от ожидаемого шаблона.\", \"Требуется SQL-оператор типа: SELECT\", \"Требуется реализация белого списка для входных данных\", \"Обязательный элемент отсутствует: ORDER BY\", \"Обязательный элемент отсутствует: in_array\\\\s*\\\\(\"], \"feedback\": [\"Отсутствует обязательный элемент: `ORDER BY`\", \"Отсутствует обязательный элемент: `in_array\\\\s*\\\\(`\", \"Ожидается наличие конструкции: `SELECT`\", \"Ожидается наличие конструкции: `ORDER BY`\", \"Используйте in_array() с предопределенным списком допустимых значений\"], \"warnings\": []}'),
(549, 2, 8, ' $allowedColumns = [\'username\', \'email\', \'created_at\'];\n$column = $_GET[\'sort\'] ?? \'username\';\n\nif (!in_array($column, $allowedColumns)) {\n    $column = \'username\';\n}\n\n$stmt = $pdo->prepare(\"SELECT * FROM users ORDER BY $column\");', 1, 100, '2025-05-06 08:00:17', ' $allowedColumns = [\'username\', \'email\', \'created_at\'];\n$column = $_GET[\'sort\'] ?? \'username\';\n\nif (!in_array($column, $allowedColumns)) {\n    $column = \'username\';\n}\n\n$stmt = $pdo->prepare(\"SELECT * FROM users ORDER BY $column\");', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(550, 2, 5, '123', 1, 100, '2025-05-06 08:00:34', '123', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(551, 2, 6, '123', 1, 100, '2025-05-06 08:01:02', '123', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(552, 2, 7, '123', 0, 60, '2025-05-06 08:01:17', '123', '{\"errors\": [\"Не обнаружено DOM-XSS payload\"], \"feedback\": \"\", \"warnings\": []}'),
(553, 2, 10, '123', 0, 30, '2025-05-06 08:01:31', '123', '{\"errors\": [\"Не используется обязательная функция: htmlspecialchars\", \"Отсутствует HTML-экранирование\"], \"feedback\": \"\", \"warnings\": []}'),
(554, 2, 10, '123', 0, 30, '2025-05-06 08:01:32', '123', '{\"errors\": [\"Не используется обязательная функция: htmlspecialchars\", \"Отсутствует HTML-экранирование\"], \"feedback\": \"\", \"warnings\": []}'),
(555, 2, 10, 'htmlspecialchars($name)', 1, 100, '2025-05-06 08:01:40', 'htmlspecialchars($name)', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(556, 2, 11, '123', 0, 30, '2025-05-06 08:01:55', '123', '{\"errors\": [\"Не используется обязательная функция: htmlspecialchars\", \"Отсутствует HTML-экранирование\"], \"feedback\": \"\", \"warnings\": []}'),
(557, 2, 11, '123', 0, 30, '2025-05-06 08:01:55', '123', '{\"errors\": [\"Не используется обязательная функция: htmlspecialchars\", \"Отсутствует HTML-экранирование\"], \"feedback\": \"\", \"warnings\": []}'),
(558, 2, 11, 'htmlspecialchars($comment)', 1, 100, '2025-05-06 08:02:03', 'htmlspecialchars($comment)', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(559, 2, 12, '123', 1, 100, '2025-05-06 08:02:23', '123', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(560, 2, 12, '123', 1, 100, '2025-05-06 08:18:27', '123', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(561, 2, 12, '123', 1, 100, '2025-05-06 08:18:28', '123', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(562, 2, 12, '123', 1, 100, '2025-05-06 08:18:34', '123', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(563, 2, 5, '123', 0, 0, '2025-05-06 08:18:49', '123', '{\"errors\": [\"XSS-инъекция не обнаружена. Обычный текст вроде \'123\' не подходит.\"], \"feedback\": \"\", \"warnings\": []}'),
(564, 2, 6, '123', 0, 0, '2025-05-06 08:19:08', '123', '{\"errors\": [\"XSS-инъекция не обнаружена. Обычный текст вроде \'123\' не подходит.\"], \"feedback\": \"\", \"warnings\": []}'),
(565, 2, 6, '123', 0, 0, '2025-05-06 08:19:09', '123', '{\"errors\": [\"XSS-инъекция не обнаружена. Обычный текст вроде \'123\' не подходит.\"], \"feedback\": \"\", \"warnings\": []}'),
(566, 2, 6, '$comment = htmlspecialchars($_POST[\'comment\'], ENT_QUOTES, \'UTF-8\');\nfile_put_contents(\'comments.txt\', $comment . PHP_EOL, FILE_APPEND);', 0, 0, '2025-05-06 08:19:17', '$comment = htmlspecialchars($_POST[\'comment\'], ENT_QUOTES, \'UTF-8\');\nfile_put_contents(\'comments.txt\', $comment . PHP_EOL, FILE_APPEND);', '{\"errors\": [\"XSS-инъекция не обнаружена. Обычный текст вроде \'123\' не подходит.\"], \"feedback\": \"\", \"warnings\": []}'),
(567, 2, 6, '$comment = htmlspecialchars($_POST[\'comment\'], ENT_QUOTES, \'UTF-8\');\nfile_put_contents(\'comments.txt\', $comment . PHP_EOL, FILE_APPEND);', 0, 0, '2025-05-06 08:19:19', '$comment = htmlspecialchars($_POST[\'comment\'], ENT_QUOTES, \'UTF-8\');\nfile_put_contents(\'comments.txt\', $comment . PHP_EOL, FILE_APPEND);', '{\"errors\": [\"XSS-инъекция не обнаружена. Обычный текст вроде \'123\' не подходит.\"], \"feedback\": \"\", \"warnings\": []}'),
(568, 2, 6, '$comment = htmlspecialchars($_POST[\'comment\'], ENT_QUOTES, \'UTF-8\');\nfile_put_contents(\'comments.txt\', $comment . PHP_EOL, FILE_APPEND);', 0, 0, '2025-05-06 08:19:19', '$comment = htmlspecialchars($_POST[\'comment\'], ENT_QUOTES, \'UTF-8\');\nfile_put_contents(\'comments.txt\', $comment . PHP_EOL, FILE_APPEND);', '{\"errors\": [\"XSS-инъекция не обнаружена. Обычный текст вроде \'123\' не подходит.\"], \"feedback\": \"\", \"warnings\": []}'),
(569, 2, 6, '$comment = htmlspecialchars($_POST[\'comment\'], ENT_QUOTES, \'UTF-8\');\nfile_put_contents(\'comments.txt\', $comment . PHP_EOL, FILE_APPEND);', 0, 0, '2025-05-06 08:19:20', '$comment = htmlspecialchars($_POST[\'comment\'], ENT_QUOTES, \'UTF-8\');\nfile_put_contents(\'comments.txt\', $comment . PHP_EOL, FILE_APPEND);', '{\"errors\": [\"XSS-инъекция не обнаружена. Обычный текст вроде \'123\' не подходит.\"], \"feedback\": \"\", \"warnings\": []}'),
(570, 2, 6, '$comment = htmlspecialchars($_POST[\'comment\'], ENT_QUOTES, \'UTF-8\');\nfile_put_contents(\'comments.txt\', $comment . PHP_EOL, FILE_APPEND);', 0, 0, '2025-05-06 08:19:20', '$comment = htmlspecialchars($_POST[\'comment\'], ENT_QUOTES, \'UTF-8\');\nfile_put_contents(\'comments.txt\', $comment . PHP_EOL, FILE_APPEND);', '{\"errors\": [\"XSS-инъекция не обнаружена. Обычный текст вроде \'123\' не подходит.\"], \"feedback\": \"\", \"warnings\": []}'),
(571, 2, 6, 'document.write(\'<script>alert(\"XSS\")</script>\');\n', 0, 0, '2025-05-06 08:19:46', 'document.write(\'<script>alert(\"XSS\")</script>\');\n', '{\"errors\": [\"Слишком очевидный XSS payload: <script>alert(...)</script> не допускается.\"], \"feedback\": \"\", \"warnings\": []}'),
(572, 2, 6, 'document.write(\'<script>alert(\"XSS\")</script>\');\n', 0, 0, '2025-05-06 08:19:50', 'document.write(\'<script>alert(\"XSS\")</script>\');\n', '{\"errors\": [\"Слишком очевидный XSS payload: <script>alert(...)</script> не допускается.\"], \"feedback\": \"\", \"warnings\": []}'),
(573, 2, 6, 'document.write(\'<script>alert(\"XSS\")</script>\');\n', 0, 0, '2025-05-06 08:19:50', 'document.write(\'<script>alert(\"XSS\")</script>\');\n', '{\"errors\": [\"Слишком очевидный XSS payload: <script>alert(...)</script> не допускается.\"], \"feedback\": \"\", \"warnings\": []}'),
(574, 2, 6, 'document.write(\'<script>alert(\"XSS\")</script>\');\n', 0, 0, '2025-05-06 08:19:51', 'document.write(\'<script>alert(\"XSS\")</script>\');\n', '{\"errors\": [\"Слишком очевидный XSS payload: <script>alert(...)</script> не допускается.\"], \"feedback\": \"\", \"warnings\": []}'),
(575, 2, 6, 'document.write(\'<script>alert(\"XSS\")</script>\');\n', 0, 0, '2025-05-06 08:19:51', 'document.write(\'<script>alert(\"XSS\")</script>\');\n', '{\"errors\": [\"Слишком очевидный XSS payload: <script>alert(...)</script> не допускается.\"], \"feedback\": \"\", \"warnings\": []}'),
(576, 2, 6, 'document.write(\'<script>alert(\"XSS\")</script>\');\n', 0, 0, '2025-05-06 08:19:52', 'document.write(\'<script>alert(\"XSS\")</script>\');\n', '{\"errors\": [\"Слишком очевидный XSS payload: <script>alert(...)</script> не допускается.\"], \"feedback\": \"\", \"warnings\": []}'),
(577, 2, 6, 'document.write(\'<script>alert(\"XSS\")</script>\');\n', 0, 0, '2025-05-06 08:19:52', 'document.write(\'<script>alert(\"XSS\")</script>\');\n', '{\"errors\": [\"Слишком очевидный XSS payload: <script>alert(...)</script> не допускается.\"], \"feedback\": \"\", \"warnings\": []}'),
(578, 2, 6, '<img src=\"x\" onerror=\"alert(1)\">\n', 1, 100, '2025-05-06 08:20:02', '<img src=\"x\" onerror=\"alert(1)\">\n', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(579, 2, 5, '123', 0, 0, '2025-05-06 08:21:31', '123', '{\"errors\": [\"XSS-инъекция не обнаружена. Обычный текст вроде \'123\' не подходит.\"], \"feedback\": \"\", \"warnings\": []}'),
(580, 2, 5, '123', 0, 0, '2025-05-06 08:21:32', '123', '{\"errors\": [\"XSS-инъекция не обнаружена. Обычный текст вроде \'123\' не подходит.\"], \"feedback\": \"\", \"warnings\": []}'),
(581, 2, 5, '123', 0, 0, '2025-05-06 08:22:37', '123', '{\"errors\": [\"XSS-инъекция не обнаружена. Обычный текст вроде \'123\' не подходит.\"], \"feedback\": \"\", \"warnings\": []}'),
(582, 2, 5, '123', 0, 0, '2025-05-06 08:22:39', '123', '{\"errors\": [\"XSS-инъекция не обнаружена. Обычный текст вроде \'123\' не подходит.\"], \"feedback\": \"\", \"warnings\": []}'),
(583, 2, 5, 'echo htmlspecialchars($_GET[\'name\'], ENT_QUOTES, \'UTF-8\');', 0, 0, '2025-05-06 08:23:19', 'echo htmlspecialchars($_GET[\'name\'], ENT_QUOTES, \'UTF-8\');', '{\"errors\": [\"XSS-инъекция не обнаружена. Обычный текст вроде \'123\' не подходит.\"], \"feedback\": \"\", \"warnings\": []}'),
(584, 2, 5, '<img src=\"x\" onerror=\"alert(1)\">\n', 1, 100, '2025-05-06 08:23:28', '<img src=\"x\" onerror=\"alert(1)\">\n', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(585, 2, 5, '<img src=\"x\" onerror=\"alert(1)\">\n', 1, 100, '2025-05-06 08:23:40', '<img src=\"x\" onerror=\"alert(1)\">\n', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(586, 2, 7, '<img src=\"x\" onerror=\"alert(1)\">\n', 1, 100, '2025-05-06 08:23:54', '<img src=\"x\" onerror=\"alert(1)\">\n', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(587, 2, 10, '123', 0, 30, '2025-05-06 08:24:04', '123', '{\"errors\": [\"Не используется обязательная функция: htmlspecialchars\", \"Отсутствует HTML-экранирование\"], \"feedback\": \"\", \"warnings\": []}'),
(588, 2, 11, '123', 0, 30, '2025-05-06 08:24:16', '123', '{\"errors\": [\"Не используется обязательная функция: htmlspecialchars\", \"Отсутствует HTML-экранирование\"], \"feedback\": \"\", \"warnings\": []}'),
(589, 2, 11, '123', 0, 30, '2025-05-06 08:24:21', '123', '{\"errors\": [\"Не используется обязательная функция: htmlspecialchars\", \"Отсутствует HTML-экранирование\"], \"feedback\": \"\", \"warnings\": []}'),
(590, 2, 11, 'htmlspecialchars($comment)', 1, 100, '2025-05-06 08:24:28', 'htmlspecialchars($comment)', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(591, 2, 12, '1233', 1, 100, '2025-05-06 08:24:36', '1233', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(592, 2, 12, '1233', 1, 100, '2025-05-06 08:24:37', '1233', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(593, 2, 12, '1233', 1, 100, '2025-05-06 08:28:47', '1233', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(594, 2, 12, '1233', 1, 100, '2025-05-06 08:28:48', '1233', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(595, 2, 12, '123', 1, 100, '2025-05-06 08:28:55', '123', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(596, 2, 12, '<!DOCTYPE html>\n<html>\n<head>\n  <title>DOM XSS Example</title>\n</head>\n<body>\n  <p id=\"output\"></p>\n  <script>\n    const params = new URLSearchParams(window.location.search);\n    document.getElementById(\"output\").innerHTML = params.get(\"msg\");\n  </script>\n</body>\n</html>', 0, 80, '2025-05-06 08:43:25', '<!DOCTYPE html>\n<html>\n<head>\n  <title>DOM XSS Example</title>\n</head>\n<body>\n  <p id=\"output\"></p>\n  <script>\n    const params = new URLSearchParams(window.location.search);\n    document.getElementById(\"output\").innerHTML = params.get(\"msg\");\n  </script>\n</body>\n</html>', '{\"errors\": [\"Обнаружен опасный паттерн вывода: innerHTML\"], \"feedback\": \"\", \"warnings\": []}'),
(597, 2, 19, '123', 0, 5, '2025-05-06 08:44:06', '123', '{\"errors\": [\"Отсутствует генерация CSRF-токена в сессии\", \"Отсутствует CSRF-токен в форме\", \"Отсутствует безопасная проверка CSRF-токена (hash_equals)\", \"Отсутствует атрибут SameSite для кук\", \"Отсутствует проверка HTTP Referer с использованием parse_url\"], \"feedback\": \"\", \"warnings\": []}'),
(598, 2, 19, '123', 0, 5, '2025-05-06 08:44:09', '123', '{\"errors\": [\"Отсутствует генерация CSRF-токена в сессии\", \"Отсутствует CSRF-токен в форме\", \"Отсутствует безопасная проверка CSRF-токена (hash_equals)\", \"Отсутствует атрибут SameSite для кук\", \"Отсутствует проверка HTTP Referer с использованием parse_url\"], \"feedback\": \"\", \"warnings\": []}'),
(599, 2, 19, '<?php\nsession_start();\nif (!isset($_SESSION[\"csrf_token\"])) {\n    $_SESSION[\"csrf_token\"] = bin2hex(random_bytes(32));\n}\n// Проверка SameSite — серверная настройка куки при установке\n// Проверка Referer\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    if (!isset($_SERVER[\"HTTP_REFERER\"]) || strpos($_SERVER[\"HTTP_REFERER\"], \"yourdomain.com\") !== 0) {\n        die(\"Неверный источник запроса.\");\n    }\n    if (!hash_equals($_SESSION[\"csrf_token\"], $_POST[\"csrf_token\"])) {\n        die(\"Недействительный CSRF токен\");\n    }\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\"csrf_token\"] ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', 0, 65, '2025-05-06 08:44:17', '<?php\nsession_start();\nif (!isset($_SESSION[\"csrf_token\"])) {\n    $_SESSION[\"csrf_token\"] = bin2hex(random_bytes(32));\n}\n// Проверка SameSite — серверная настройка куки при установке\n// Проверка Referer\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    if (!isset($_SERVER[\"HTTP_REFERER\"]) || strpos($_SERVER[\"HTTP_REFERER\"], \"yourdomain.com\") !== 0) {\n        die(\"Неверный источник запроса.\");\n    }\n    if (!hash_equals($_SESSION[\"csrf_token\"], $_POST[\"csrf_token\"])) {\n        die(\"Недействительный CSRF токен\");\n    }\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\"csrf_token\"] ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', '{\"errors\": [\"Отсутствует атрибут SameSite для кук\", \"Отсутствует проверка HTTP Referer с использованием parse_url\"], \"feedback\": \"\", \"warnings\": []}'),
(600, 2, 19, '<?php\nsession_start();\n\n// Установка cookie с атрибутом SameSite\nheader(\"Set-Cookie: session_id=\" . session_id() . \"; SameSite=Strict; HttpOnly; Path=/\");\n\nif (!isset($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка Referer с использованием parse_url\n    if (!isset($_SERVER[\"HTTP_REFERER\"])) {\n        die(\"Отсутствует заголовок Referer.\");\n    }\n    $referer_host = parse_url($_SERVER[\"HTTP_REFERER\"], PHP_URL_HOST);\n    if ($referer_host !== \'yourdomain.com\') {  // Замените \'yourdomain.com\' на ваш домен\n        die(\"Неверный источник запроса.\");\n    }\n\n    // Проверка CSRF-токена с использованием hash_equals\n    if (!isset($_POST[\"csrf_token\"]) || !hash_equals($_SESSION[\"csrf_token\"], $_POST[\"csrf_token\"])) {\n        die(\"Недействительный CSRF токен.\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\'csrf_token\'] ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', 1, 100, '2025-05-06 08:44:54', '<?php\nsession_start();\n\n// Установка cookie с атрибутом SameSite\nheader(\"Set-Cookie: session_id=\" . session_id() . \"; SameSite=Strict; HttpOnly; Path=/\");\n\nif (!isset($_SESSION[\'csrf_token\'])) {\n    $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\n\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    // Проверка Referer с использованием parse_url\n    if (!isset($_SERVER[\"HTTP_REFERER\"])) {\n        die(\"Отсутствует заголовок Referer.\");\n    }\n    $referer_host = parse_url($_SERVER[\"HTTP_REFERER\"], PHP_URL_HOST);\n    if ($referer_host !== \'yourdomain.com\') {  // Замените \'yourdomain.com\' на ваш домен\n        die(\"Неверный источник запроса.\");\n    }\n\n    // Проверка CSRF-токена с использованием hash_equals\n    if (!isset($_POST[\"csrf_token\"]) || !hash_equals($_SESSION[\"csrf_token\"], $_POST[\"csrf_token\"])) {\n        die(\"Недействительный CSRF токен.\");\n    }\n\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\'csrf_token\'] ?>\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(601, 2, 15, '123', 0, 40, '2025-05-06 08:45:20', '123', '{\"errors\": [\"Отсутствует генерация CSRF-токена в сессии\", \"Отсутствует CSRF-токен в форме\", \"Отсутствует безопасная проверка CSRF-токена (hash_equals)\"], \"feedback\": \"\", \"warnings\": []}'),
(602, 2, 15, '123', 0, 40, '2025-05-06 08:45:20', '123', '{\"errors\": [\"Отсутствует генерация CSRF-токена в сессии\", \"Отсутствует CSRF-токен в форме\", \"Отсутствует безопасная проверка CSRF-токена (hash_equals)\"], \"feedback\": \"\", \"warnings\": []}'),
(603, 2, 15, '<?php\nsession_start();\nif (!isset($_SESSION[\'csrf_token\'])) {\n  $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\nif ($_SERVER[\'REQUEST_METHOD\'] === \'POST\') {\n  if (!hash_equals($_SESSION[\'csrf_token\'], $_POST[\'csrf_token\'])) {\n    die(\'Неверный CSRF токен\');\n  }\n  $amount = $_POST[\'amount\'];\n  $to = $_POST[\'to\'];\n  transferMoney($to, $amount);\n  echo \'Перевод выполнен.\';\n}\n?>\n<form method=\"POST\" action=\"\">\n  <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\'csrf_token\'] ?>\">\n  <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n  <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n  <button type=\"submit\">Перевести</button>\n</form>', 1, 100, '2025-05-06 08:45:30', '<?php\nsession_start();\nif (!isset($_SESSION[\'csrf_token\'])) {\n  $_SESSION[\'csrf_token\'] = bin2hex(random_bytes(32));\n}\nif ($_SERVER[\'REQUEST_METHOD\'] === \'POST\') {\n  if (!hash_equals($_SESSION[\'csrf_token\'], $_POST[\'csrf_token\'])) {\n    die(\'Неверный CSRF токен\');\n  }\n  $amount = $_POST[\'amount\'];\n  $to = $_POST[\'to\'];\n  transferMoney($to, $amount);\n  echo \'Перевод выполнен.\';\n}\n?>\n<form method=\"POST\" action=\"\">\n  <input type=\"hidden\" name=\"csrf_token\" value=\"<?= $_SESSION[\'csrf_token\'] ?>\">\n  <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n  <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n  <button type=\"submit\">Перевести</button>\n</form>', '{\"errors\": [], \"feedback\": \"\", \"warnings\": []}'),
(604, 2, 2, '<?php\n$column = $_GET[\'sort\'];\n$query = \"SELECT * FROM users ORDER BY $column\";\n$result = mysqli_query($conn, $query);\n?> верное $column = $_GET[\'sort\'];\n$allowed_columns = [\'username\', \'email\', \'id\'];\n\n// Проверка через in_array\nif (in_array($column, $allowed_columns)) {\n    // Построение запроса с использованием белого списка для столбца\n    $query = \"SELECT * FROM users ORDER BY \" . $column; // Строка строится безопасно, так как $column проверено\n    $stmt = $conn->prepare($query); // Здесь не используется параметризация для имени столбца\n    $stmt->execute();\n    $result = $stmt->get_result();\n} else {\n    echo \"Недопустимое значение для сортировки.\";\n}', 0, 0, '2025-05-06 11:52:29', '<?php\n$column = $_GET[\'sort\'];\n$query = \"SELECT * FROM users ORDER BY $column\";\n$result = mysqli_query($conn, $query);\n?> верное $column = $_GET[\'sort\'];\n$allowed_columns = [\'username\', \'email\', \'id\'];\n\n// Проверка через in_array\nif (in_array($column, $allowed_columns)) {\n    // Построение запроса с использованием белого списка для столбца\n    $query = \"SELECT * FROM users ORDER BY \" . $column; // Строка строится безопасно, так как $column проверено\n    $stmt = $conn->prepare($query); // Здесь не используется параметризация для имени столбца\n    $stmt->execute();\n    $result = $stmt->get_result();\n} else {\n    echo \"Недопустимое значение для сортировки.\";\n}', '{\"errors\": [\"Требуется SQL-оператор типа: CALL\"], \"feedback\": [\"Ожидается наличие конструкции: `CALL`\"], \"warnings\": []}'),
(605, 2, 2, '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', 1, 100, '2025-05-06 11:52:49', '<?php\n$username = $_GET[\'username\'];\n$stmt = $pdo->prepare(\"CALL getUserByName(?)\"); \n$stmt->execute([$username]); \n$result = $stmt->fetchAll(PDO::FETCH_ASSOC);\nprint_r($result);\n?>', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(606, 2, 1, '<?php\n$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-05-07 09:58:17', '<?php\n$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(607, 2, 15, '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', 0, 40, '2025-05-07 13:35:49', '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', '{\"errors\": [\"Отсутствует генерация CSRF-токена в сессии\", \"Отсутствует CSRF-токен в форме\", \"Отсутствует безопасная проверка CSRF-токена (hash_equals)\"], \"feedback\": \"\", \"warnings\": []}'),
(608, 2, 19, '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n  $amount = $_POST[\"amount\"];\n  $to = $_POST[\"to\"];\n  transferMoney($to, $amount);\n  echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n  <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n  <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n  <button type=\"submit\">Перевести</button>\n</form>', 0, 5, '2025-05-12 10:48:58', '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n  $amount = $_POST[\"amount\"];\n  $to = $_POST[\"to\"];\n  transferMoney($to, $amount);\n  echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n  <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n  <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n  <button type=\"submit\">Перевести</button>\n</form>', '{\"errors\": [\"Отсутствует генерация CSRF-токена в сессии\", \"Отсутствует CSRF-токен в форме\", \"Отсутствует безопасная проверка CSRF-токена (hash_equals)\", \"Отсутствует атрибут SameSite для кук\", \"Отсутствует проверка HTTP Referer с использованием parse_url\"], \"feedback\": \"\", \"warnings\": []}'),
(609, 9, 1, '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-05-13 09:46:50', '$stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(610, 8, 1, ' $stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', 1, 100, '2025-05-13 10:58:34', ' $stmt = $pdo->prepare(\"SELECT * FROM people WHERE login = ?\");\n$stmt->execute([$_GET[\'username\']]);', '{\"errors\": [], \"feedback\": [], \"warnings\": []}'),
(611, 2, 15, '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', 0, 40, '2025-05-13 12:02:22', '<?php\nif ($_SERVER[\"REQUEST_METHOD\"] === \"POST\") {\n    $amount = $_POST[\"amount\"];\n    $to = $_POST[\"to\"];\n    transferMoney($to, $amount);\n    echo \"Перевод выполнен.\";\n}\n?>\n<form method=\"POST\" action=\"\">\n    <input type=\"text\" name=\"to\" placeholder=\"Получатель\">\n    <input type=\"number\" name=\"amount\" placeholder=\"Сумма\">\n    <button type=\"submit\">Перевести</button>\n</form>', '{\"errors\": [\"Отсутствует генерация CSRF-токена в сессии\", \"Отсутствует CSRF-токен в форме\", \"Отсутствует безопасная проверка CSRF-токена (hash_equals)\"], \"feedback\": \"\", \"warnings\": []}'),
(612, 2, 8, '123', 0, 0, '2025-05-13 12:03:01', '123', '{\"errors\": [\"Ваш SQL-запрос отличается от ожидаемого шаблона.\", \"Требуется SQL-оператор типа: SELECT\", \"Требуется реализация белого списка для входных данных\", \"Обязательный элемент отсутствует: ORDER BY\", \"Обязательный элемент отсутствует: in_array\\\\s*\\\\(\"], \"feedback\": [\"Отсутствует обязательный элемент: `ORDER BY`\", \"Отсутствует обязательный элемент: `in_array\\\\s*\\\\(`\", \"Ожидается наличие конструкции: `SELECT`\", \"Ожидается наличие конструкции: `ORDER BY`\", \"Используйте in_array() с предопределенным списком допустимых значений\"], \"warnings\": []}'),
(613, 2, 2, '<?php\n$name = $_GET[\'name\'];\n$sql = \"CALL getUserByName(\'$name\')\";\n$result = mysqli_query($conn, $sql);\n?>', 0, 0, '2025-05-13 12:10:33', '<?php\n$name = $_GET[\'name\'];\n$sql = \"CALL getUserByName(\'$name\')\";\n$result = mysqli_query($conn, $sql);\n?>', '{\"errors\": [\"Требуется полный цикл подготовленных выражений (prepare -> bind -> execute)\", \"Обязательный элемент отсутствует: prepare\"], \"feedback\": [\"Отсутствует обязательный элемент: `prepare`\", \"Ожидается наличие конструкции: `prepare`\", \"Используйте связывание параметров через prepare() и execute()\"], \"warnings\": []}');

-- --------------------------------------------------------

--
-- Структура таблицы `user_hints`
--

CREATE TABLE `user_hints` (
  `id` int NOT NULL,
  `user_id` int NOT NULL,
  `lesson_id` int NOT NULL,
  `hint_id` int NOT NULL,
  `used_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

--
-- Дамп данных таблицы `user_hints`
--

INSERT INTO `user_hints` (`id`, `user_id`, `lesson_id`, `hint_id`, `used_at`) VALUES
(2, 2, 1, 1, '2025-04-08 14:36:23');

-- --------------------------------------------------------

--
-- Структура таблицы `user_lessons`
--

CREATE TABLE `user_lessons` (
  `id` int NOT NULL,
  `user_id` int NOT NULL,
  `lesson_id` int NOT NULL,
  `is_completed` tinyint(1) NOT NULL DEFAULT '0',
  `attempts` int NOT NULL DEFAULT '0',
  `best_score` int NOT NULL DEFAULT '0',
  `last_attempt` timestamp NULL DEFAULT NULL,
  `completed_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;

--
-- Дамп данных таблицы `user_lessons`
--

INSERT INTO `user_lessons` (`id`, `user_id`, `lesson_id`, `is_completed`, `attempts`, `best_score`, `last_attempt`, `completed_at`) VALUES
(237, 5, 1, 1, 3, 50, NULL, '2025-04-29 14:05:26'),
(238, 2, 13, 1, 5, 100, NULL, '2025-05-10 13:42:33'),
(239, 2, 1, 1, 12, 50, NULL, '2025-05-13 11:46:06'),
(240, 2, 2, 1, 5, 75, NULL, '2025-05-13 12:10:31'),
(241, 2, 14, 1, 4, 100, NULL, '2025-05-13 12:00:34'),
(242, 2, 15, 1, 3, 100, NULL, '2025-05-06 08:24:33'),
(243, 2, 16, 1, 17, 50, NULL, '2025-05-13 12:02:16'),
(244, 2, 18, 1, 8, 80, NULL, '2025-05-12 10:48:49'),
(245, 5, 18, 1, 1, 80, NULL, '2025-05-05 11:24:05'),
(246, 5, 10, 1, 1, 100, NULL, '2025-05-05 11:29:39'),
(247, 2, 3, 1, 3, 100, NULL, '2025-05-13 12:02:58'),
(248, 2, 10, 1, 5, 100, NULL, '2025-05-13 11:46:18'),
(249, 2, 11, 1, 2, 150, NULL, '2025-05-06 08:19:02'),
(250, 2, 12, 1, 2, 120, NULL, '2025-05-06 08:23:46'),
(251, 9, 1, 1, 1, 50, NULL, '2025-05-13 09:46:26'),
(252, 8, 1, 1, 1, 50, NULL, '2025-05-13 10:58:18'),
(253, 9, 10, 1, 1, 100, NULL, '2025-05-14 11:26:45');

--
-- Индексы сохранённых таблиц
--

--
-- Индексы таблицы `achievements`
--
ALTER TABLE `achievements`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `assignments`
--
ALTER TABLE `assignments`
  ADD PRIMARY KEY (`id`),
  ADD KEY `lesson_id` (`lesson_id`);

--
-- Индексы таблицы `lessons`
--
ALTER TABLE `lessons`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `lesson_attempts`
--
ALTER TABLE `lesson_attempts`
  ADD PRIMARY KEY (`id`),
  ADD KEY `user_id` (`user_id`,`lesson_id`),
  ADD KEY `lesson_id` (`lesson_id`);

--
-- Индексы таблицы `lesson_hints`
--
ALTER TABLE `lesson_hints`
  ADD PRIMARY KEY (`id`),
  ADD KEY `lesson_id` (`lesson_id`);

--
-- Индексы таблицы `lesson_questions`
--
ALTER TABLE `lesson_questions`
  ADD PRIMARY KEY (`id`),
  ADD KEY `lesson_id` (`lesson_id`);

--
-- Индексы таблицы `templates`
--
ALTER TABLE `templates`
  ADD PRIMARY KEY (`name`);

--
-- Индексы таблицы `user`
--
ALTER TABLE `user`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `user_achievements`
--
ALTER TABLE `user_achievements`
  ADD PRIMARY KEY (`id`),
  ADD KEY `user_id` (`user_id`,`achievement_id`),
  ADD KEY `achievement_id` (`achievement_id`);

--
-- Индексы таблицы `user_assignments`
--
ALTER TABLE `user_assignments`
  ADD PRIMARY KEY (`user_id`,`assignment_id`),
  ADD KEY `assignment_id` (`assignment_id`);

--
-- Индексы таблицы `user_attempts`
--
ALTER TABLE `user_attempts`
  ADD PRIMARY KEY (`id`),
  ADD KEY `user_id` (`user_id`),
  ADD KEY `assignment_id` (`assignment_id`);

--
-- Индексы таблицы `user_hints`
--
ALTER TABLE `user_hints`
  ADD PRIMARY KEY (`id`),
  ADD KEY `user_id` (`user_id`,`lesson_id`,`hint_id`),
  ADD KEY `hint_id` (`hint_id`),
  ADD KEY `lesson_id` (`lesson_id`);

--
-- Индексы таблицы `user_lessons`
--
ALTER TABLE `user_lessons`
  ADD PRIMARY KEY (`id`),
  ADD KEY `user_id` (`user_id`,`lesson_id`),
  ADD KEY `user_lessons_ibfk_2` (`lesson_id`);

--
-- AUTO_INCREMENT для сохранённых таблиц
--

--
-- AUTO_INCREMENT для таблицы `achievements`
--
ALTER TABLE `achievements`
  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=9;

--
-- AUTO_INCREMENT для таблицы `assignments`
--
ALTER TABLE `assignments`
  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=21;

--
-- AUTO_INCREMENT для таблицы `lessons`
--
ALTER TABLE `lessons`
  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=20;

--
-- AUTO_INCREMENT для таблицы `lesson_attempts`
--
ALTER TABLE `lesson_attempts`
  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=11;

--
-- AUTO_INCREMENT для таблицы `lesson_hints`
--
ALTER TABLE `lesson_hints`
  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=4;

--
-- AUTO_INCREMENT для таблицы `lesson_questions`
--
ALTER TABLE `lesson_questions`
  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=31;

--
-- AUTO_INCREMENT для таблицы `user`
--
ALTER TABLE `user`
  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=10;

--
-- AUTO_INCREMENT для таблицы `user_achievements`
--
ALTER TABLE `user_achievements`
  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=24;

--
-- AUTO_INCREMENT для таблицы `user_attempts`
--
ALTER TABLE `user_attempts`
  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=614;

--
-- AUTO_INCREMENT для таблицы `user_hints`
--
ALTER TABLE `user_hints`
  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=5;

--
-- AUTO_INCREMENT для таблицы `user_lessons`
--
ALTER TABLE `user_lessons`
  MODIFY `id` int NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=254;

--
-- Ограничения внешнего ключа сохраненных таблиц
--

--
-- Ограничения внешнего ключа таблицы `assignments`
--
ALTER TABLE `assignments`
  ADD CONSTRAINT `assignments_ibfk_1` FOREIGN KEY (`lesson_id`) REFERENCES `lessons` (`id`);

--
-- Ограничения внешнего ключа таблицы `lesson_attempts`
--
ALTER TABLE `lesson_attempts`
  ADD CONSTRAINT `lesson_attempts_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `user` (`id`) ON DELETE CASCADE ON UPDATE RESTRICT,
  ADD CONSTRAINT `lesson_attempts_ibfk_2` FOREIGN KEY (`lesson_id`) REFERENCES `lessons` (`id`) ON DELETE CASCADE ON UPDATE RESTRICT;

--
-- Ограничения внешнего ключа таблицы `lesson_hints`
--
ALTER TABLE `lesson_hints`
  ADD CONSTRAINT `lesson_hints_ibfk_1` FOREIGN KEY (`lesson_id`) REFERENCES `lessons` (`id`) ON DELETE CASCADE ON UPDATE RESTRICT;

--
-- Ограничения внешнего ключа таблицы `lesson_questions`
--
ALTER TABLE `lesson_questions`
  ADD CONSTRAINT `lesson_questions_ibfk_1` FOREIGN KEY (`lesson_id`) REFERENCES `lessons` (`id`) ON DELETE CASCADE;

--
-- Ограничения внешнего ключа таблицы `user_achievements`
--
ALTER TABLE `user_achievements`
  ADD CONSTRAINT `user_achievements_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `user` (`id`) ON DELETE CASCADE ON UPDATE RESTRICT,
  ADD CONSTRAINT `user_achievements_ibfk_2` FOREIGN KEY (`achievement_id`) REFERENCES `achievements` (`id`) ON DELETE CASCADE ON UPDATE RESTRICT;

--
-- Ограничения внешнего ключа таблицы `user_assignments`
--
ALTER TABLE `user_assignments`
  ADD CONSTRAINT `user_assignments_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `user` (`id`),
  ADD CONSTRAINT `user_assignments_ibfk_2` FOREIGN KEY (`assignment_id`) REFERENCES `assignments` (`id`);

--
-- Ограничения внешнего ключа таблицы `user_attempts`
--
ALTER TABLE `user_attempts`
  ADD CONSTRAINT `user_attempts_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `user` (`id`),
  ADD CONSTRAINT `user_attempts_ibfk_2` FOREIGN KEY (`assignment_id`) REFERENCES `assignments` (`id`);

--
-- Ограничения внешнего ключа таблицы `user_hints`
--
ALTER TABLE `user_hints`
  ADD CONSTRAINT `user_hints_ibfk_1` FOREIGN KEY (`hint_id`) REFERENCES `lesson_hints` (`id`) ON DELETE CASCADE ON UPDATE RESTRICT,
  ADD CONSTRAINT `user_hints_ibfk_2` FOREIGN KEY (`lesson_id`) REFERENCES `lessons` (`id`) ON DELETE CASCADE ON UPDATE RESTRICT,
  ADD CONSTRAINT `user_hints_ibfk_3` FOREIGN KEY (`user_id`) REFERENCES `user` (`id`) ON DELETE CASCADE ON UPDATE RESTRICT;

--
-- Ограничения внешнего ключа таблицы `user_lessons`
--
ALTER TABLE `user_lessons`
  ADD CONSTRAINT `user_lessons_ibfk_1` FOREIGN KEY (`user_id`) REFERENCES `user` (`id`) ON DELETE CASCADE ON UPDATE RESTRICT,
  ADD CONSTRAINT `user_lessons_ibfk_2` FOREIGN KEY (`lesson_id`) REFERENCES `lessons` (`id`) ON DELETE CASCADE ON UPDATE RESTRICT;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
